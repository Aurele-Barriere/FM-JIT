  

Require Import List.
Require Cabs.



From Coq.Lists Require List.
From Coq.PArith Require Import BinPos.
From MenhirLib Require Main.
Import List.ListNotations.

Unset Elimination Schemes.

Inductive token : Type :=
| XOR_ASSIGN :       (Cabs.loc)%type -> token
| WHILE :       (Cabs.loc)%type -> token
| VOLATILE :       (Cabs.loc)%type -> token
| VOID :       (Cabs.loc)%type -> token
| VAR_NAME :       (Cabs.string * Cabs.loc)%type -> token
| UNSIGNED :       (Cabs.loc)%type -> token
| UNION :       (Cabs.loc)%type -> token
| UNDERSCORE_BOOL :       (Cabs.loc)%type -> token
| TYPEDEF_NAME :       (Cabs.string * Cabs.loc)%type -> token
| TYPEDEF :       (Cabs.loc)%type -> token
| TILDE :       (Cabs.loc)%type -> token
| SWITCH :       (Cabs.loc)%type -> token
| SUB_ASSIGN :       (Cabs.loc)%type -> token
| STRUCT :       (Cabs.loc)%type -> token
| STRING_LITERAL :       (bool * list Cabs.char_code * Cabs.loc)%type -> token
| STATIC_ASSERT :       (Cabs.loc)%type -> token
| STATIC :       (Cabs.loc)%type -> token
| STAR :       (Cabs.loc)%type -> token
| SLASH :       (Cabs.loc)%type -> token
| SIZEOF :       (Cabs.loc)%type -> token
| SIGNED :       (Cabs.loc)%type -> token
| SHORT :       (Cabs.loc)%type -> token
| SEMICOLON :       (Cabs.loc)%type -> token
| RPAREN :       (Cabs.loc)%type -> token
| RIGHT_ASSIGN :       (Cabs.loc)%type -> token
| RIGHT :       (Cabs.loc)%type -> token
| RETURN :       (Cabs.loc)%type -> token
| RESTRICT :       (Cabs.loc)%type -> token
| REGISTER :       (Cabs.loc)%type -> token
| RBRACK :       (Cabs.loc)%type -> token
| RBRACE :       (Cabs.loc)%type -> token
| QUESTION :       (Cabs.loc)%type -> token
| PTR :       (Cabs.loc)%type -> token
| PRAGMA :       (Cabs.string * Cabs.loc)%type -> token
| PLUS :       (Cabs.loc)%type -> token
| PERCENT :       (Cabs.loc)%type -> token
| PACKED :       (Cabs.loc)%type -> token
| OTHER_NAME :       (Cabs.string * Cabs.loc)%type -> token
| OR_ASSIGN :       (Cabs.loc)%type -> token
| NORETURN :       (Cabs.loc)%type -> token
| NEQ :       (Cabs.loc)%type -> token
| MUL_ASSIGN :       (Cabs.loc)%type -> token
| MOD_ASSIGN :       (Cabs.loc)%type -> token
| MINUS :       (Cabs.loc)%type -> token
| LT :       (Cabs.loc)%type -> token
| LPAREN :       (Cabs.loc)%type -> token
| LONG :       (Cabs.loc)%type -> token
| LEQ :       (Cabs.loc)%type -> token
| LEFT_ASSIGN :       (Cabs.loc)%type -> token
| LEFT :       (Cabs.loc)%type -> token
| LBRACK :       (Cabs.loc)%type -> token
| LBRACE :       (Cabs.loc)%type -> token
| INT :       (Cabs.loc)%type -> token
| INLINE :       (Cabs.loc)%type -> token
| INC :       (Cabs.loc)%type -> token
| IF_ :       (Cabs.loc)%type -> token
| HAT :       (Cabs.loc)%type -> token
| GT :       (Cabs.loc)%type -> token
| GOTO :       (Cabs.loc)%type -> token
| GEQ :       (Cabs.loc)%type -> token
| FOR :       (Cabs.loc)%type -> token
| FLOAT :       (Cabs.loc)%type -> token
| EXTERN :       (Cabs.loc)%type -> token
| EQEQ :       (Cabs.loc)%type -> token
| EQ :       (Cabs.loc)%type -> token
| EOF : unit%type -> token
| ENUM :       (Cabs.loc)%type -> token
| ELSE :       (Cabs.loc)%type -> token
| ELLIPSIS :       (Cabs.loc)%type -> token
| DOUBLE :       (Cabs.loc)%type -> token
| DOT :       (Cabs.loc)%type -> token
| DO :       (Cabs.loc)%type -> token
| DIV_ASSIGN :       (Cabs.loc)%type -> token
| DEFAULT :       (Cabs.loc)%type -> token
| DEC :       (Cabs.loc)%type -> token
| CONTINUE :       (Cabs.loc)%type -> token
| CONSTANT :       (Cabs.constant * Cabs.loc)%type -> token
| CONST :       (Cabs.loc)%type -> token
| COMMA :       (Cabs.loc)%type -> token
| COLON :       (Cabs.loc)%type -> token
| CHAR :       (Cabs.loc)%type -> token
| CASE :       (Cabs.loc)%type -> token
| BUILTIN_VA_ARG :       (Cabs.loc)%type -> token
| BUILTIN_OFFSETOF :       (Cabs.loc)%type -> token
| BREAK :       (Cabs.loc)%type -> token
| BARBAR :       (Cabs.loc)%type -> token
| BAR :       (Cabs.loc)%type -> token
| BANG :       (Cabs.loc)%type -> token
| AUTO :       (Cabs.loc)%type -> token
| ATTRIBUTE :       (Cabs.loc)%type -> token
| ASM :       (Cabs.loc)%type -> token
| AND_ASSIGN :       (Cabs.loc)%type -> token
| ANDAND :       (Cabs.loc)%type -> token
| AND :       (Cabs.loc)%type -> token
| ALIGNOF :       (Cabs.loc)%type -> token
| ALIGNAS :       (Cabs.loc)%type -> token
| ADD_ASSIGN :       (Cabs.loc)%type -> token.

Module Import Gram <: MenhirLib.Grammar.T.

Local Obligation Tactic := let x := fresh in intro x; case x; reflexivity.

Inductive terminal' : Set :=
| ADD_ASSIGN't
| ALIGNAS't
| ALIGNOF't
| AND't
| ANDAND't
| AND_ASSIGN't
| ASM't
| ATTRIBUTE't
| AUTO't
| BANG't
| BAR't
| BARBAR't
| BREAK't
| BUILTIN_OFFSETOF't
| BUILTIN_VA_ARG't
| CASE't
| CHAR't
| COLON't
| COMMA't
| CONST't
| CONSTANT't
| CONTINUE't
| DEC't
| DEFAULT't
| DIV_ASSIGN't
| DO't
| DOT't
| DOUBLE't
| ELLIPSIS't
| ELSE't
| ENUM't
| EOF't
| EQ't
| EQEQ't
| EXTERN't
| FLOAT't
| FOR't
| GEQ't
| GOTO't
| GT't
| HAT't
| IF_'t
| INC't
| INLINE't
| INT't
| LBRACE't
| LBRACK't
| LEFT't
| LEFT_ASSIGN't
| LEQ't
| LONG't
| LPAREN't
| LT't
| MINUS't
| MOD_ASSIGN't
| MUL_ASSIGN't
| NEQ't
| NORETURN't
| OR_ASSIGN't
| OTHER_NAME't
| PACKED't
| PERCENT't
| PLUS't
| PRAGMA't
| PTR't
| QUESTION't
| RBRACE't
| RBRACK't
| REGISTER't
| RESTRICT't
| RETURN't
| RIGHT't
| RIGHT_ASSIGN't
| RPAREN't
| SEMICOLON't
| SHORT't
| SIGNED't
| SIZEOF't
| SLASH't
| STAR't
| STATIC't
| STATIC_ASSERT't
| STRING_LITERAL't
| STRUCT't
| SUB_ASSIGN't
| SWITCH't
| TILDE't
| TYPEDEF't
| TYPEDEF_NAME't
| UNDERSCORE_BOOL't
| UNION't
| UNSIGNED't
| VAR_NAME't
| VOID't
| VOLATILE't
| WHILE't
| XOR_ASSIGN't.
Definition terminal := terminal'.

Program Instance terminalNum : MenhirLib.Alphabet.Numbered terminal :=
  { inj := fun x => match x return _ with
    | ADD_ASSIGN't => 1%positive
    | ALIGNAS't => 2%positive
    | ALIGNOF't => 3%positive
    | AND't => 4%positive
    | ANDAND't => 5%positive
    | AND_ASSIGN't => 6%positive
    | ASM't => 7%positive
    | ATTRIBUTE't => 8%positive
    | AUTO't => 9%positive
    | BANG't => 10%positive
    | BAR't => 11%positive
    | BARBAR't => 12%positive
    | BREAK't => 13%positive
    | BUILTIN_OFFSETOF't => 14%positive
    | BUILTIN_VA_ARG't => 15%positive
    | CASE't => 16%positive
    | CHAR't => 17%positive
    | COLON't => 18%positive
    | COMMA't => 19%positive
    | CONST't => 20%positive
    | CONSTANT't => 21%positive
    | CONTINUE't => 22%positive
    | DEC't => 23%positive
    | DEFAULT't => 24%positive
    | DIV_ASSIGN't => 25%positive
    | DO't => 26%positive
    | DOT't => 27%positive
    | DOUBLE't => 28%positive
    | ELLIPSIS't => 29%positive
    | ELSE't => 30%positive
    | ENUM't => 31%positive
    | EOF't => 32%positive
    | EQ't => 33%positive
    | EQEQ't => 34%positive
    | EXTERN't => 35%positive
    | FLOAT't => 36%positive
    | FOR't => 37%positive
    | GEQ't => 38%positive
    | GOTO't => 39%positive
    | GT't => 40%positive
    | HAT't => 41%positive
    | IF_'t => 42%positive
    | INC't => 43%positive
    | INLINE't => 44%positive
    | INT't => 45%positive
    | LBRACE't => 46%positive
    | LBRACK't => 47%positive
    | LEFT't => 48%positive
    | LEFT_ASSIGN't => 49%positive
    | LEQ't => 50%positive
    | LONG't => 51%positive
    | LPAREN't => 52%positive
    | LT't => 53%positive
    | MINUS't => 54%positive
    | MOD_ASSIGN't => 55%positive
    | MUL_ASSIGN't => 56%positive
    | NEQ't => 57%positive
    | NORETURN't => 58%positive
    | OR_ASSIGN't => 59%positive
    | OTHER_NAME't => 60%positive
    | PACKED't => 61%positive
    | PERCENT't => 62%positive
    | PLUS't => 63%positive
    | PRAGMA't => 64%positive
    | PTR't => 65%positive
    | QUESTION't => 66%positive
    | RBRACE't => 67%positive
    | RBRACK't => 68%positive
    | REGISTER't => 69%positive
    | RESTRICT't => 70%positive
    | RETURN't => 71%positive
    | RIGHT't => 72%positive
    | RIGHT_ASSIGN't => 73%positive
    | RPAREN't => 74%positive
    | SEMICOLON't => 75%positive
    | SHORT't => 76%positive
    | SIGNED't => 77%positive
    | SIZEOF't => 78%positive
    | SLASH't => 79%positive
    | STAR't => 80%positive
    | STATIC't => 81%positive
    | STATIC_ASSERT't => 82%positive
    | STRING_LITERAL't => 83%positive
    | STRUCT't => 84%positive
    | SUB_ASSIGN't => 85%positive
    | SWITCH't => 86%positive
    | TILDE't => 87%positive
    | TYPEDEF't => 88%positive
    | TYPEDEF_NAME't => 89%positive
    | UNDERSCORE_BOOL't => 90%positive
    | UNION't => 91%positive
    | UNSIGNED't => 92%positive
    | VAR_NAME't => 93%positive
    | VOID't => 94%positive
    | VOLATILE't => 95%positive
    | WHILE't => 96%positive
    | XOR_ASSIGN't => 97%positive
    end;
    surj := (fun n => match n return _ with
    | 1%positive => ADD_ASSIGN't
    | 2%positive => ALIGNAS't
    | 3%positive => ALIGNOF't
    | 4%positive => AND't
    | 5%positive => ANDAND't
    | 6%positive => AND_ASSIGN't
    | 7%positive => ASM't
    | 8%positive => ATTRIBUTE't
    | 9%positive => AUTO't
    | 10%positive => BANG't
    | 11%positive => BAR't
    | 12%positive => BARBAR't
    | 13%positive => BREAK't
    | 14%positive => BUILTIN_OFFSETOF't
    | 15%positive => BUILTIN_VA_ARG't
    | 16%positive => CASE't
    | 17%positive => CHAR't
    | 18%positive => COLON't
    | 19%positive => COMMA't
    | 20%positive => CONST't
    | 21%positive => CONSTANT't
    | 22%positive => CONTINUE't
    | 23%positive => DEC't
    | 24%positive => DEFAULT't
    | 25%positive => DIV_ASSIGN't
    | 26%positive => DO't
    | 27%positive => DOT't
    | 28%positive => DOUBLE't
    | 29%positive => ELLIPSIS't
    | 30%positive => ELSE't
    | 31%positive => ENUM't
    | 32%positive => EOF't
    | 33%positive => EQ't
    | 34%positive => EQEQ't
    | 35%positive => EXTERN't
    | 36%positive => FLOAT't
    | 37%positive => FOR't
    | 38%positive => GEQ't
    | 39%positive => GOTO't
    | 40%positive => GT't
    | 41%positive => HAT't
    | 42%positive => IF_'t
    | 43%positive => INC't
    | 44%positive => INLINE't
    | 45%positive => INT't
    | 46%positive => LBRACE't
    | 47%positive => LBRACK't
    | 48%positive => LEFT't
    | 49%positive => LEFT_ASSIGN't
    | 50%positive => LEQ't
    | 51%positive => LONG't
    | 52%positive => LPAREN't
    | 53%positive => LT't
    | 54%positive => MINUS't
    | 55%positive => MOD_ASSIGN't
    | 56%positive => MUL_ASSIGN't
    | 57%positive => NEQ't
    | 58%positive => NORETURN't
    | 59%positive => OR_ASSIGN't
    | 60%positive => OTHER_NAME't
    | 61%positive => PACKED't
    | 62%positive => PERCENT't
    | 63%positive => PLUS't
    | 64%positive => PRAGMA't
    | 65%positive => PTR't
    | 66%positive => QUESTION't
    | 67%positive => RBRACE't
    | 68%positive => RBRACK't
    | 69%positive => REGISTER't
    | 70%positive => RESTRICT't
    | 71%positive => RETURN't
    | 72%positive => RIGHT't
    | 73%positive => RIGHT_ASSIGN't
    | 74%positive => RPAREN't
    | 75%positive => SEMICOLON't
    | 76%positive => SHORT't
    | 77%positive => SIGNED't
    | 78%positive => SIZEOF't
    | 79%positive => SLASH't
    | 80%positive => STAR't
    | 81%positive => STATIC't
    | 82%positive => STATIC_ASSERT't
    | 83%positive => STRING_LITERAL't
    | 84%positive => STRUCT't
    | 85%positive => SUB_ASSIGN't
    | 86%positive => SWITCH't
    | 87%positive => TILDE't
    | 88%positive => TYPEDEF't
    | 89%positive => TYPEDEF_NAME't
    | 90%positive => UNDERSCORE_BOOL't
    | 91%positive => UNION't
    | 92%positive => UNSIGNED't
    | 93%positive => VAR_NAME't
    | 94%positive => VOID't
    | 95%positive => VOLATILE't
    | 96%positive => WHILE't
    | 97%positive => XOR_ASSIGN't
    | _ => ADD_ASSIGN't
    end)%Z;
    inj_bound := 97%positive }.
Instance TerminalAlph : MenhirLib.Alphabet.Alphabet terminal := _.

Inductive nonterminal' : Set :=
| AND_expression'nt
| abstract_declarator'nt
| additive_expression'nt
| argument_expression_list'nt
| asm_arguments'nt
| asm_attributes'nt
| asm_flags'nt
| asm_op_name'nt
| asm_operand'nt
| asm_operands'nt
| asm_operands_ne'nt
| asm_statement'nt
| assignment_expression'nt
| assignment_operator'nt
| attribute_specifier'nt
| attribute_specifier_list'nt
| block_item'nt
| block_item_list'nt
| c_initializer'nt
| cast_expression'nt
| compound_statement'nt
| conditional_expression'nt
| constant_expression'nt
| declaration'nt
| declaration_list'nt
| declaration_specifiers'nt
| declaration_specifiers_typespec_opt'nt
| declarator'nt
| declarator_noattrend'nt
| designation'nt
| designator'nt
| designator_list'nt
| direct_abstract_declarator'nt
| direct_declarator'nt
| enum_specifier'nt
| enumeration_constant'nt
| enumerator'nt
| enumerator_list'nt
| equality_expression'nt
| exclusive_OR_expression'nt
| expression'nt
| expression_statement'nt
| external_declaration'nt
| function_definition'nt
| function_specifier'nt
| gcc_attribute'nt
| gcc_attribute_list'nt
| gcc_attribute_word'nt
| identifier_list'nt
| inclusive_OR_expression'nt
| init_declarator'nt
| init_declarator_list'nt
| initializer_list'nt
| iteration_statement_statement_dangerous_'nt
| iteration_statement_statement_safe_'nt
| jump_statement'nt
| labeled_statement_statement_dangerous_'nt
| labeled_statement_statement_safe_'nt
| logical_AND_expression'nt
| logical_OR_expression'nt
| multiplicative_expression'nt
| parameter_declaration'nt
| parameter_list'nt
| parameter_type_list'nt
| pointer'nt
| postfix_expression'nt
| primary_expression'nt
| relational_expression'nt
| selection_statement_dangerous'nt
| selection_statement_safe'nt
| shift_expression'nt
| specifier_qualifier_list'nt
| statement_dangerous'nt
| statement_safe'nt
| static_assert_declaration'nt
| storage_class_specifier'nt
| struct_declaration'nt
| struct_declaration_list'nt
| struct_declarator'nt
| struct_declarator_list'nt
| struct_or_union'nt
| struct_or_union_specifier'nt
| translation_unit'nt
| translation_unit_file'nt
| type_name'nt
| type_qualifier'nt
| type_qualifier_list'nt
| type_qualifier_noattr'nt
| type_specifier'nt
| unary_expression'nt
| unary_operator'nt.
Definition nonterminal := nonterminal'.

Program Instance nonterminalNum : MenhirLib.Alphabet.Numbered nonterminal :=
  { inj := fun x => match x return _ with
    | AND_expression'nt => 1%positive
    | abstract_declarator'nt => 2%positive
    | additive_expression'nt => 3%positive
    | argument_expression_list'nt => 4%positive
    | asm_arguments'nt => 5%positive
    | asm_attributes'nt => 6%positive
    | asm_flags'nt => 7%positive
    | asm_op_name'nt => 8%positive
    | asm_operand'nt => 9%positive
    | asm_operands'nt => 10%positive
    | asm_operands_ne'nt => 11%positive
    | asm_statement'nt => 12%positive
    | assignment_expression'nt => 13%positive
    | assignment_operator'nt => 14%positive
    | attribute_specifier'nt => 15%positive
    | attribute_specifier_list'nt => 16%positive
    | block_item'nt => 17%positive
    | block_item_list'nt => 18%positive
    | c_initializer'nt => 19%positive
    | cast_expression'nt => 20%positive
    | compound_statement'nt => 21%positive
    | conditional_expression'nt => 22%positive
    | constant_expression'nt => 23%positive
    | declaration'nt => 24%positive
    | declaration_list'nt => 25%positive
    | declaration_specifiers'nt => 26%positive
    | declaration_specifiers_typespec_opt'nt => 27%positive
    | declarator'nt => 28%positive
    | declarator_noattrend'nt => 29%positive
    | designation'nt => 30%positive
    | designator'nt => 31%positive
    | designator_list'nt => 32%positive
    | direct_abstract_declarator'nt => 33%positive
    | direct_declarator'nt => 34%positive
    | enum_specifier'nt => 35%positive
    | enumeration_constant'nt => 36%positive
    | enumerator'nt => 37%positive
    | enumerator_list'nt => 38%positive
    | equality_expression'nt => 39%positive
    | exclusive_OR_expression'nt => 40%positive
    | expression'nt => 41%positive
    | expression_statement'nt => 42%positive
    | external_declaration'nt => 43%positive
    | function_definition'nt => 44%positive
    | function_specifier'nt => 45%positive
    | gcc_attribute'nt => 46%positive
    | gcc_attribute_list'nt => 47%positive
    | gcc_attribute_word'nt => 48%positive
    | identifier_list'nt => 49%positive
    | inclusive_OR_expression'nt => 50%positive
    | init_declarator'nt => 51%positive
    | init_declarator_list'nt => 52%positive
    | initializer_list'nt => 53%positive
    | iteration_statement_statement_dangerous_'nt => 54%positive
    | iteration_statement_statement_safe_'nt => 55%positive
    | jump_statement'nt => 56%positive
    | labeled_statement_statement_dangerous_'nt => 57%positive
    | labeled_statement_statement_safe_'nt => 58%positive
    | logical_AND_expression'nt => 59%positive
    | logical_OR_expression'nt => 60%positive
    | multiplicative_expression'nt => 61%positive
    | parameter_declaration'nt => 62%positive
    | parameter_list'nt => 63%positive
    | parameter_type_list'nt => 64%positive
    | pointer'nt => 65%positive
    | postfix_expression'nt => 66%positive
    | primary_expression'nt => 67%positive
    | relational_expression'nt => 68%positive
    | selection_statement_dangerous'nt => 69%positive
    | selection_statement_safe'nt => 70%positive
    | shift_expression'nt => 71%positive
    | specifier_qualifier_list'nt => 72%positive
    | statement_dangerous'nt => 73%positive
    | statement_safe'nt => 74%positive
    | static_assert_declaration'nt => 75%positive
    | storage_class_specifier'nt => 76%positive
    | struct_declaration'nt => 77%positive
    | struct_declaration_list'nt => 78%positive
    | struct_declarator'nt => 79%positive
    | struct_declarator_list'nt => 80%positive
    | struct_or_union'nt => 81%positive
    | struct_or_union_specifier'nt => 82%positive
    | translation_unit'nt => 83%positive
    | translation_unit_file'nt => 84%positive
    | type_name'nt => 85%positive
    | type_qualifier'nt => 86%positive
    | type_qualifier_list'nt => 87%positive
    | type_qualifier_noattr'nt => 88%positive
    | type_specifier'nt => 89%positive
    | unary_expression'nt => 90%positive
    | unary_operator'nt => 91%positive
    end;
    surj := (fun n => match n return _ with
    | 1%positive => AND_expression'nt
    | 2%positive => abstract_declarator'nt
    | 3%positive => additive_expression'nt
    | 4%positive => argument_expression_list'nt
    | 5%positive => asm_arguments'nt
    | 6%positive => asm_attributes'nt
    | 7%positive => asm_flags'nt
    | 8%positive => asm_op_name'nt
    | 9%positive => asm_operand'nt
    | 10%positive => asm_operands'nt
    | 11%positive => asm_operands_ne'nt
    | 12%positive => asm_statement'nt
    | 13%positive => assignment_expression'nt
    | 14%positive => assignment_operator'nt
    | 15%positive => attribute_specifier'nt
    | 16%positive => attribute_specifier_list'nt
    | 17%positive => block_item'nt
    | 18%positive => block_item_list'nt
    | 19%positive => c_initializer'nt
    | 20%positive => cast_expression'nt
    | 21%positive => compound_statement'nt
    | 22%positive => conditional_expression'nt
    | 23%positive => constant_expression'nt
    | 24%positive => declaration'nt
    | 25%positive => declaration_list'nt
    | 26%positive => declaration_specifiers'nt
    | 27%positive => declaration_specifiers_typespec_opt'nt
    | 28%positive => declarator'nt
    | 29%positive => declarator_noattrend'nt
    | 30%positive => designation'nt
    | 31%positive => designator'nt
    | 32%positive => designator_list'nt
    | 33%positive => direct_abstract_declarator'nt
    | 34%positive => direct_declarator'nt
    | 35%positive => enum_specifier'nt
    | 36%positive => enumeration_constant'nt
    | 37%positive => enumerator'nt
    | 38%positive => enumerator_list'nt
    | 39%positive => equality_expression'nt
    | 40%positive => exclusive_OR_expression'nt
    | 41%positive => expression'nt
    | 42%positive => expression_statement'nt
    | 43%positive => external_declaration'nt
    | 44%positive => function_definition'nt
    | 45%positive => function_specifier'nt
    | 46%positive => gcc_attribute'nt
    | 47%positive => gcc_attribute_list'nt
    | 48%positive => gcc_attribute_word'nt
    | 49%positive => identifier_list'nt
    | 50%positive => inclusive_OR_expression'nt
    | 51%positive => init_declarator'nt
    | 52%positive => init_declarator_list'nt
    | 53%positive => initializer_list'nt
    | 54%positive => iteration_statement_statement_dangerous_'nt
    | 55%positive => iteration_statement_statement_safe_'nt
    | 56%positive => jump_statement'nt
    | 57%positive => labeled_statement_statement_dangerous_'nt
    | 58%positive => labeled_statement_statement_safe_'nt
    | 59%positive => logical_AND_expression'nt
    | 60%positive => logical_OR_expression'nt
    | 61%positive => multiplicative_expression'nt
    | 62%positive => parameter_declaration'nt
    | 63%positive => parameter_list'nt
    | 64%positive => parameter_type_list'nt
    | 65%positive => pointer'nt
    | 66%positive => postfix_expression'nt
    | 67%positive => primary_expression'nt
    | 68%positive => relational_expression'nt
    | 69%positive => selection_statement_dangerous'nt
    | 70%positive => selection_statement_safe'nt
    | 71%positive => shift_expression'nt
    | 72%positive => specifier_qualifier_list'nt
    | 73%positive => statement_dangerous'nt
    | 74%positive => statement_safe'nt
    | 75%positive => static_assert_declaration'nt
    | 76%positive => storage_class_specifier'nt
    | 77%positive => struct_declaration'nt
    | 78%positive => struct_declaration_list'nt
    | 79%positive => struct_declarator'nt
    | 80%positive => struct_declarator_list'nt
    | 81%positive => struct_or_union'nt
    | 82%positive => struct_or_union_specifier'nt
    | 83%positive => translation_unit'nt
    | 84%positive => translation_unit_file'nt
    | 85%positive => type_name'nt
    | 86%positive => type_qualifier'nt
    | 87%positive => type_qualifier_list'nt
    | 88%positive => type_qualifier_noattr'nt
    | 89%positive => type_specifier'nt
    | 90%positive => unary_expression'nt
    | 91%positive => unary_operator'nt
    | _ => AND_expression'nt
    end)%Z;
    inj_bound := 91%positive }.
Instance NonTerminalAlph : MenhirLib.Alphabet.Alphabet nonterminal := _.

Include MenhirLib.Grammar.Symbol.

Definition terminal_semantic_type (t:terminal) : Type:=
  match t with
  | XOR_ASSIGN't =>       (Cabs.loc)%type
  | WHILE't =>       (Cabs.loc)%type
  | VOLATILE't =>       (Cabs.loc)%type
  | VOID't =>       (Cabs.loc)%type
  | VAR_NAME't =>       (Cabs.string * Cabs.loc)%type
  | UNSIGNED't =>       (Cabs.loc)%type
  | UNION't =>       (Cabs.loc)%type
  | UNDERSCORE_BOOL't =>       (Cabs.loc)%type
  | TYPEDEF_NAME't =>       (Cabs.string * Cabs.loc)%type
  | TYPEDEF't =>       (Cabs.loc)%type
  | TILDE't =>       (Cabs.loc)%type
  | SWITCH't =>       (Cabs.loc)%type
  | SUB_ASSIGN't =>       (Cabs.loc)%type
  | STRUCT't =>       (Cabs.loc)%type
  | STRING_LITERAL't =>       (bool * list Cabs.char_code * Cabs.loc)%type
  | STATIC_ASSERT't =>       (Cabs.loc)%type
  | STATIC't =>       (Cabs.loc)%type
  | STAR't =>       (Cabs.loc)%type
  | SLASH't =>       (Cabs.loc)%type
  | SIZEOF't =>       (Cabs.loc)%type
  | SIGNED't =>       (Cabs.loc)%type
  | SHORT't =>       (Cabs.loc)%type
  | SEMICOLON't =>       (Cabs.loc)%type
  | RPAREN't =>       (Cabs.loc)%type
  | RIGHT_ASSIGN't =>       (Cabs.loc)%type
  | RIGHT't =>       (Cabs.loc)%type
  | RETURN't =>       (Cabs.loc)%type
  | RESTRICT't =>       (Cabs.loc)%type
  | REGISTER't =>       (Cabs.loc)%type
  | RBRACK't =>       (Cabs.loc)%type
  | RBRACE't =>       (Cabs.loc)%type
  | QUESTION't =>       (Cabs.loc)%type
  | PTR't =>       (Cabs.loc)%type
  | PRAGMA't =>       (Cabs.string * Cabs.loc)%type
  | PLUS't =>       (Cabs.loc)%type
  | PERCENT't =>       (Cabs.loc)%type
  | PACKED't =>       (Cabs.loc)%type
  | OTHER_NAME't =>       (Cabs.string * Cabs.loc)%type
  | OR_ASSIGN't =>       (Cabs.loc)%type
  | NORETURN't =>       (Cabs.loc)%type
  | NEQ't =>       (Cabs.loc)%type
  | MUL_ASSIGN't =>       (Cabs.loc)%type
  | MOD_ASSIGN't =>       (Cabs.loc)%type
  | MINUS't =>       (Cabs.loc)%type
  | LT't =>       (Cabs.loc)%type
  | LPAREN't =>       (Cabs.loc)%type
  | LONG't =>       (Cabs.loc)%type
  | LEQ't =>       (Cabs.loc)%type
  | LEFT_ASSIGN't =>       (Cabs.loc)%type
  | LEFT't =>       (Cabs.loc)%type
  | LBRACK't =>       (Cabs.loc)%type
  | LBRACE't =>       (Cabs.loc)%type
  | INT't =>       (Cabs.loc)%type
  | INLINE't =>       (Cabs.loc)%type
  | INC't =>       (Cabs.loc)%type
  | IF_'t =>       (Cabs.loc)%type
  | HAT't =>       (Cabs.loc)%type
  | GT't =>       (Cabs.loc)%type
  | GOTO't =>       (Cabs.loc)%type
  | GEQ't =>       (Cabs.loc)%type
  | FOR't =>       (Cabs.loc)%type
  | FLOAT't =>       (Cabs.loc)%type
  | EXTERN't =>       (Cabs.loc)%type
  | EQEQ't =>       (Cabs.loc)%type
  | EQ't =>       (Cabs.loc)%type
  | EOF't => unit%type
  | ENUM't =>       (Cabs.loc)%type
  | ELSE't =>       (Cabs.loc)%type
  | ELLIPSIS't =>       (Cabs.loc)%type
  | DOUBLE't =>       (Cabs.loc)%type
  | DOT't =>       (Cabs.loc)%type
  | DO't =>       (Cabs.loc)%type
  | DIV_ASSIGN't =>       (Cabs.loc)%type
  | DEFAULT't =>       (Cabs.loc)%type
  | DEC't =>       (Cabs.loc)%type
  | CONTINUE't =>       (Cabs.loc)%type
  | CONSTANT't =>       (Cabs.constant * Cabs.loc)%type
  | CONST't =>       (Cabs.loc)%type
  | COMMA't =>       (Cabs.loc)%type
  | COLON't =>       (Cabs.loc)%type
  | CHAR't =>       (Cabs.loc)%type
  | CASE't =>       (Cabs.loc)%type
  | BUILTIN_VA_ARG't =>       (Cabs.loc)%type
  | BUILTIN_OFFSETOF't =>       (Cabs.loc)%type
  | BREAK't =>       (Cabs.loc)%type
  | BARBAR't =>       (Cabs.loc)%type
  | BAR't =>       (Cabs.loc)%type
  | BANG't =>       (Cabs.loc)%type
  | AUTO't =>       (Cabs.loc)%type
  | ATTRIBUTE't =>       (Cabs.loc)%type
  | ASM't =>       (Cabs.loc)%type
  | AND_ASSIGN't =>       (Cabs.loc)%type
  | ANDAND't =>       (Cabs.loc)%type
  | AND't =>       (Cabs.loc)%type
  | ALIGNOF't =>       (Cabs.loc)%type
  | ALIGNAS't =>       (Cabs.loc)%type
  | ADD_ASSIGN't =>       (Cabs.loc)%type
  end.

Definition nonterminal_semantic_type (nt:nonterminal) : Type:=
  match nt with
  | unary_operator'nt =>      (Cabs.unary_operator * Cabs.loc)%type
  | unary_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | type_specifier'nt =>      (Cabs.typeSpecifier * Cabs.loc)%type
  | type_qualifier_noattr'nt =>      (Cabs.cvspec * Cabs.loc)%type
  | type_qualifier_list'nt =>      (list Cabs.cvspec (* Reverse order *))%type
  | type_qualifier'nt =>      (Cabs.cvspec * Cabs.loc)%type
  | type_name'nt =>      (list Cabs.spec_elem * Cabs.decl_type)%type
  | translation_unit_file'nt =>       (list Cabs.definition)%type
  | translation_unit'nt =>      (list Cabs.definition (* Reverse order *))%type
  | struct_or_union_specifier'nt =>      (Cabs.typeSpecifier * Cabs.loc)%type
  | struct_or_union'nt =>      (Cabs.structOrUnion * Cabs.loc)%type
  | struct_declarator_list'nt =>      (list (option Cabs.name * option Cabs.expression) (* Reverse order *))%type
  | struct_declarator'nt =>      (option Cabs.name * option Cabs.expression)%type
  | struct_declaration_list'nt =>      (list Cabs.field_group (* Reverse order *))%type
  | struct_declaration'nt =>      (Cabs.field_group)%type
  | storage_class_specifier'nt =>      (Cabs.storage * Cabs.loc)%type
  | static_assert_declaration'nt =>      ((Cabs.expression * Cabs.loc) * (Cabs.constant * Cabs.loc) * Cabs.loc)%type
  | statement_safe'nt =>      (Cabs.statement)%type
  | statement_dangerous'nt =>      (Cabs.statement)%type
  | specifier_qualifier_list'nt =>      (list Cabs.spec_elem * Cabs.loc)%type
  | shift_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | selection_statement_safe'nt =>      (Cabs.statement)%type
  | selection_statement_dangerous'nt =>      (Cabs.statement)%type
  | relational_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | primary_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | postfix_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | pointer'nt =>      ((Cabs.decl_type -> Cabs.decl_type) * Cabs.loc)%type
  | parameter_type_list'nt =>      (list Cabs.parameter * bool)%type
  | parameter_list'nt =>      (list Cabs.parameter (* Reverse order *))%type
  | parameter_declaration'nt =>      (Cabs.parameter)%type
  | multiplicative_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | logical_OR_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | logical_AND_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | labeled_statement_statement_safe_'nt =>      (Cabs.statement)%type
  | labeled_statement_statement_dangerous_'nt =>      (Cabs.statement)%type
  | jump_statement'nt =>      (Cabs.statement)%type
  | iteration_statement_statement_safe_'nt =>      (Cabs.statement)%type
  | iteration_statement_statement_dangerous_'nt =>      (Cabs.statement)%type
  | initializer_list'nt =>      (list (list Cabs.initwhat * Cabs.init_expression) (* Reverse order *))%type
  | init_declarator_list'nt =>      (list Cabs.init_name (* Reverse order *))%type
  | init_declarator'nt =>      (Cabs.init_name)%type
  | inclusive_OR_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | identifier_list'nt =>      (list Cabs.string (* Reverse order *))%type
  | gcc_attribute_word'nt =>      (Cabs.gcc_attribute_word)%type
  | gcc_attribute_list'nt =>      (list Cabs.gcc_attribute)%type
  | gcc_attribute'nt =>      (Cabs.gcc_attribute)%type
  | function_specifier'nt =>      (Cabs.funspec * Cabs.loc)%type
  | function_definition'nt =>      (Cabs.definition)%type
  | external_declaration'nt =>      (Cabs.definition)%type
  | expression_statement'nt =>      (Cabs.statement)%type
  | expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | exclusive_OR_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | equality_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | enumerator_list'nt =>      (list (Cabs.string * option Cabs.expression * Cabs.loc) (* Reverse order *))%type
  | enumerator'nt =>      (Cabs.string * option Cabs.expression * Cabs.loc)%type
  | enumeration_constant'nt =>      (Cabs.string * Cabs.loc)%type
  | enum_specifier'nt =>      (Cabs.typeSpecifier * Cabs.loc)%type
  | direct_declarator'nt =>      (Cabs.name)%type
  | direct_abstract_declarator'nt =>      (Cabs.decl_type)%type
  | designator_list'nt =>      (list Cabs.initwhat (* Reverse order *))%type
  | designator'nt =>      (Cabs.initwhat)%type
  | designation'nt =>      (list Cabs.initwhat)%type
  | declarator_noattrend'nt =>      (Cabs.name)%type
  | declarator'nt =>      (Cabs.name)%type
  | declaration_specifiers_typespec_opt'nt =>      (list Cabs.spec_elem)%type
  | declaration_specifiers'nt =>      (list Cabs.spec_elem * Cabs.loc)%type
  | declaration_list'nt =>      (list Cabs.definition)%type
  | declaration'nt =>      (Cabs.definition)%type
  | constant_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | conditional_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | compound_statement'nt =>      (Cabs.statement)%type
  | cast_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | c_initializer'nt =>      (Cabs.init_expression)%type
  | block_item_list'nt =>      (list Cabs.statement (* Reverse order *))%type
  | block_item'nt =>      (Cabs.statement)%type
  | attribute_specifier_list'nt =>      (list Cabs.attribute)%type
  | attribute_specifier'nt =>      (Cabs.attribute * Cabs.loc)%type
  | assignment_operator'nt =>      (Cabs.binary_operator)%type
  | assignment_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | asm_statement'nt =>      (Cabs.statement)%type
  | asm_operands_ne'nt =>      (list Cabs.asm_operand)%type
  | asm_operands'nt =>      (list Cabs.asm_operand)%type
  | asm_operand'nt =>      (Cabs.asm_operand)%type
  | asm_op_name'nt =>      (option Cabs.string)%type
  | asm_flags'nt =>      (list Cabs.asm_flag)%type
  | asm_attributes'nt =>      (list Cabs.cvspec)%type
  | asm_arguments'nt =>      (list Cabs.asm_operand * list Cabs.asm_operand * list Cabs.asm_flag)%type
  | argument_expression_list'nt =>      (list Cabs.expression (* Reverse order *))%type
  | additive_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  | abstract_declarator'nt =>      (Cabs.decl_type)%type
  | AND_expression'nt =>      (Cabs.expression * Cabs.loc)%type
  end.

Definition symbol_semantic_type (s:symbol) : Type:=
  match s with
  | T t => terminal_semantic_type t
  | NT nt => nonterminal_semantic_type nt
  end.

Definition token := token.

Definition token_term (tok : token) : terminal :=
  match tok with
  | XOR_ASSIGN _ => XOR_ASSIGN't
  | WHILE _ => WHILE't
  | VOLATILE _ => VOLATILE't
  | VOID _ => VOID't
  | VAR_NAME _ => VAR_NAME't
  | UNSIGNED _ => UNSIGNED't
  | UNION _ => UNION't
  | UNDERSCORE_BOOL _ => UNDERSCORE_BOOL't
  | TYPEDEF_NAME _ => TYPEDEF_NAME't
  | TYPEDEF _ => TYPEDEF't
  | TILDE _ => TILDE't
  | SWITCH _ => SWITCH't
  | SUB_ASSIGN _ => SUB_ASSIGN't
  | STRUCT _ => STRUCT't
  | STRING_LITERAL _ => STRING_LITERAL't
  | STATIC_ASSERT _ => STATIC_ASSERT't
  | STATIC _ => STATIC't
  | STAR _ => STAR't
  | SLASH _ => SLASH't
  | SIZEOF _ => SIZEOF't
  | SIGNED _ => SIGNED't
  | SHORT _ => SHORT't
  | SEMICOLON _ => SEMICOLON't
  | RPAREN _ => RPAREN't
  | RIGHT_ASSIGN _ => RIGHT_ASSIGN't
  | RIGHT _ => RIGHT't
  | RETURN _ => RETURN't
  | RESTRICT _ => RESTRICT't
  | REGISTER _ => REGISTER't
  | RBRACK _ => RBRACK't
  | RBRACE _ => RBRACE't
  | QUESTION _ => QUESTION't
  | PTR _ => PTR't
  | PRAGMA _ => PRAGMA't
  | PLUS _ => PLUS't
  | PERCENT _ => PERCENT't
  | PACKED _ => PACKED't
  | OTHER_NAME _ => OTHER_NAME't
  | OR_ASSIGN _ => OR_ASSIGN't
  | NORETURN _ => NORETURN't
  | NEQ _ => NEQ't
  | MUL_ASSIGN _ => MUL_ASSIGN't
  | MOD_ASSIGN _ => MOD_ASSIGN't
  | MINUS _ => MINUS't
  | LT _ => LT't
  | LPAREN _ => LPAREN't
  | LONG _ => LONG't
  | LEQ _ => LEQ't
  | LEFT_ASSIGN _ => LEFT_ASSIGN't
  | LEFT _ => LEFT't
  | LBRACK _ => LBRACK't
  | LBRACE _ => LBRACE't
  | INT _ => INT't
  | INLINE _ => INLINE't
  | INC _ => INC't
  | IF_ _ => IF_'t
  | HAT _ => HAT't
  | GT _ => GT't
  | GOTO _ => GOTO't
  | GEQ _ => GEQ't
  | FOR _ => FOR't
  | FLOAT _ => FLOAT't
  | EXTERN _ => EXTERN't
  | EQEQ _ => EQEQ't
  | EQ _ => EQ't
  | EOF _ => EOF't
  | ENUM _ => ENUM't
  | ELSE _ => ELSE't
  | ELLIPSIS _ => ELLIPSIS't
  | DOUBLE _ => DOUBLE't
  | DOT _ => DOT't
  | DO _ => DO't
  | DIV_ASSIGN _ => DIV_ASSIGN't
  | DEFAULT _ => DEFAULT't
  | DEC _ => DEC't
  | CONTINUE _ => CONTINUE't
  | CONSTANT _ => CONSTANT't
  | CONST _ => CONST't
  | COMMA _ => COMMA't
  | COLON _ => COLON't
  | CHAR _ => CHAR't
  | CASE _ => CASE't
  | BUILTIN_VA_ARG _ => BUILTIN_VA_ARG't
  | BUILTIN_OFFSETOF _ => BUILTIN_OFFSETOF't
  | BREAK _ => BREAK't
  | BARBAR _ => BARBAR't
  | BAR _ => BAR't
  | BANG _ => BANG't
  | AUTO _ => AUTO't
  | ATTRIBUTE _ => ATTRIBUTE't
  | ASM _ => ASM't
  | AND_ASSIGN _ => AND_ASSIGN't
  | ANDAND _ => ANDAND't
  | AND _ => AND't
  | ALIGNOF _ => ALIGNOF't
  | ALIGNAS _ => ALIGNAS't
  | ADD_ASSIGN _ => ADD_ASSIGN't
  end.

Definition token_sem (tok : token) : symbol_semantic_type (T (token_term tok)) :=
  match tok with
  | XOR_ASSIGN x => x
  | WHILE x => x
  | VOLATILE x => x
  | VOID x => x
  | VAR_NAME x => x
  | UNSIGNED x => x
  | UNION x => x
  | UNDERSCORE_BOOL x => x
  | TYPEDEF_NAME x => x
  | TYPEDEF x => x
  | TILDE x => x
  | SWITCH x => x
  | SUB_ASSIGN x => x
  | STRUCT x => x
  | STRING_LITERAL x => x
  | STATIC_ASSERT x => x
  | STATIC x => x
  | STAR x => x
  | SLASH x => x
  | SIZEOF x => x
  | SIGNED x => x
  | SHORT x => x
  | SEMICOLON x => x
  | RPAREN x => x
  | RIGHT_ASSIGN x => x
  | RIGHT x => x
  | RETURN x => x
  | RESTRICT x => x
  | REGISTER x => x
  | RBRACK x => x
  | RBRACE x => x
  | QUESTION x => x
  | PTR x => x
  | PRAGMA x => x
  | PLUS x => x
  | PERCENT x => x
  | PACKED x => x
  | OTHER_NAME x => x
  | OR_ASSIGN x => x
  | NORETURN x => x
  | NEQ x => x
  | MUL_ASSIGN x => x
  | MOD_ASSIGN x => x
  | MINUS x => x
  | LT x => x
  | LPAREN x => x
  | LONG x => x
  | LEQ x => x
  | LEFT_ASSIGN x => x
  | LEFT x => x
  | LBRACK x => x
  | LBRACE x => x
  | INT x => x
  | INLINE x => x
  | INC x => x
  | IF_ x => x
  | HAT x => x
  | GT x => x
  | GOTO x => x
  | GEQ x => x
  | FOR x => x
  | FLOAT x => x
  | EXTERN x => x
  | EQEQ x => x
  | EQ x => x
  | EOF x => x
  | ENUM x => x
  | ELSE x => x
  | ELLIPSIS x => x
  | DOUBLE x => x
  | DOT x => x
  | DO x => x
  | DIV_ASSIGN x => x
  | DEFAULT x => x
  | DEC x => x
  | CONTINUE x => x
  | CONSTANT x => x
  | CONST x => x
  | COMMA x => x
  | COLON x => x
  | CHAR x => x
  | CASE x => x
  | BUILTIN_VA_ARG x => x
  | BUILTIN_OFFSETOF x => x
  | BREAK x => x
  | BARBAR x => x
  | BAR x => x
  | BANG x => x
  | AUTO x => x
  | ATTRIBUTE x => x
  | ASM x => x
  | AND_ASSIGN x => x
  | ANDAND x => x
  | AND x => x
  | ALIGNOF x => x
  | ALIGNAS x => x
  | ADD_ASSIGN x => x
  end.

Inductive production' : Set :=
| Prod'unary_operator'5
| Prod'unary_operator'4
| Prod'unary_operator'3
| Prod'unary_operator'2
| Prod'unary_operator'1
| Prod'unary_operator'0
| Prod'unary_expression'6
| Prod'unary_expression'5
| Prod'unary_expression'4
| Prod'unary_expression'3
| Prod'unary_expression'2
| Prod'unary_expression'1
| Prod'unary_expression'0
| Prod'type_specifier'12
| Prod'type_specifier'11
| Prod'type_specifier'10
| Prod'type_specifier'9
| Prod'type_specifier'8
| Prod'type_specifier'7
| Prod'type_specifier'6
| Prod'type_specifier'5
| Prod'type_specifier'4
| Prod'type_specifier'3
| Prod'type_specifier'2
| Prod'type_specifier'1
| Prod'type_specifier'0
| Prod'type_qualifier_noattr'2
| Prod'type_qualifier_noattr'1
| Prod'type_qualifier_noattr'0
| Prod'type_qualifier_list'1
| Prod'type_qualifier_list'0
| Prod'type_qualifier'1
| Prod'type_qualifier'0
| Prod'type_name'1
| Prod'type_name'0
| Prod'translation_unit_file'1
| Prod'translation_unit_file'0
| Prod'translation_unit'3
| Prod'translation_unit'2
| Prod'translation_unit'1
| Prod'translation_unit'0
| Prod'struct_or_union_specifier'2
| Prod'struct_or_union_specifier'1
| Prod'struct_or_union_specifier'0
| Prod'struct_or_union'1
| Prod'struct_or_union'0
| Prod'struct_declarator_list'1
| Prod'struct_declarator_list'0
| Prod'struct_declarator'2
| Prod'struct_declarator'1
| Prod'struct_declarator'0
| Prod'struct_declaration_list'1
| Prod'struct_declaration_list'0
| Prod'struct_declaration'2
| Prod'struct_declaration'1
| Prod'struct_declaration'0
| Prod'storage_class_specifier'4
| Prod'storage_class_specifier'3
| Prod'storage_class_specifier'2
| Prod'storage_class_specifier'1
| Prod'storage_class_specifier'0
| Prod'static_assert_declaration'0
| Prod'statement_safe'6
| Prod'statement_safe'5
| Prod'statement_safe'4
| Prod'statement_safe'3
| Prod'statement_safe'2
| Prod'statement_safe'1
| Prod'statement_safe'0
| Prod'statement_dangerous'6
| Prod'statement_dangerous'5
| Prod'statement_dangerous'4
| Prod'statement_dangerous'3
| Prod'statement_dangerous'2
| Prod'statement_dangerous'1
| Prod'statement_dangerous'0
| Prod'specifier_qualifier_list'3
| Prod'specifier_qualifier_list'2
| Prod'specifier_qualifier_list'1
| Prod'specifier_qualifier_list'0
| Prod'shift_expression'2
| Prod'shift_expression'1
| Prod'shift_expression'0
| Prod'selection_statement_safe'1
| Prod'selection_statement_safe'0
| Prod'selection_statement_dangerous'2
| Prod'selection_statement_dangerous'1
| Prod'selection_statement_dangerous'0
| Prod'relational_expression'4
| Prod'relational_expression'3
| Prod'relational_expression'2
| Prod'relational_expression'1
| Prod'relational_expression'0
| Prod'primary_expression'3
| Prod'primary_expression'2
| Prod'primary_expression'1
| Prod'primary_expression'0
| Prod'postfix_expression'12
| Prod'postfix_expression'11
| Prod'postfix_expression'10
| Prod'postfix_expression'9
| Prod'postfix_expression'8
| Prod'postfix_expression'7
| Prod'postfix_expression'6
| Prod'postfix_expression'5
| Prod'postfix_expression'4
| Prod'postfix_expression'3
| Prod'postfix_expression'2
| Prod'postfix_expression'1
| Prod'postfix_expression'0
| Prod'pointer'3
| Prod'pointer'2
| Prod'pointer'1
| Prod'pointer'0
| Prod'parameter_type_list'1
| Prod'parameter_type_list'0
| Prod'parameter_list'1
| Prod'parameter_list'0
| Prod'parameter_declaration'2
| Prod'parameter_declaration'1
| Prod'parameter_declaration'0
| Prod'multiplicative_expression'3
| Prod'multiplicative_expression'2
| Prod'multiplicative_expression'1
| Prod'multiplicative_expression'0
| Prod'logical_OR_expression'1
| Prod'logical_OR_expression'0
| Prod'logical_AND_expression'1
| Prod'logical_AND_expression'0
| Prod'labeled_statement_statement_safe_'2
| Prod'labeled_statement_statement_safe_'1
| Prod'labeled_statement_statement_safe_'0
| Prod'labeled_statement_statement_dangerous_'2
| Prod'labeled_statement_statement_dangerous_'1
| Prod'labeled_statement_statement_dangerous_'0
| Prod'jump_statement'4
| Prod'jump_statement'3
| Prod'jump_statement'2
| Prod'jump_statement'1
| Prod'jump_statement'0
| Prod'iteration_statement_statement_safe_'13
| Prod'iteration_statement_statement_safe_'12
| Prod'iteration_statement_statement_safe_'11
| Prod'iteration_statement_statement_safe_'10
| Prod'iteration_statement_statement_safe_'9
| Prod'iteration_statement_statement_safe_'8
| Prod'iteration_statement_statement_safe_'7
| Prod'iteration_statement_statement_safe_'6
| Prod'iteration_statement_statement_safe_'5
| Prod'iteration_statement_statement_safe_'4
| Prod'iteration_statement_statement_safe_'3
| Prod'iteration_statement_statement_safe_'2
| Prod'iteration_statement_statement_safe_'1
| Prod'iteration_statement_statement_safe_'0
| Prod'iteration_statement_statement_dangerous_'13
| Prod'iteration_statement_statement_dangerous_'12
| Prod'iteration_statement_statement_dangerous_'11
| Prod'iteration_statement_statement_dangerous_'10
| Prod'iteration_statement_statement_dangerous_'9
| Prod'iteration_statement_statement_dangerous_'8
| Prod'iteration_statement_statement_dangerous_'7
| Prod'iteration_statement_statement_dangerous_'6
| Prod'iteration_statement_statement_dangerous_'5
| Prod'iteration_statement_statement_dangerous_'4
| Prod'iteration_statement_statement_dangerous_'3
| Prod'iteration_statement_statement_dangerous_'2
| Prod'iteration_statement_statement_dangerous_'1
| Prod'iteration_statement_statement_dangerous_'0
| Prod'initializer_list'3
| Prod'initializer_list'2
| Prod'initializer_list'1
| Prod'initializer_list'0
| Prod'init_declarator_list'1
| Prod'init_declarator_list'0
| Prod'init_declarator'1
| Prod'init_declarator'0
| Prod'inclusive_OR_expression'1
| Prod'inclusive_OR_expression'0
| Prod'identifier_list'1
| Prod'identifier_list'0
| Prod'gcc_attribute_word'2
| Prod'gcc_attribute_word'1
| Prod'gcc_attribute_word'0
| Prod'gcc_attribute_list'1
| Prod'gcc_attribute_list'0
| Prod'gcc_attribute'3
| Prod'gcc_attribute'2
| Prod'gcc_attribute'1
| Prod'gcc_attribute'0
| Prod'function_specifier'1
| Prod'function_specifier'0
| Prod'function_definition'1
| Prod'function_definition'0
| Prod'external_declaration'2
| Prod'external_declaration'1
| Prod'external_declaration'0
| Prod'expression_statement'1
| Prod'expression_statement'0
| Prod'expression'1
| Prod'expression'0
| Prod'exclusive_OR_expression'1
| Prod'exclusive_OR_expression'0
| Prod'equality_expression'2
| Prod'equality_expression'1
| Prod'equality_expression'0
| Prod'enumerator_list'1
| Prod'enumerator_list'0
| Prod'enumerator'1
| Prod'enumerator'0
| Prod'enumeration_constant'0
| Prod'enum_specifier'4
| Prod'enum_specifier'3
| Prod'enum_specifier'2
| Prod'enum_specifier'1
| Prod'enum_specifier'0
| Prod'direct_declarator'8
| Prod'direct_declarator'7
| Prod'direct_declarator'6
| Prod'direct_declarator'5
| Prod'direct_declarator'4
| Prod'direct_declarator'3
| Prod'direct_declarator'2
| Prod'direct_declarator'1
| Prod'direct_declarator'0
| Prod'direct_abstract_declarator'12
| Prod'direct_abstract_declarator'11
| Prod'direct_abstract_declarator'10
| Prod'direct_abstract_declarator'9
| Prod'direct_abstract_declarator'8
| Prod'direct_abstract_declarator'7
| Prod'direct_abstract_declarator'6
| Prod'direct_abstract_declarator'5
| Prod'direct_abstract_declarator'4
| Prod'direct_abstract_declarator'3
| Prod'direct_abstract_declarator'2
| Prod'direct_abstract_declarator'1
| Prod'direct_abstract_declarator'0
| Prod'designator_list'1
| Prod'designator_list'0
| Prod'designator'1
| Prod'designator'0
| Prod'designation'0
| Prod'declarator_noattrend'1
| Prod'declarator_noattrend'0
| Prod'declarator'0
| Prod'declaration_specifiers_typespec_opt'4
| Prod'declaration_specifiers_typespec_opt'3
| Prod'declaration_specifiers_typespec_opt'2
| Prod'declaration_specifiers_typespec_opt'1
| Prod'declaration_specifiers_typespec_opt'0
| Prod'declaration_specifiers'4
| Prod'declaration_specifiers'3
| Prod'declaration_specifiers'2
| Prod'declaration_specifiers'1
| Prod'declaration_specifiers'0
| Prod'declaration_list'1
| Prod'declaration_list'0
| Prod'declaration'2
| Prod'declaration'1
| Prod'declaration'0
| Prod'constant_expression'0
| Prod'conditional_expression'1
| Prod'conditional_expression'0
| Prod'compound_statement'1
| Prod'compound_statement'0
| Prod'cast_expression'1
| Prod'cast_expression'0
| Prod'c_initializer'2
| Prod'c_initializer'1
| Prod'c_initializer'0
| Prod'block_item_list'1
| Prod'block_item_list'0
| Prod'block_item'2
| Prod'block_item'1
| Prod'block_item'0
| Prod'attribute_specifier_list'1
| Prod'attribute_specifier_list'0
| Prod'attribute_specifier'3
| Prod'attribute_specifier'2
| Prod'attribute_specifier'1
| Prod'attribute_specifier'0
| Prod'assignment_operator'10
| Prod'assignment_operator'9
| Prod'assignment_operator'8
| Prod'assignment_operator'7
| Prod'assignment_operator'6
| Prod'assignment_operator'5
| Prod'assignment_operator'4
| Prod'assignment_operator'3
| Prod'assignment_operator'2
| Prod'assignment_operator'1
| Prod'assignment_operator'0
| Prod'assignment_expression'1
| Prod'assignment_expression'0
| Prod'asm_statement'0
| Prod'asm_operands_ne'1
| Prod'asm_operands_ne'0
| Prod'asm_operands'1
| Prod'asm_operands'0
| Prod'asm_operand'0
| Prod'asm_op_name'1
| Prod'asm_op_name'0
| Prod'asm_flags'1
| Prod'asm_flags'0
| Prod'asm_attributes'2
| Prod'asm_attributes'1
| Prod'asm_attributes'0
| Prod'asm_arguments'3
| Prod'asm_arguments'2
| Prod'asm_arguments'1
| Prod'asm_arguments'0
| Prod'argument_expression_list'1
| Prod'argument_expression_list'0
| Prod'additive_expression'2
| Prod'additive_expression'1
| Prod'additive_expression'0
| Prod'abstract_declarator'2
| Prod'abstract_declarator'1
| Prod'abstract_declarator'0
| Prod'AND_expression'1
| Prod'AND_expression'0.
Definition production := production'.

Program Instance productionNum : MenhirLib.Alphabet.Numbered production :=
  { inj := fun x => match x return _ with
    | Prod'unary_operator'5 => 1%positive
    | Prod'unary_operator'4 => 2%positive
    | Prod'unary_operator'3 => 3%positive
    | Prod'unary_operator'2 => 4%positive
    | Prod'unary_operator'1 => 5%positive
    | Prod'unary_operator'0 => 6%positive
    | Prod'unary_expression'6 => 7%positive
    | Prod'unary_expression'5 => 8%positive
    | Prod'unary_expression'4 => 9%positive
    | Prod'unary_expression'3 => 10%positive
    | Prod'unary_expression'2 => 11%positive
    | Prod'unary_expression'1 => 12%positive
    | Prod'unary_expression'0 => 13%positive
    | Prod'type_specifier'12 => 14%positive
    | Prod'type_specifier'11 => 15%positive
    | Prod'type_specifier'10 => 16%positive
    | Prod'type_specifier'9 => 17%positive
    | Prod'type_specifier'8 => 18%positive
    | Prod'type_specifier'7 => 19%positive
    | Prod'type_specifier'6 => 20%positive
    | Prod'type_specifier'5 => 21%positive
    | Prod'type_specifier'4 => 22%positive
    | Prod'type_specifier'3 => 23%positive
    | Prod'type_specifier'2 => 24%positive
    | Prod'type_specifier'1 => 25%positive
    | Prod'type_specifier'0 => 26%positive
    | Prod'type_qualifier_noattr'2 => 27%positive
    | Prod'type_qualifier_noattr'1 => 28%positive
    | Prod'type_qualifier_noattr'0 => 29%positive
    | Prod'type_qualifier_list'1 => 30%positive
    | Prod'type_qualifier_list'0 => 31%positive
    | Prod'type_qualifier'1 => 32%positive
    | Prod'type_qualifier'0 => 33%positive
    | Prod'type_name'1 => 34%positive
    | Prod'type_name'0 => 35%positive
    | Prod'translation_unit_file'1 => 36%positive
    | Prod'translation_unit_file'0 => 37%positive
    | Prod'translation_unit'3 => 38%positive
    | Prod'translation_unit'2 => 39%positive
    | Prod'translation_unit'1 => 40%positive
    | Prod'translation_unit'0 => 41%positive
    | Prod'struct_or_union_specifier'2 => 42%positive
    | Prod'struct_or_union_specifier'1 => 43%positive
    | Prod'struct_or_union_specifier'0 => 44%positive
    | Prod'struct_or_union'1 => 45%positive
    | Prod'struct_or_union'0 => 46%positive
    | Prod'struct_declarator_list'1 => 47%positive
    | Prod'struct_declarator_list'0 => 48%positive
    | Prod'struct_declarator'2 => 49%positive
    | Prod'struct_declarator'1 => 50%positive
    | Prod'struct_declarator'0 => 51%positive
    | Prod'struct_declaration_list'1 => 52%positive
    | Prod'struct_declaration_list'0 => 53%positive
    | Prod'struct_declaration'2 => 54%positive
    | Prod'struct_declaration'1 => 55%positive
    | Prod'struct_declaration'0 => 56%positive
    | Prod'storage_class_specifier'4 => 57%positive
    | Prod'storage_class_specifier'3 => 58%positive
    | Prod'storage_class_specifier'2 => 59%positive
    | Prod'storage_class_specifier'1 => 60%positive
    | Prod'storage_class_specifier'0 => 61%positive
    | Prod'static_assert_declaration'0 => 62%positive
    | Prod'statement_safe'6 => 63%positive
    | Prod'statement_safe'5 => 64%positive
    | Prod'statement_safe'4 => 65%positive
    | Prod'statement_safe'3 => 66%positive
    | Prod'statement_safe'2 => 67%positive
    | Prod'statement_safe'1 => 68%positive
    | Prod'statement_safe'0 => 69%positive
    | Prod'statement_dangerous'6 => 70%positive
    | Prod'statement_dangerous'5 => 71%positive
    | Prod'statement_dangerous'4 => 72%positive
    | Prod'statement_dangerous'3 => 73%positive
    | Prod'statement_dangerous'2 => 74%positive
    | Prod'statement_dangerous'1 => 75%positive
    | Prod'statement_dangerous'0 => 76%positive
    | Prod'specifier_qualifier_list'3 => 77%positive
    | Prod'specifier_qualifier_list'2 => 78%positive
    | Prod'specifier_qualifier_list'1 => 79%positive
    | Prod'specifier_qualifier_list'0 => 80%positive
    | Prod'shift_expression'2 => 81%positive
    | Prod'shift_expression'1 => 82%positive
    | Prod'shift_expression'0 => 83%positive
    | Prod'selection_statement_safe'1 => 84%positive
    | Prod'selection_statement_safe'0 => 85%positive
    | Prod'selection_statement_dangerous'2 => 86%positive
    | Prod'selection_statement_dangerous'1 => 87%positive
    | Prod'selection_statement_dangerous'0 => 88%positive
    | Prod'relational_expression'4 => 89%positive
    | Prod'relational_expression'3 => 90%positive
    | Prod'relational_expression'2 => 91%positive
    | Prod'relational_expression'1 => 92%positive
    | Prod'relational_expression'0 => 93%positive
    | Prod'primary_expression'3 => 94%positive
    | Prod'primary_expression'2 => 95%positive
    | Prod'primary_expression'1 => 96%positive
    | Prod'primary_expression'0 => 97%positive
    | Prod'postfix_expression'12 => 98%positive
    | Prod'postfix_expression'11 => 99%positive
    | Prod'postfix_expression'10 => 100%positive
    | Prod'postfix_expression'9 => 101%positive
    | Prod'postfix_expression'8 => 102%positive
    | Prod'postfix_expression'7 => 103%positive
    | Prod'postfix_expression'6 => 104%positive
    | Prod'postfix_expression'5 => 105%positive
    | Prod'postfix_expression'4 => 106%positive
    | Prod'postfix_expression'3 => 107%positive
    | Prod'postfix_expression'2 => 108%positive
    | Prod'postfix_expression'1 => 109%positive
    | Prod'postfix_expression'0 => 110%positive
    | Prod'pointer'3 => 111%positive
    | Prod'pointer'2 => 112%positive
    | Prod'pointer'1 => 113%positive
    | Prod'pointer'0 => 114%positive
    | Prod'parameter_type_list'1 => 115%positive
    | Prod'parameter_type_list'0 => 116%positive
    | Prod'parameter_list'1 => 117%positive
    | Prod'parameter_list'0 => 118%positive
    | Prod'parameter_declaration'2 => 119%positive
    | Prod'parameter_declaration'1 => 120%positive
    | Prod'parameter_declaration'0 => 121%positive
    | Prod'multiplicative_expression'3 => 122%positive
    | Prod'multiplicative_expression'2 => 123%positive
    | Prod'multiplicative_expression'1 => 124%positive
    | Prod'multiplicative_expression'0 => 125%positive
    | Prod'logical_OR_expression'1 => 126%positive
    | Prod'logical_OR_expression'0 => 127%positive
    | Prod'logical_AND_expression'1 => 128%positive
    | Prod'logical_AND_expression'0 => 129%positive
    | Prod'labeled_statement_statement_safe_'2 => 130%positive
    | Prod'labeled_statement_statement_safe_'1 => 131%positive
    | Prod'labeled_statement_statement_safe_'0 => 132%positive
    | Prod'labeled_statement_statement_dangerous_'2 => 133%positive
    | Prod'labeled_statement_statement_dangerous_'1 => 134%positive
    | Prod'labeled_statement_statement_dangerous_'0 => 135%positive
    | Prod'jump_statement'4 => 136%positive
    | Prod'jump_statement'3 => 137%positive
    | Prod'jump_statement'2 => 138%positive
    | Prod'jump_statement'1 => 139%positive
    | Prod'jump_statement'0 => 140%positive
    | Prod'iteration_statement_statement_safe_'13 => 141%positive
    | Prod'iteration_statement_statement_safe_'12 => 142%positive
    | Prod'iteration_statement_statement_safe_'11 => 143%positive
    | Prod'iteration_statement_statement_safe_'10 => 144%positive
    | Prod'iteration_statement_statement_safe_'9 => 145%positive
    | Prod'iteration_statement_statement_safe_'8 => 146%positive
    | Prod'iteration_statement_statement_safe_'7 => 147%positive
    | Prod'iteration_statement_statement_safe_'6 => 148%positive
    | Prod'iteration_statement_statement_safe_'5 => 149%positive
    | Prod'iteration_statement_statement_safe_'4 => 150%positive
    | Prod'iteration_statement_statement_safe_'3 => 151%positive
    | Prod'iteration_statement_statement_safe_'2 => 152%positive
    | Prod'iteration_statement_statement_safe_'1 => 153%positive
    | Prod'iteration_statement_statement_safe_'0 => 154%positive
    | Prod'iteration_statement_statement_dangerous_'13 => 155%positive
    | Prod'iteration_statement_statement_dangerous_'12 => 156%positive
    | Prod'iteration_statement_statement_dangerous_'11 => 157%positive
    | Prod'iteration_statement_statement_dangerous_'10 => 158%positive
    | Prod'iteration_statement_statement_dangerous_'9 => 159%positive
    | Prod'iteration_statement_statement_dangerous_'8 => 160%positive
    | Prod'iteration_statement_statement_dangerous_'7 => 161%positive
    | Prod'iteration_statement_statement_dangerous_'6 => 162%positive
    | Prod'iteration_statement_statement_dangerous_'5 => 163%positive
    | Prod'iteration_statement_statement_dangerous_'4 => 164%positive
    | Prod'iteration_statement_statement_dangerous_'3 => 165%positive
    | Prod'iteration_statement_statement_dangerous_'2 => 166%positive
    | Prod'iteration_statement_statement_dangerous_'1 => 167%positive
    | Prod'iteration_statement_statement_dangerous_'0 => 168%positive
    | Prod'initializer_list'3 => 169%positive
    | Prod'initializer_list'2 => 170%positive
    | Prod'initializer_list'1 => 171%positive
    | Prod'initializer_list'0 => 172%positive
    | Prod'init_declarator_list'1 => 173%positive
    | Prod'init_declarator_list'0 => 174%positive
    | Prod'init_declarator'1 => 175%positive
    | Prod'init_declarator'0 => 176%positive
    | Prod'inclusive_OR_expression'1 => 177%positive
    | Prod'inclusive_OR_expression'0 => 178%positive
    | Prod'identifier_list'1 => 179%positive
    | Prod'identifier_list'0 => 180%positive
    | Prod'gcc_attribute_word'2 => 181%positive
    | Prod'gcc_attribute_word'1 => 182%positive
    | Prod'gcc_attribute_word'0 => 183%positive
    | Prod'gcc_attribute_list'1 => 184%positive
    | Prod'gcc_attribute_list'0 => 185%positive
    | Prod'gcc_attribute'3 => 186%positive
    | Prod'gcc_attribute'2 => 187%positive
    | Prod'gcc_attribute'1 => 188%positive
    | Prod'gcc_attribute'0 => 189%positive
    | Prod'function_specifier'1 => 190%positive
    | Prod'function_specifier'0 => 191%positive
    | Prod'function_definition'1 => 192%positive
    | Prod'function_definition'0 => 193%positive
    | Prod'external_declaration'2 => 194%positive
    | Prod'external_declaration'1 => 195%positive
    | Prod'external_declaration'0 => 196%positive
    | Prod'expression_statement'1 => 197%positive
    | Prod'expression_statement'0 => 198%positive
    | Prod'expression'1 => 199%positive
    | Prod'expression'0 => 200%positive
    | Prod'exclusive_OR_expression'1 => 201%positive
    | Prod'exclusive_OR_expression'0 => 202%positive
    | Prod'equality_expression'2 => 203%positive
    | Prod'equality_expression'1 => 204%positive
    | Prod'equality_expression'0 => 205%positive
    | Prod'enumerator_list'1 => 206%positive
    | Prod'enumerator_list'0 => 207%positive
    | Prod'enumerator'1 => 208%positive
    | Prod'enumerator'0 => 209%positive
    | Prod'enumeration_constant'0 => 210%positive
    | Prod'enum_specifier'4 => 211%positive
    | Prod'enum_specifier'3 => 212%positive
    | Prod'enum_specifier'2 => 213%positive
    | Prod'enum_specifier'1 => 214%positive
    | Prod'enum_specifier'0 => 215%positive
    | Prod'direct_declarator'8 => 216%positive
    | Prod'direct_declarator'7 => 217%positive
    | Prod'direct_declarator'6 => 218%positive
    | Prod'direct_declarator'5 => 219%positive
    | Prod'direct_declarator'4 => 220%positive
    | Prod'direct_declarator'3 => 221%positive
    | Prod'direct_declarator'2 => 222%positive
    | Prod'direct_declarator'1 => 223%positive
    | Prod'direct_declarator'0 => 224%positive
    | Prod'direct_abstract_declarator'12 => 225%positive
    | Prod'direct_abstract_declarator'11 => 226%positive
    | Prod'direct_abstract_declarator'10 => 227%positive
    | Prod'direct_abstract_declarator'9 => 228%positive
    | Prod'direct_abstract_declarator'8 => 229%positive
    | Prod'direct_abstract_declarator'7 => 230%positive
    | Prod'direct_abstract_declarator'6 => 231%positive
    | Prod'direct_abstract_declarator'5 => 232%positive
    | Prod'direct_abstract_declarator'4 => 233%positive
    | Prod'direct_abstract_declarator'3 => 234%positive
    | Prod'direct_abstract_declarator'2 => 235%positive
    | Prod'direct_abstract_declarator'1 => 236%positive
    | Prod'direct_abstract_declarator'0 => 237%positive
    | Prod'designator_list'1 => 238%positive
    | Prod'designator_list'0 => 239%positive
    | Prod'designator'1 => 240%positive
    | Prod'designator'0 => 241%positive
    | Prod'designation'0 => 242%positive
    | Prod'declarator_noattrend'1 => 243%positive
    | Prod'declarator_noattrend'0 => 244%positive
    | Prod'declarator'0 => 245%positive
    | Prod'declaration_specifiers_typespec_opt'4 => 246%positive
    | Prod'declaration_specifiers_typespec_opt'3 => 247%positive
    | Prod'declaration_specifiers_typespec_opt'2 => 248%positive
    | Prod'declaration_specifiers_typespec_opt'1 => 249%positive
    | Prod'declaration_specifiers_typespec_opt'0 => 250%positive
    | Prod'declaration_specifiers'4 => 251%positive
    | Prod'declaration_specifiers'3 => 252%positive
    | Prod'declaration_specifiers'2 => 253%positive
    | Prod'declaration_specifiers'1 => 254%positive
    | Prod'declaration_specifiers'0 => 255%positive
    | Prod'declaration_list'1 => 256%positive
    | Prod'declaration_list'0 => 257%positive
    | Prod'declaration'2 => 258%positive
    | Prod'declaration'1 => 259%positive
    | Prod'declaration'0 => 260%positive
    | Prod'constant_expression'0 => 261%positive
    | Prod'conditional_expression'1 => 262%positive
    | Prod'conditional_expression'0 => 263%positive
    | Prod'compound_statement'1 => 264%positive
    | Prod'compound_statement'0 => 265%positive
    | Prod'cast_expression'1 => 266%positive
    | Prod'cast_expression'0 => 267%positive
    | Prod'c_initializer'2 => 268%positive
    | Prod'c_initializer'1 => 269%positive
    | Prod'c_initializer'0 => 270%positive
    | Prod'block_item_list'1 => 271%positive
    | Prod'block_item_list'0 => 272%positive
    | Prod'block_item'2 => 273%positive
    | Prod'block_item'1 => 274%positive
    | Prod'block_item'0 => 275%positive
    | Prod'attribute_specifier_list'1 => 276%positive
    | Prod'attribute_specifier_list'0 => 277%positive
    | Prod'attribute_specifier'3 => 278%positive
    | Prod'attribute_specifier'2 => 279%positive
    | Prod'attribute_specifier'1 => 280%positive
    | Prod'attribute_specifier'0 => 281%positive
    | Prod'assignment_operator'10 => 282%positive
    | Prod'assignment_operator'9 => 283%positive
    | Prod'assignment_operator'8 => 284%positive
    | Prod'assignment_operator'7 => 285%positive
    | Prod'assignment_operator'6 => 286%positive
    | Prod'assignment_operator'5 => 287%positive
    | Prod'assignment_operator'4 => 288%positive
    | Prod'assignment_operator'3 => 289%positive
    | Prod'assignment_operator'2 => 290%positive
    | Prod'assignment_operator'1 => 291%positive
    | Prod'assignment_operator'0 => 292%positive
    | Prod'assignment_expression'1 => 293%positive
    | Prod'assignment_expression'0 => 294%positive
    | Prod'asm_statement'0 => 295%positive
    | Prod'asm_operands_ne'1 => 296%positive
    | Prod'asm_operands_ne'0 => 297%positive
    | Prod'asm_operands'1 => 298%positive
    | Prod'asm_operands'0 => 299%positive
    | Prod'asm_operand'0 => 300%positive
    | Prod'asm_op_name'1 => 301%positive
    | Prod'asm_op_name'0 => 302%positive
    | Prod'asm_flags'1 => 303%positive
    | Prod'asm_flags'0 => 304%positive
    | Prod'asm_attributes'2 => 305%positive
    | Prod'asm_attributes'1 => 306%positive
    | Prod'asm_attributes'0 => 307%positive
    | Prod'asm_arguments'3 => 308%positive
    | Prod'asm_arguments'2 => 309%positive
    | Prod'asm_arguments'1 => 310%positive
    | Prod'asm_arguments'0 => 311%positive
    | Prod'argument_expression_list'1 => 312%positive
    | Prod'argument_expression_list'0 => 313%positive
    | Prod'additive_expression'2 => 314%positive
    | Prod'additive_expression'1 => 315%positive
    | Prod'additive_expression'0 => 316%positive
    | Prod'abstract_declarator'2 => 317%positive
    | Prod'abstract_declarator'1 => 318%positive
    | Prod'abstract_declarator'0 => 319%positive
    | Prod'AND_expression'1 => 320%positive
    | Prod'AND_expression'0 => 321%positive
    end;
    surj := (fun n => match n return _ with
    | 1%positive => Prod'unary_operator'5
    | 2%positive => Prod'unary_operator'4
    | 3%positive => Prod'unary_operator'3
    | 4%positive => Prod'unary_operator'2
    | 5%positive => Prod'unary_operator'1
    | 6%positive => Prod'unary_operator'0
    | 7%positive => Prod'unary_expression'6
    | 8%positive => Prod'unary_expression'5
    | 9%positive => Prod'unary_expression'4
    | 10%positive => Prod'unary_expression'3
    | 11%positive => Prod'unary_expression'2
    | 12%positive => Prod'unary_expression'1
    | 13%positive => Prod'unary_expression'0
    | 14%positive => Prod'type_specifier'12
    | 15%positive => Prod'type_specifier'11
    | 16%positive => Prod'type_specifier'10
    | 17%positive => Prod'type_specifier'9
    | 18%positive => Prod'type_specifier'8
    | 19%positive => Prod'type_specifier'7
    | 20%positive => Prod'type_specifier'6
    | 21%positive => Prod'type_specifier'5
    | 22%positive => Prod'type_specifier'4
    | 23%positive => Prod'type_specifier'3
    | 24%positive => Prod'type_specifier'2
    | 25%positive => Prod'type_specifier'1
    | 26%positive => Prod'type_specifier'0
    | 27%positive => Prod'type_qualifier_noattr'2
    | 28%positive => Prod'type_qualifier_noattr'1
    | 29%positive => Prod'type_qualifier_noattr'0
    | 30%positive => Prod'type_qualifier_list'1
    | 31%positive => Prod'type_qualifier_list'0
    | 32%positive => Prod'type_qualifier'1
    | 33%positive => Prod'type_qualifier'0
    | 34%positive => Prod'type_name'1
    | 35%positive => Prod'type_name'0
    | 36%positive => Prod'translation_unit_file'1
    | 37%positive => Prod'translation_unit_file'0
    | 38%positive => Prod'translation_unit'3
    | 39%positive => Prod'translation_unit'2
    | 40%positive => Prod'translation_unit'1
    | 41%positive => Prod'translation_unit'0
    | 42%positive => Prod'struct_or_union_specifier'2
    | 43%positive => Prod'struct_or_union_specifier'1
    | 44%positive => Prod'struct_or_union_specifier'0
    | 45%positive => Prod'struct_or_union'1
    | 46%positive => Prod'struct_or_union'0
    | 47%positive => Prod'struct_declarator_list'1
    | 48%positive => Prod'struct_declarator_list'0
    | 49%positive => Prod'struct_declarator'2
    | 50%positive => Prod'struct_declarator'1
    | 51%positive => Prod'struct_declarator'0
    | 52%positive => Prod'struct_declaration_list'1
    | 53%positive => Prod'struct_declaration_list'0
    | 54%positive => Prod'struct_declaration'2
    | 55%positive => Prod'struct_declaration'1
    | 56%positive => Prod'struct_declaration'0
    | 57%positive => Prod'storage_class_specifier'4
    | 58%positive => Prod'storage_class_specifier'3
    | 59%positive => Prod'storage_class_specifier'2
    | 60%positive => Prod'storage_class_specifier'1
    | 61%positive => Prod'storage_class_specifier'0
    | 62%positive => Prod'static_assert_declaration'0
    | 63%positive => Prod'statement_safe'6
    | 64%positive => Prod'statement_safe'5
    | 65%positive => Prod'statement_safe'4
    | 66%positive => Prod'statement_safe'3
    | 67%positive => Prod'statement_safe'2
    | 68%positive => Prod'statement_safe'1
    | 69%positive => Prod'statement_safe'0
    | 70%positive => Prod'statement_dangerous'6
    | 71%positive => Prod'statement_dangerous'5
    | 72%positive => Prod'statement_dangerous'4
    | 73%positive => Prod'statement_dangerous'3
    | 74%positive => Prod'statement_dangerous'2
    | 75%positive => Prod'statement_dangerous'1
    | 76%positive => Prod'statement_dangerous'0
    | 77%positive => Prod'specifier_qualifier_list'3
    | 78%positive => Prod'specifier_qualifier_list'2
    | 79%positive => Prod'specifier_qualifier_list'1
    | 80%positive => Prod'specifier_qualifier_list'0
    | 81%positive => Prod'shift_expression'2
    | 82%positive => Prod'shift_expression'1
    | 83%positive => Prod'shift_expression'0
    | 84%positive => Prod'selection_statement_safe'1
    | 85%positive => Prod'selection_statement_safe'0
    | 86%positive => Prod'selection_statement_dangerous'2
    | 87%positive => Prod'selection_statement_dangerous'1
    | 88%positive => Prod'selection_statement_dangerous'0
    | 89%positive => Prod'relational_expression'4
    | 90%positive => Prod'relational_expression'3
    | 91%positive => Prod'relational_expression'2
    | 92%positive => Prod'relational_expression'1
    | 93%positive => Prod'relational_expression'0
    | 94%positive => Prod'primary_expression'3
    | 95%positive => Prod'primary_expression'2
    | 96%positive => Prod'primary_expression'1
    | 97%positive => Prod'primary_expression'0
    | 98%positive => Prod'postfix_expression'12
    | 99%positive => Prod'postfix_expression'11
    | 100%positive => Prod'postfix_expression'10
    | 101%positive => Prod'postfix_expression'9
    | 102%positive => Prod'postfix_expression'8
    | 103%positive => Prod'postfix_expression'7
    | 104%positive => Prod'postfix_expression'6
    | 105%positive => Prod'postfix_expression'5
    | 106%positive => Prod'postfix_expression'4
    | 107%positive => Prod'postfix_expression'3
    | 108%positive => Prod'postfix_expression'2
    | 109%positive => Prod'postfix_expression'1
    | 110%positive => Prod'postfix_expression'0
    | 111%positive => Prod'pointer'3
    | 112%positive => Prod'pointer'2
    | 113%positive => Prod'pointer'1
    | 114%positive => Prod'pointer'0
    | 115%positive => Prod'parameter_type_list'1
    | 116%positive => Prod'parameter_type_list'0
    | 117%positive => Prod'parameter_list'1
    | 118%positive => Prod'parameter_list'0
    | 119%positive => Prod'parameter_declaration'2
    | 120%positive => Prod'parameter_declaration'1
    | 121%positive => Prod'parameter_declaration'0
    | 122%positive => Prod'multiplicative_expression'3
    | 123%positive => Prod'multiplicative_expression'2
    | 124%positive => Prod'multiplicative_expression'1
    | 125%positive => Prod'multiplicative_expression'0
    | 126%positive => Prod'logical_OR_expression'1
    | 127%positive => Prod'logical_OR_expression'0
    | 128%positive => Prod'logical_AND_expression'1
    | 129%positive => Prod'logical_AND_expression'0
    | 130%positive => Prod'labeled_statement_statement_safe_'2
    | 131%positive => Prod'labeled_statement_statement_safe_'1
    | 132%positive => Prod'labeled_statement_statement_safe_'0
    | 133%positive => Prod'labeled_statement_statement_dangerous_'2
    | 134%positive => Prod'labeled_statement_statement_dangerous_'1
    | 135%positive => Prod'labeled_statement_statement_dangerous_'0
    | 136%positive => Prod'jump_statement'4
    | 137%positive => Prod'jump_statement'3
    | 138%positive => Prod'jump_statement'2
    | 139%positive => Prod'jump_statement'1
    | 140%positive => Prod'jump_statement'0
    | 141%positive => Prod'iteration_statement_statement_safe_'13
    | 142%positive => Prod'iteration_statement_statement_safe_'12
    | 143%positive => Prod'iteration_statement_statement_safe_'11
    | 144%positive => Prod'iteration_statement_statement_safe_'10
    | 145%positive => Prod'iteration_statement_statement_safe_'9
    | 146%positive => Prod'iteration_statement_statement_safe_'8
    | 147%positive => Prod'iteration_statement_statement_safe_'7
    | 148%positive => Prod'iteration_statement_statement_safe_'6
    | 149%positive => Prod'iteration_statement_statement_safe_'5
    | 150%positive => Prod'iteration_statement_statement_safe_'4
    | 151%positive => Prod'iteration_statement_statement_safe_'3
    | 152%positive => Prod'iteration_statement_statement_safe_'2
    | 153%positive => Prod'iteration_statement_statement_safe_'1
    | 154%positive => Prod'iteration_statement_statement_safe_'0
    | 155%positive => Prod'iteration_statement_statement_dangerous_'13
    | 156%positive => Prod'iteration_statement_statement_dangerous_'12
    | 157%positive => Prod'iteration_statement_statement_dangerous_'11
    | 158%positive => Prod'iteration_statement_statement_dangerous_'10
    | 159%positive => Prod'iteration_statement_statement_dangerous_'9
    | 160%positive => Prod'iteration_statement_statement_dangerous_'8
    | 161%positive => Prod'iteration_statement_statement_dangerous_'7
    | 162%positive => Prod'iteration_statement_statement_dangerous_'6
    | 163%positive => Prod'iteration_statement_statement_dangerous_'5
    | 164%positive => Prod'iteration_statement_statement_dangerous_'4
    | 165%positive => Prod'iteration_statement_statement_dangerous_'3
    | 166%positive => Prod'iteration_statement_statement_dangerous_'2
    | 167%positive => Prod'iteration_statement_statement_dangerous_'1
    | 168%positive => Prod'iteration_statement_statement_dangerous_'0
    | 169%positive => Prod'initializer_list'3
    | 170%positive => Prod'initializer_list'2
    | 171%positive => Prod'initializer_list'1
    | 172%positive => Prod'initializer_list'0
    | 173%positive => Prod'init_declarator_list'1
    | 174%positive => Prod'init_declarator_list'0
    | 175%positive => Prod'init_declarator'1
    | 176%positive => Prod'init_declarator'0
    | 177%positive => Prod'inclusive_OR_expression'1
    | 178%positive => Prod'inclusive_OR_expression'0
    | 179%positive => Prod'identifier_list'1
    | 180%positive => Prod'identifier_list'0
    | 181%positive => Prod'gcc_attribute_word'2
    | 182%positive => Prod'gcc_attribute_word'1
    | 183%positive => Prod'gcc_attribute_word'0
    | 184%positive => Prod'gcc_attribute_list'1
    | 185%positive => Prod'gcc_attribute_list'0
    | 186%positive => Prod'gcc_attribute'3
    | 187%positive => Prod'gcc_attribute'2
    | 188%positive => Prod'gcc_attribute'1
    | 189%positive => Prod'gcc_attribute'0
    | 190%positive => Prod'function_specifier'1
    | 191%positive => Prod'function_specifier'0
    | 192%positive => Prod'function_definition'1
    | 193%positive => Prod'function_definition'0
    | 194%positive => Prod'external_declaration'2
    | 195%positive => Prod'external_declaration'1
    | 196%positive => Prod'external_declaration'0
    | 197%positive => Prod'expression_statement'1
    | 198%positive => Prod'expression_statement'0
    | 199%positive => Prod'expression'1
    | 200%positive => Prod'expression'0
    | 201%positive => Prod'exclusive_OR_expression'1
    | 202%positive => Prod'exclusive_OR_expression'0
    | 203%positive => Prod'equality_expression'2
    | 204%positive => Prod'equality_expression'1
    | 205%positive => Prod'equality_expression'0
    | 206%positive => Prod'enumerator_list'1
    | 207%positive => Prod'enumerator_list'0
    | 208%positive => Prod'enumerator'1
    | 209%positive => Prod'enumerator'0
    | 210%positive => Prod'enumeration_constant'0
    | 211%positive => Prod'enum_specifier'4
    | 212%positive => Prod'enum_specifier'3
    | 213%positive => Prod'enum_specifier'2
    | 214%positive => Prod'enum_specifier'1
    | 215%positive => Prod'enum_specifier'0
    | 216%positive => Prod'direct_declarator'8
    | 217%positive => Prod'direct_declarator'7
    | 218%positive => Prod'direct_declarator'6
    | 219%positive => Prod'direct_declarator'5
    | 220%positive => Prod'direct_declarator'4
    | 221%positive => Prod'direct_declarator'3
    | 222%positive => Prod'direct_declarator'2
    | 223%positive => Prod'direct_declarator'1
    | 224%positive => Prod'direct_declarator'0
    | 225%positive => Prod'direct_abstract_declarator'12
    | 226%positive => Prod'direct_abstract_declarator'11
    | 227%positive => Prod'direct_abstract_declarator'10
    | 228%positive => Prod'direct_abstract_declarator'9
    | 229%positive => Prod'direct_abstract_declarator'8
    | 230%positive => Prod'direct_abstract_declarator'7
    | 231%positive => Prod'direct_abstract_declarator'6
    | 232%positive => Prod'direct_abstract_declarator'5
    | 233%positive => Prod'direct_abstract_declarator'4
    | 234%positive => Prod'direct_abstract_declarator'3
    | 235%positive => Prod'direct_abstract_declarator'2
    | 236%positive => Prod'direct_abstract_declarator'1
    | 237%positive => Prod'direct_abstract_declarator'0
    | 238%positive => Prod'designator_list'1
    | 239%positive => Prod'designator_list'0
    | 240%positive => Prod'designator'1
    | 241%positive => Prod'designator'0
    | 242%positive => Prod'designation'0
    | 243%positive => Prod'declarator_noattrend'1
    | 244%positive => Prod'declarator_noattrend'0
    | 245%positive => Prod'declarator'0
    | 246%positive => Prod'declaration_specifiers_typespec_opt'4
    | 247%positive => Prod'declaration_specifiers_typespec_opt'3
    | 248%positive => Prod'declaration_specifiers_typespec_opt'2
    | 249%positive => Prod'declaration_specifiers_typespec_opt'1
    | 250%positive => Prod'declaration_specifiers_typespec_opt'0
    | 251%positive => Prod'declaration_specifiers'4
    | 252%positive => Prod'declaration_specifiers'3
    | 253%positive => Prod'declaration_specifiers'2
    | 254%positive => Prod'declaration_specifiers'1
    | 255%positive => Prod'declaration_specifiers'0
    | 256%positive => Prod'declaration_list'1
    | 257%positive => Prod'declaration_list'0
    | 258%positive => Prod'declaration'2
    | 259%positive => Prod'declaration'1
    | 260%positive => Prod'declaration'0
    | 261%positive => Prod'constant_expression'0
    | 262%positive => Prod'conditional_expression'1
    | 263%positive => Prod'conditional_expression'0
    | 264%positive => Prod'compound_statement'1
    | 265%positive => Prod'compound_statement'0
    | 266%positive => Prod'cast_expression'1
    | 267%positive => Prod'cast_expression'0
    | 268%positive => Prod'c_initializer'2
    | 269%positive => Prod'c_initializer'1
    | 270%positive => Prod'c_initializer'0
    | 271%positive => Prod'block_item_list'1
    | 272%positive => Prod'block_item_list'0
    | 273%positive => Prod'block_item'2
    | 274%positive => Prod'block_item'1
    | 275%positive => Prod'block_item'0
    | 276%positive => Prod'attribute_specifier_list'1
    | 277%positive => Prod'attribute_specifier_list'0
    | 278%positive => Prod'attribute_specifier'3
    | 279%positive => Prod'attribute_specifier'2
    | 280%positive => Prod'attribute_specifier'1
    | 281%positive => Prod'attribute_specifier'0
    | 282%positive => Prod'assignment_operator'10
    | 283%positive => Prod'assignment_operator'9
    | 284%positive => Prod'assignment_operator'8
    | 285%positive => Prod'assignment_operator'7
    | 286%positive => Prod'assignment_operator'6
    | 287%positive => Prod'assignment_operator'5
    | 288%positive => Prod'assignment_operator'4
    | 289%positive => Prod'assignment_operator'3
    | 290%positive => Prod'assignment_operator'2
    | 291%positive => Prod'assignment_operator'1
    | 292%positive => Prod'assignment_operator'0
    | 293%positive => Prod'assignment_expression'1
    | 294%positive => Prod'assignment_expression'0
    | 295%positive => Prod'asm_statement'0
    | 296%positive => Prod'asm_operands_ne'1
    | 297%positive => Prod'asm_operands_ne'0
    | 298%positive => Prod'asm_operands'1
    | 299%positive => Prod'asm_operands'0
    | 300%positive => Prod'asm_operand'0
    | 301%positive => Prod'asm_op_name'1
    | 302%positive => Prod'asm_op_name'0
    | 303%positive => Prod'asm_flags'1
    | 304%positive => Prod'asm_flags'0
    | 305%positive => Prod'asm_attributes'2
    | 306%positive => Prod'asm_attributes'1
    | 307%positive => Prod'asm_attributes'0
    | 308%positive => Prod'asm_arguments'3
    | 309%positive => Prod'asm_arguments'2
    | 310%positive => Prod'asm_arguments'1
    | 311%positive => Prod'asm_arguments'0
    | 312%positive => Prod'argument_expression_list'1
    | 313%positive => Prod'argument_expression_list'0
    | 314%positive => Prod'additive_expression'2
    | 315%positive => Prod'additive_expression'1
    | 316%positive => Prod'additive_expression'0
    | 317%positive => Prod'abstract_declarator'2
    | 318%positive => Prod'abstract_declarator'1
    | 319%positive => Prod'abstract_declarator'0
    | 320%positive => Prod'AND_expression'1
    | 321%positive => Prod'AND_expression'0
    | _ => Prod'unary_operator'5
    end)%Z;
    inj_bound := 321%positive }.
Instance ProductionAlph : MenhirLib.Alphabet.Alphabet production := _.

Definition prod_contents (p:production) :
  { p:nonterminal * list symbol &
    MenhirLib.Grammar.arrows_right
      (symbol_semantic_type (NT (fst p)))
      (List.map symbol_semantic_type (snd p)) }
 :=
  let box := existT (fun p =>
    MenhirLib.Grammar.arrows_right
      (symbol_semantic_type (NT (fst p)))
      (List.map symbol_semantic_type (snd p)) )
  in
  match p with
  | Prod'AND_expression'0 => box
    (AND_expression'nt, [NT equality_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'AND_expression'1 => box
    (AND_expression'nt, [NT equality_expression'nt; T AND't; NT AND_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.BAND (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'abstract_declarator'0 => box
    (abstract_declarator'nt, [NT pointer'nt]%list)
    (fun pt =>
    ( (fst pt) Cabs.JUSTBASE )
)
  | Prod'abstract_declarator'1 => box
    (abstract_declarator'nt, [NT direct_abstract_declarator'nt; NT pointer'nt]%list)
    (fun typ pt =>
    ( (fst pt) typ )
)
  | Prod'abstract_declarator'2 => box
    (abstract_declarator'nt, [NT direct_abstract_declarator'nt]%list)
    (fun typ =>
    ( typ )
)
  | Prod'additive_expression'0 => box
    (additive_expression'nt, [NT multiplicative_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'additive_expression'1 => box
    (additive_expression'nt, [NT multiplicative_expression'nt; T PLUS't; NT additive_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.ADD (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'additive_expression'2 => box
    (additive_expression'nt, [NT multiplicative_expression'nt; T MINUS't; NT additive_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.SUB (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'argument_expression_list'0 => box
    (argument_expression_list'nt, [NT assignment_expression'nt]%list)
    (fun expr =>
    ( [fst expr] )
)
  | Prod'argument_expression_list'1 => box
    (argument_expression_list'nt, [NT assignment_expression'nt; T COMMA't; NT argument_expression_list'nt]%list)
    (fun exprt _2 exprq =>
    ( fst exprt::exprq )
)
  | Prod'asm_arguments'0 => box
    (asm_arguments'nt, []%list)
    (
     ( ([], [], []) )
)
  | Prod'asm_arguments'1 => box
    (asm_arguments'nt, [NT asm_operands'nt; T COLON't]%list)
    (fun o _1 =>
     ( (o, [], []) )
)
  | Prod'asm_arguments'2 => box
    (asm_arguments'nt, [NT asm_operands'nt; T COLON't; NT asm_operands'nt; T COLON't]%list)
    (fun i _3 o _1 =>
     ( (o, i, []) )
)
  | Prod'asm_arguments'3 => box
    (asm_arguments'nt, [NT asm_flags'nt; T COLON't; NT asm_operands'nt; T COLON't; NT asm_operands'nt; T COLON't]%list)
    (fun f _5 i _3 o _1 =>
     ( (o, i, f) )
)
  | Prod'asm_attributes'0 => box
    (asm_attributes'nt, []%list)
    (
     ( [] )
)
  | Prod'asm_attributes'1 => box
    (asm_attributes'nt, [NT asm_attributes'nt; T CONST't]%list)
    (fun attr _1 =>
     ( Cabs.CV_CONST :: attr )
)
  | Prod'asm_attributes'2 => box
    (asm_attributes'nt, [NT asm_attributes'nt; T VOLATILE't]%list)
    (fun attr _1 =>
     ( Cabs.CV_VOLATILE :: attr )
)
  | Prod'asm_flags'0 => box
    (asm_flags'nt, [T STRING_LITERAL't]%list)
    (fun f =>
    ( let '(wide, s, loc) := f in (wide, s) :: nil )
)
  | Prod'asm_flags'1 => box
    (asm_flags'nt, [NT asm_flags'nt; T COMMA't; T STRING_LITERAL't]%list)
    (fun fl _2 f =>
    ( let '(wide, s, loc) := f in (wide, s) :: fl )
)
  | Prod'asm_op_name'0 => box
    (asm_op_name'nt, []%list)
    (
                                      ( None )
)
  | Prod'asm_op_name'1 => box
    (asm_op_name'nt, [T RBRACK't; T OTHER_NAME't; T LBRACK't]%list)
    (fun _3 n _1 =>
                                      ( Some (fst n) )
)
  | Prod'asm_operand'0 => box
    (asm_operand'nt, [T RPAREN't; NT expression'nt; T LPAREN't; T STRING_LITERAL't; NT asm_op_name'nt]%list)
    (fun _5 e _3 cstr n =>
    ( let '(wide, s, loc) := cstr in Cabs.ASMOPERAND n wide s (fst e) )
)
  | Prod'asm_operands'0 => box
    (asm_operands'nt, []%list)
    (
                                                ( [] )
)
  | Prod'asm_operands'1 => box
    (asm_operands'nt, [NT asm_operands_ne'nt]%list)
    (fun ol =>
                                                ( rev' ol )
)
  | Prod'asm_operands_ne'0 => box
    (asm_operands_ne'nt, [NT asm_operand'nt; T COMMA't; NT asm_operands_ne'nt]%list)
    (fun o _2 ol =>
                                                ( o :: ol )
)
  | Prod'asm_operands_ne'1 => box
    (asm_operands_ne'nt, [NT asm_operand'nt]%list)
    (fun o =>
                                                ( [o] )
)
  | Prod'asm_statement'0 => box
    (asm_statement'nt, [T SEMICOLON't; T RPAREN't; NT asm_arguments'nt; T STRING_LITERAL't; T LPAREN't; NT asm_attributes'nt; T ASM't]%list)
    (fun _7 _6 args template _3 attr loc =>
    ( let '(wide, chars, _) := template in
      let '(outputs, inputs, flags) := args in
      Cabs.ASM attr wide chars outputs inputs flags loc )
)
  | Prod'assignment_expression'0 => box
    (assignment_expression'nt, [NT conditional_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'assignment_expression'1 => box
    (assignment_expression'nt, [NT assignment_expression'nt; NT assignment_operator'nt; NT unary_expression'nt]%list)
    (fun expr2 op expr1 =>
    ( (Cabs.BINARY op (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'assignment_operator'0 => box
    (assignment_operator'nt, [T EQ't]%list)
    (fun _1 =>
    ( Cabs.ASSIGN  )
)
  | Prod'assignment_operator'1 => box
    (assignment_operator'nt, [T MUL_ASSIGN't]%list)
    (fun _1 =>
    ( Cabs.MUL_ASSIGN )
)
  | Prod'assignment_operator'2 => box
    (assignment_operator'nt, [T DIV_ASSIGN't]%list)
    (fun _1 =>
    ( Cabs.DIV_ASSIGN )
)
  | Prod'assignment_operator'3 => box
    (assignment_operator'nt, [T MOD_ASSIGN't]%list)
    (fun _1 =>
    ( Cabs.MOD_ASSIGN )
)
  | Prod'assignment_operator'4 => box
    (assignment_operator'nt, [T ADD_ASSIGN't]%list)
    (fun _1 =>
    ( Cabs.ADD_ASSIGN )
)
  | Prod'assignment_operator'5 => box
    (assignment_operator'nt, [T SUB_ASSIGN't]%list)
    (fun _1 =>
    ( Cabs.SUB_ASSIGN )
)
  | Prod'assignment_operator'6 => box
    (assignment_operator'nt, [T LEFT_ASSIGN't]%list)
    (fun _1 =>
    ( Cabs.SHL_ASSIGN )
)
  | Prod'assignment_operator'7 => box
    (assignment_operator'nt, [T RIGHT_ASSIGN't]%list)
    (fun _1 =>
    ( Cabs.SHR_ASSIGN )
)
  | Prod'assignment_operator'8 => box
    (assignment_operator'nt, [T XOR_ASSIGN't]%list)
    (fun _1 =>
    ( Cabs.XOR_ASSIGN )
)
  | Prod'assignment_operator'9 => box
    (assignment_operator'nt, [T OR_ASSIGN't]%list)
    (fun _1 =>
    ( Cabs.BOR_ASSIGN )
)
  | Prod'assignment_operator'10 => box
    (assignment_operator'nt, [T AND_ASSIGN't]%list)
    (fun _1 =>
    ( Cabs.BAND_ASSIGN )
)
  | Prod'attribute_specifier'0 => box
    (attribute_specifier'nt, [T RPAREN't; T RPAREN't; NT gcc_attribute_list'nt; T LPAREN't; T LPAREN't; T ATTRIBUTE't]%list)
    (fun _6 _5 attr _3 _2 loc =>
    ( (Cabs.GCC_ATTR (rev' attr) loc, loc) )
)
  | Prod'attribute_specifier'1 => box
    (attribute_specifier'nt, [T RPAREN't; NT argument_expression_list'nt; T LPAREN't; T PACKED't]%list)
    (fun _4 args _2 loc =>
    ( (Cabs.PACKED_ATTR (rev' args) loc, loc) )
)
  | Prod'attribute_specifier'2 => box
    (attribute_specifier'nt, [T RPAREN't; NT argument_expression_list'nt; T LPAREN't; T ALIGNAS't]%list)
    (fun _4 args _2 loc =>
    ( (Cabs.ALIGNAS_ATTR (rev' args) loc, loc) )
)
  | Prod'attribute_specifier'3 => box
    (attribute_specifier'nt, [T RPAREN't; NT type_name'nt; T LPAREN't; T ALIGNAS't]%list)
    (fun _4 typ _2 loc =>
    ( (Cabs.ALIGNAS_ATTR [Cabs.ALIGNOF typ] loc, loc) )
)
  | Prod'attribute_specifier_list'0 => box
    (attribute_specifier_list'nt, []%list)
    (
    ( [] )
)
  | Prod'attribute_specifier_list'1 => box
    (attribute_specifier_list'nt, [NT attribute_specifier_list'nt; NT attribute_specifier'nt]%list)
    (fun attrs attr =>
   ( fst attr :: attrs )
)
  | Prod'block_item'0 => box
    (block_item'nt, [NT declaration'nt]%list)
    (fun decl =>
    ( Cabs.DEFINITION decl )
)
  | Prod'block_item'1 => box
    (block_item'nt, [NT statement_dangerous'nt]%list)
    (fun stmt =>
    ( stmt )
)
  | Prod'block_item'2 => box
    (block_item'nt, [T PRAGMA't]%list)
    (fun p =>
    ( Cabs.DEFINITION (Cabs.PRAGMA (fst p) (snd p)) )
)
  | Prod'block_item_list'0 => box
    (block_item_list'nt, [NT block_item'nt]%list)
    (fun stmt =>
    ( [stmt] )
)
  | Prod'block_item_list'1 => box
    (block_item_list'nt, [NT block_item'nt; NT block_item_list'nt]%list)
    (fun stmtt stmtq =>
    ( stmtt::stmtq )
)
  | Prod'c_initializer'0 => box
    (c_initializer'nt, [NT assignment_expression'nt]%list)
    (fun expr =>
    ( Cabs.SINGLE_INIT (fst expr) )
)
  | Prod'c_initializer'1 => box
    (c_initializer'nt, [T RBRACE't; NT initializer_list'nt; T LBRACE't]%list)
    (fun _3 init _1 =>
    ( Cabs.COMPOUND_INIT (rev' init) )
)
  | Prod'c_initializer'2 => box
    (c_initializer'nt, [T RBRACE't; T COMMA't; NT initializer_list'nt; T LBRACE't]%list)
    (fun _4 _3 init _1 =>
    ( Cabs.COMPOUND_INIT (rev' init) )
)
  | Prod'cast_expression'0 => box
    (cast_expression'nt, [NT unary_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'cast_expression'1 => box
    (cast_expression'nt, [NT cast_expression'nt; T RPAREN't; NT type_name'nt; T LPAREN't]%list)
    (fun expr _3 typ loc =>
    ( (Cabs.CAST typ (Cabs.SINGLE_INIT (fst expr)), loc) )
)
  | Prod'compound_statement'0 => box
    (compound_statement'nt, [T RBRACE't; NT block_item_list'nt; T LBRACE't]%list)
    (fun _3 lst loc =>
    ( Cabs.BLOCK (rev' lst) loc )
)
  | Prod'compound_statement'1 => box
    (compound_statement'nt, [T RBRACE't; T LBRACE't]%list)
    (fun _2 loc =>
    ( Cabs.BLOCK [] loc )
)
  | Prod'conditional_expression'0 => box
    (conditional_expression'nt, [NT logical_OR_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'conditional_expression'1 => box
    (conditional_expression'nt, [NT conditional_expression'nt; T COLON't; NT expression'nt; T QUESTION't; NT logical_OR_expression'nt]%list)
    (fun expr3 _4 expr2 _2 expr1 =>
    ( (Cabs.QUESTION (fst expr1) (fst expr2) (fst expr3), snd expr1) )
)
  | Prod'constant_expression'0 => box
    (constant_expression'nt, [NT conditional_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'declaration'0 => box
    (declaration'nt, [T SEMICOLON't; NT init_declarator_list'nt; NT declaration_specifiers'nt]%list)
    (fun _3 decls decspec =>
    ( Cabs.DECDEF (fst decspec, rev' decls) (snd decspec) )
)
  | Prod'declaration'1 => box
    (declaration'nt, [T SEMICOLON't; NT declaration_specifiers'nt]%list)
    (fun _2 decspec =>
    ( Cabs.DECDEF (fst decspec, []) (snd decspec) )
)
  | Prod'declaration'2 => box
    (declaration'nt, [NT static_assert_declaration'nt]%list)
    (fun asrt =>
    ( let '((e, loc_e), (s, loc_s), loc) := asrt in
      Cabs.STATIC_ASSERT e loc_e s loc_s loc )
)
  | Prod'declaration_list'0 => box
    (declaration_list'nt, [NT declaration'nt]%list)
    (fun d =>
    ( [d] )
)
  | Prod'declaration_list'1 => box
    (declaration_list'nt, [NT declaration'nt; NT declaration_list'nt]%list)
    (fun d dl =>
    ( d :: dl )
)
  | Prod'declaration_specifiers'0 => box
    (declaration_specifiers'nt, [NT declaration_specifiers'nt; NT storage_class_specifier'nt]%list)
    (fun rest storage =>
    ( (Cabs.SpecStorage (fst storage)::fst rest, snd storage) )
)
  | Prod'declaration_specifiers'1 => box
    (declaration_specifiers'nt, [NT declaration_specifiers_typespec_opt'nt; NT type_specifier'nt]%list)
    (fun rest typ =>
    ( (Cabs.SpecType (fst typ)::rest, snd typ) )
)
  | Prod'declaration_specifiers'2 => box
    (declaration_specifiers'nt, [NT declaration_specifiers'nt; NT type_qualifier_noattr'nt]%list)
    (fun rest qual =>
    ( (Cabs.SpecCV (fst qual)::fst rest, snd qual) )
)
  | Prod'declaration_specifiers'3 => box
    (declaration_specifiers'nt, [NT declaration_specifiers'nt; NT attribute_specifier'nt]%list)
    (fun rest attr =>
    ( (Cabs.SpecCV (Cabs.CV_ATTR (fst attr))::fst rest, snd attr) )
)
  | Prod'declaration_specifiers'4 => box
    (declaration_specifiers'nt, [NT declaration_specifiers'nt; NT function_specifier'nt]%list)
    (fun rest func =>
    ( (Cabs.SpecFunction (fst func)::fst rest, snd func) )
)
  | Prod'declaration_specifiers_typespec_opt'0 => box
    (declaration_specifiers_typespec_opt'nt, [NT declaration_specifiers_typespec_opt'nt; NT storage_class_specifier'nt]%list)
    (fun rest storage =>
    ( Cabs.SpecStorage (fst storage)::rest )
)
  | Prod'declaration_specifiers_typespec_opt'1 => box
    (declaration_specifiers_typespec_opt'nt, [NT declaration_specifiers_typespec_opt'nt; NT type_specifier'nt]%list)
    (fun rest typ =>
    ( Cabs.SpecType (fst typ)::rest )
)
  | Prod'declaration_specifiers_typespec_opt'2 => box
    (declaration_specifiers_typespec_opt'nt, [NT declaration_specifiers_typespec_opt'nt; NT type_qualifier'nt]%list)
    (fun rest qual =>
    ( Cabs.SpecCV (fst qual)::rest )
)
  | Prod'declaration_specifiers_typespec_opt'3 => box
    (declaration_specifiers_typespec_opt'nt, [NT declaration_specifiers_typespec_opt'nt; NT function_specifier'nt]%list)
    (fun rest func =>
    ( Cabs.SpecFunction (fst func)::rest )
)
  | Prod'declaration_specifiers_typespec_opt'4 => box
    (declaration_specifiers_typespec_opt'nt, []%list)
    (
    ( [] )
)
  | Prod'declarator'0 => box
    (declarator'nt, [NT attribute_specifier_list'nt; NT declarator_noattrend'nt]%list)
    (fun attrs decl =>
    ( let 'Cabs.Name name typ attr loc := decl in
      Cabs.Name name typ (List.app attr attrs) loc )
)
  | Prod'declarator_noattrend'0 => box
    (declarator_noattrend'nt, [NT direct_declarator'nt]%list)
    (fun decl =>
    ( decl )
)
  | Prod'declarator_noattrend'1 => box
    (declarator_noattrend'nt, [NT direct_declarator'nt; NT pointer'nt]%list)
    (fun decl pt =>
    ( let 'Cabs.Name name typ attr _ := decl in
      Cabs.Name name ((fst pt) typ) attr (snd pt) )
)
  | Prod'designation'0 => box
    (designation'nt, [T EQ't; NT designator_list'nt]%list)
    (fun _2 design =>
    ( rev' design )
)
  | Prod'designator'0 => box
    (designator'nt, [T RBRACK't; NT constant_expression'nt; T LBRACK't]%list)
    (fun _3 expr _1 =>
    ( Cabs.ATINDEX_INIT (fst expr) )
)
  | Prod'designator'1 => box
    (designator'nt, [T OTHER_NAME't; T DOT't]%list)
    (fun id _1 =>
    ( Cabs.INFIELD_INIT (fst id) )
)
  | Prod'designator_list'0 => box
    (designator_list'nt, [NT designator'nt]%list)
    (fun design =>
    ( [design] )
)
  | Prod'designator_list'1 => box
    (designator_list'nt, [NT designator'nt; NT designator_list'nt]%list)
    (fun designt designq =>
    ( designt::designq )
)
  | Prod'direct_abstract_declarator'0 => box
    (direct_abstract_declarator'nt, [T RPAREN't; NT abstract_declarator'nt; T LPAREN't]%list)
    (fun _3 typ _1 =>
    ( typ )
)
  | Prod'direct_abstract_declarator'1 => box
    (direct_abstract_declarator'nt, [T RBRACK't; NT assignment_expression'nt; NT type_qualifier_list'nt; T LBRACK't; NT direct_abstract_declarator'nt]%list)
    (fun _5 expr cvspec _2 typ =>
    ( Cabs.ARRAY typ cvspec (Some (fst expr)) )
)
  | Prod'direct_abstract_declarator'2 => box
    (direct_abstract_declarator'nt, [T RBRACK't; NT assignment_expression'nt; NT type_qualifier_list'nt; T LBRACK't]%list)
    (fun _4 expr cvspec _1 =>
    ( Cabs.ARRAY Cabs.JUSTBASE cvspec (Some (fst expr)) )
)
  | Prod'direct_abstract_declarator'3 => box
    (direct_abstract_declarator'nt, [T RBRACK't; NT assignment_expression'nt; T LBRACK't; NT direct_abstract_declarator'nt]%list)
    (fun _4 expr _2 typ =>
    ( Cabs.ARRAY typ [] (Some (fst expr)) )
)
  | Prod'direct_abstract_declarator'4 => box
    (direct_abstract_declarator'nt, [T RBRACK't; NT assignment_expression'nt; T LBRACK't]%list)
    (fun _3 expr _1 =>
    ( Cabs.ARRAY Cabs.JUSTBASE [] (Some (fst expr)) )
)
  | Prod'direct_abstract_declarator'5 => box
    (direct_abstract_declarator'nt, [T RBRACK't; NT type_qualifier_list'nt; T LBRACK't; NT direct_abstract_declarator'nt]%list)
    (fun _4 cvspec _2 typ =>
    ( Cabs.ARRAY typ cvspec None )
)
  | Prod'direct_abstract_declarator'6 => box
    (direct_abstract_declarator'nt, [T RBRACK't; NT type_qualifier_list'nt; T LBRACK't]%list)
    (fun _3 cvspec _1 =>
    ( Cabs.ARRAY Cabs.JUSTBASE cvspec None )
)
  | Prod'direct_abstract_declarator'7 => box
    (direct_abstract_declarator'nt, [T RBRACK't; T LBRACK't; NT direct_abstract_declarator'nt]%list)
    (fun _3 _2 typ =>
    ( Cabs.ARRAY typ [] None )
)
  | Prod'direct_abstract_declarator'8 => box
    (direct_abstract_declarator'nt, [T RBRACK't; T LBRACK't]%list)
    (fun _2 _1 =>
    ( Cabs.ARRAY Cabs.JUSTBASE [] None )
)
  | Prod'direct_abstract_declarator'9 => box
    (direct_abstract_declarator'nt, [T RPAREN't; NT parameter_type_list'nt; T LPAREN't; NT direct_abstract_declarator'nt]%list)
    (fun _4 params _2 typ =>
    ( Cabs.PROTO typ params )
)
  | Prod'direct_abstract_declarator'10 => box
    (direct_abstract_declarator'nt, [T RPAREN't; NT parameter_type_list'nt; T LPAREN't]%list)
    (fun _3 params _1 =>
    ( Cabs.PROTO Cabs.JUSTBASE params )
)
  | Prod'direct_abstract_declarator'11 => box
    (direct_abstract_declarator'nt, [T RPAREN't; T LPAREN't; NT direct_abstract_declarator'nt]%list)
    (fun _3 _2 typ =>
    ( Cabs.PROTO typ ([], false) )
)
  | Prod'direct_abstract_declarator'12 => box
    (direct_abstract_declarator'nt, [T RPAREN't; T LPAREN't]%list)
    (fun _2 _1 =>
    ( Cabs.PROTO Cabs.JUSTBASE ([], false) )
)
  | Prod'direct_declarator'0 => box
    (direct_declarator'nt, [T VAR_NAME't]%list)
    (fun id =>
    ( Cabs.Name (fst id) Cabs.JUSTBASE [] (snd id) )
)
  | Prod'direct_declarator'1 => box
    (direct_declarator'nt, [T RPAREN't; NT declarator'nt; T LPAREN't]%list)
    (fun _3 decl _1 =>
    ( decl )
)
  | Prod'direct_declarator'2 => box
    (direct_declarator'nt, [T RBRACK't; NT assignment_expression'nt; NT type_qualifier_list'nt; T LBRACK't; NT direct_declarator'nt]%list)
    (fun _5 expr quallst _2 decl =>
    ( let 'Cabs.Name name typ attr loc := decl in
      Cabs.Name name (Cabs.ARRAY typ (rev' quallst) (Some (fst expr))) attr loc )
)
  | Prod'direct_declarator'3 => box
    (direct_declarator'nt, [T RBRACK't; NT assignment_expression'nt; T LBRACK't; NT direct_declarator'nt]%list)
    (fun _4 expr _2 decl =>
    ( let 'Cabs.Name name typ attr loc := decl in
      Cabs.Name name (Cabs.ARRAY typ [] (Some (fst expr))) attr loc )
)
  | Prod'direct_declarator'4 => box
    (direct_declarator'nt, [T RBRACK't; NT type_qualifier_list'nt; T LBRACK't; NT direct_declarator'nt]%list)
    (fun _4 quallst _2 decl =>
    ( let 'Cabs.Name name typ attr loc := decl in
      Cabs.Name name (Cabs.ARRAY typ (rev' quallst) None) attr loc )
)
  | Prod'direct_declarator'5 => box
    (direct_declarator'nt, [T RBRACK't; T LBRACK't; NT direct_declarator'nt]%list)
    (fun _3 _2 decl =>
    ( let 'Cabs.Name name typ attr loc := decl in
      Cabs.Name name (Cabs.ARRAY typ [] None) attr loc )
)
  | Prod'direct_declarator'6 => box
    (direct_declarator'nt, [T RPAREN't; NT parameter_type_list'nt; T LPAREN't; NT direct_declarator'nt]%list)
    (fun _4 params _2 decl =>
    ( let 'Cabs.Name name typ attr loc := decl in
      Cabs.Name name (Cabs.PROTO typ params) attr loc )
)
  | Prod'direct_declarator'7 => box
    (direct_declarator'nt, [T RPAREN't; T LPAREN't; NT direct_declarator'nt]%list)
    (fun _3 _2 decl =>
    ( let 'Cabs.Name name typ attr loc := decl in
      Cabs.Name name (Cabs.PROTO_OLD typ []) attr loc )
)
  | Prod'direct_declarator'8 => box
    (direct_declarator'nt, [T RPAREN't; NT identifier_list'nt; T LPAREN't; NT direct_declarator'nt]%list)
    (fun _4 params _2 decl =>
    ( let 'Cabs.Name name typ attr loc := decl in
      Cabs.Name name (Cabs.PROTO_OLD typ (rev' params)) attr loc )
)
  | Prod'enum_specifier'0 => box
    (enum_specifier'nt, [T RBRACE't; NT enumerator_list'nt; T LBRACE't; T OTHER_NAME't; NT attribute_specifier_list'nt; T ENUM't]%list)
    (fun _6 enum_list _4 name attrs loc =>
    ( (Cabs.Tenum (Some (fst name)) (Some (rev' enum_list)) attrs, loc) )
)
  | Prod'enum_specifier'1 => box
    (enum_specifier'nt, [T RBRACE't; NT enumerator_list'nt; T LBRACE't; NT attribute_specifier_list'nt; T ENUM't]%list)
    (fun _5 enum_list _3 attrs loc =>
    ( (Cabs.Tenum None (Some (rev' enum_list)) attrs, loc) )
)
  | Prod'enum_specifier'2 => box
    (enum_specifier'nt, [T RBRACE't; T COMMA't; NT enumerator_list'nt; T LBRACE't; T OTHER_NAME't; NT attribute_specifier_list'nt; T ENUM't]%list)
    (fun _7 _6 enum_list _4 name attrs loc =>
    ( (Cabs.Tenum (Some (fst name)) (Some (rev' enum_list)) attrs, loc) )
)
  | Prod'enum_specifier'3 => box
    (enum_specifier'nt, [T RBRACE't; T COMMA't; NT enumerator_list'nt; T LBRACE't; NT attribute_specifier_list'nt; T ENUM't]%list)
    (fun _6 _5 enum_list _3 attrs loc =>
    ( (Cabs.Tenum None (Some (rev' enum_list)) attrs, loc) )
)
  | Prod'enum_specifier'4 => box
    (enum_specifier'nt, [T OTHER_NAME't; NT attribute_specifier_list'nt; T ENUM't]%list)
    (fun name attrs loc =>
    ( (Cabs.Tenum (Some (fst name)) None attrs, loc) )
)
  | Prod'enumeration_constant'0 => box
    (enumeration_constant'nt, [T VAR_NAME't]%list)
    (fun cst =>
    ( cst )
)
  | Prod'enumerator'0 => box
    (enumerator'nt, [NT enumeration_constant'nt]%list)
    (fun cst =>
    ( (fst cst, None, snd cst) )
)
  | Prod'enumerator'1 => box
    (enumerator'nt, [NT constant_expression'nt; T EQ't; NT enumeration_constant'nt]%list)
    (fun expr _2 cst =>
    ( (fst cst, Some (fst expr), snd cst) )
)
  | Prod'enumerator_list'0 => box
    (enumerator_list'nt, [NT enumerator'nt]%list)
    (fun enum =>
    ( [enum] )
)
  | Prod'enumerator_list'1 => box
    (enumerator_list'nt, [NT enumerator'nt; T COMMA't; NT enumerator_list'nt]%list)
    (fun enumst _2 enumsq =>
    ( enumst::enumsq )
)
  | Prod'equality_expression'0 => box
    (equality_expression'nt, [NT relational_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'equality_expression'1 => box
    (equality_expression'nt, [NT relational_expression'nt; T EQEQ't; NT equality_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.EQ (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'equality_expression'2 => box
    (equality_expression'nt, [NT relational_expression'nt; T NEQ't; NT equality_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.NE (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'exclusive_OR_expression'0 => box
    (exclusive_OR_expression'nt, [NT AND_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'exclusive_OR_expression'1 => box
    (exclusive_OR_expression'nt, [NT AND_expression'nt; T HAT't; NT exclusive_OR_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.XOR (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'expression'0 => box
    (expression'nt, [NT assignment_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'expression'1 => box
    (expression'nt, [NT assignment_expression'nt; T COMMA't; NT expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.COMMA (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'expression_statement'0 => box
    (expression_statement'nt, [T SEMICOLON't; NT expression'nt]%list)
    (fun _2 expr =>
    ( Cabs.COMPUTATION (fst expr) (snd expr) )
)
  | Prod'expression_statement'1 => box
    (expression_statement'nt, [T SEMICOLON't]%list)
    (fun loc =>
    ( Cabs.NOP loc )
)
  | Prod'external_declaration'0 => box
    (external_declaration'nt, [NT function_definition'nt]%list)
    (fun def =>
    ( def )
)
  | Prod'external_declaration'1 => box
    (external_declaration'nt, [NT declaration'nt]%list)
    (fun def =>
    ( def )
)
  | Prod'external_declaration'2 => box
    (external_declaration'nt, [T PRAGMA't]%list)
    (fun p =>
    ( Cabs.PRAGMA (fst p) (snd p) )
)
  | Prod'function_definition'0 => box
    (function_definition'nt, [NT compound_statement'nt; NT declaration_list'nt; NT declarator_noattrend'nt; NT declaration_specifiers'nt]%list)
    (fun stmt dlist decl specs =>
   ( Cabs.FUNDEF (fst specs) decl (List.rev' dlist) stmt (snd specs) )
)
  | Prod'function_definition'1 => box
    (function_definition'nt, [NT compound_statement'nt; NT declarator'nt; NT declaration_specifiers'nt]%list)
    (fun stmt decl specs =>
    ( Cabs.FUNDEF (fst specs) decl [] stmt (snd specs) )
)
  | Prod'function_specifier'0 => box
    (function_specifier'nt, [T INLINE't]%list)
    (fun loc =>
   ( (Cabs.INLINE, loc) )
)
  | Prod'function_specifier'1 => box
    (function_specifier'nt, [T NORETURN't]%list)
    (fun loc =>
  ( (Cabs.NORETURN, loc))
)
  | Prod'gcc_attribute'0 => box
    (gcc_attribute'nt, []%list)
    (
    ( Cabs.GCC_ATTR_EMPTY )
)
  | Prod'gcc_attribute'1 => box
    (gcc_attribute'nt, [NT gcc_attribute_word'nt]%list)
    (fun w =>
    ( Cabs.GCC_ATTR_NOARGS w )
)
  | Prod'gcc_attribute'2 => box
    (gcc_attribute'nt, [T RPAREN't; T LPAREN't; NT gcc_attribute_word'nt]%list)
    (fun _3 _2 w =>
    ( Cabs.GCC_ATTR_ARGS w [] )
)
  | Prod'gcc_attribute'3 => box
    (gcc_attribute'nt, [T RPAREN't; NT argument_expression_list'nt; T LPAREN't; NT gcc_attribute_word'nt]%list)
    (fun _4 args _2 w =>
    ( Cabs.GCC_ATTR_ARGS w (rev' args) )
)
  | Prod'gcc_attribute_list'0 => box
    (gcc_attribute_list'nt, [NT gcc_attribute'nt]%list)
    (fun a =>
    ( [a] )
)
  | Prod'gcc_attribute_list'1 => box
    (gcc_attribute_list'nt, [NT gcc_attribute'nt; T COMMA't; NT gcc_attribute_list'nt]%list)
    (fun t _2 q =>
    ( t::q )
)
  | Prod'gcc_attribute_word'0 => box
    (gcc_attribute_word'nt, [T OTHER_NAME't]%list)
    (fun i =>
    ( Cabs.GCC_ATTR_IDENT (fst i) )
)
  | Prod'gcc_attribute_word'1 => box
    (gcc_attribute_word'nt, [T CONST't]%list)
    (fun _1 =>
    ( Cabs.GCC_ATTR_CONST )
)
  | Prod'gcc_attribute_word'2 => box
    (gcc_attribute_word'nt, [T PACKED't]%list)
    (fun _1 =>
    ( Cabs.GCC_ATTR_PACKED )
)
  | Prod'identifier_list'0 => box
    (identifier_list'nt, [T VAR_NAME't]%list)
    (fun id =>
    ( [fst id] )
)
  | Prod'identifier_list'1 => box
    (identifier_list'nt, [T VAR_NAME't; T COMMA't; NT identifier_list'nt]%list)
    (fun id _2 idl =>
    ( fst id :: idl )
)
  | Prod'inclusive_OR_expression'0 => box
    (inclusive_OR_expression'nt, [NT exclusive_OR_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'inclusive_OR_expression'1 => box
    (inclusive_OR_expression'nt, [NT exclusive_OR_expression'nt; T BAR't; NT inclusive_OR_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.BOR (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'init_declarator'0 => box
    (init_declarator'nt, [NT declarator'nt]%list)
    (fun name =>
    ( Cabs.Init_name name Cabs.NO_INIT )
)
  | Prod'init_declarator'1 => box
    (init_declarator'nt, [NT c_initializer'nt; T EQ't; NT declarator'nt]%list)
    (fun init _2 name =>
    ( Cabs.Init_name name init )
)
  | Prod'init_declarator_list'0 => box
    (init_declarator_list'nt, [NT init_declarator'nt]%list)
    (fun init =>
    ( [init] )
)
  | Prod'init_declarator_list'1 => box
    (init_declarator_list'nt, [NT init_declarator'nt; T COMMA't; NT init_declarator_list'nt]%list)
    (fun initt _2 initq =>
    ( initt::initq )
)
  | Prod'initializer_list'0 => box
    (initializer_list'nt, [NT c_initializer'nt; NT designation'nt]%list)
    (fun init design =>
    ( [(design, init)] )
)
  | Prod'initializer_list'1 => box
    (initializer_list'nt, [NT c_initializer'nt]%list)
    (fun init =>
    ( [([], init)] )
)
  | Prod'initializer_list'2 => box
    (initializer_list'nt, [NT c_initializer'nt; NT designation'nt; T COMMA't; NT initializer_list'nt]%list)
    (fun init design _2 initq =>
    ( (design, init)::initq )
)
  | Prod'initializer_list'3 => box
    (initializer_list'nt, [NT c_initializer'nt; T COMMA't; NT initializer_list'nt]%list)
    (fun init _2 initq =>
    ( ([], init)::initq )
)
  | Prod'iteration_statement_statement_dangerous_'0 => box
    (iteration_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T RPAREN't; NT expression'nt; T LPAREN't; T WHILE't]%list)
    (fun stmt _4 expr _2 loc =>
    ( Cabs.WHILE (fst expr) stmt loc )
)
  | Prod'iteration_statement_statement_dangerous_'1 => box
    (iteration_statement_statement_dangerous_'nt, [T SEMICOLON't; T RPAREN't; NT expression'nt; T LPAREN't; T WHILE't; NT statement_dangerous'nt; T DO't]%list)
    (fun _7 _6 expr _4 _3 stmt loc =>
    ( Cabs.DOWHILE (fst expr) stmt loc )
)
  | Prod'iteration_statement_statement_dangerous_'2 => box
    (iteration_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T RPAREN't; NT expression'nt; T SEMICOLON't; NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _8 expr3 _6 expr2 _4 expr1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_EXP (fst expr1))) (Some (fst expr2)) (Some (fst expr3)) stmt loc )
)
  | Prod'iteration_statement_statement_dangerous_'3 => box
    (iteration_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T RPAREN't; NT expression'nt; T SEMICOLON't; NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _7 expr3 _5 expr2 decl1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_DECL decl1)) (Some (fst expr2)) (Some (fst expr3)) stmt loc )
)
  | Prod'iteration_statement_statement_dangerous_'4 => box
    (iteration_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T RPAREN't; NT expression'nt; T SEMICOLON't; NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list)
    (fun stmt _7 expr3 _5 expr2 _3 _2 loc =>
    ( Cabs.FOR None (Some (fst expr2)) (Some (fst expr3)) stmt loc )
)
  | Prod'iteration_statement_statement_dangerous_'5 => box
    (iteration_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T RPAREN't; NT expression'nt; T SEMICOLON't; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _7 expr3 _5 _4 expr1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_EXP (fst expr1))) None (Some (fst expr3)) stmt loc )
)
  | Prod'iteration_statement_statement_dangerous_'6 => box
    (iteration_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T RPAREN't; NT expression'nt; T SEMICOLON't; NT declaration'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _6 expr3 _4 decl1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_DECL decl1)) None (Some (fst expr3)) stmt loc )
)
  | Prod'iteration_statement_statement_dangerous_'7 => box
    (iteration_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T RPAREN't; NT expression'nt; T SEMICOLON't; T SEMICOLON't; T LPAREN't; T FOR't]%list)
    (fun stmt _6 expr3 _4 _3 _2 loc =>
    ( Cabs.FOR None None (Some (fst expr3)) stmt loc )
)
  | Prod'iteration_statement_statement_dangerous_'8 => box
    (iteration_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T RPAREN't; T SEMICOLON't; NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _7 _6 expr2 _4 expr1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_EXP (fst expr1))) (Some (fst expr2)) None stmt loc )
)
  | Prod'iteration_statement_statement_dangerous_'9 => box
    (iteration_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T RPAREN't; T SEMICOLON't; NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _6 _5 expr2 decl1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_DECL decl1)) (Some (fst expr2)) None stmt loc )
)
  | Prod'iteration_statement_statement_dangerous_'10 => box
    (iteration_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T RPAREN't; T SEMICOLON't; NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list)
    (fun stmt _6 _5 expr2 _3 _2 loc =>
    ( Cabs.FOR None (Some (fst expr2)) None stmt loc )
)
  | Prod'iteration_statement_statement_dangerous_'11 => box
    (iteration_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T RPAREN't; T SEMICOLON't; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _6 _5 _4 expr1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_EXP (fst expr1))) None None stmt loc )
)
  | Prod'iteration_statement_statement_dangerous_'12 => box
    (iteration_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T RPAREN't; T SEMICOLON't; NT declaration'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _5 _4 decl1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_DECL decl1)) None None stmt loc )
)
  | Prod'iteration_statement_statement_dangerous_'13 => box
    (iteration_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T RPAREN't; T SEMICOLON't; T SEMICOLON't; T LPAREN't; T FOR't]%list)
    (fun stmt _5 _4 _3 _2 loc =>
    ( Cabs.FOR None None None stmt loc )
)
  | Prod'iteration_statement_statement_safe_'0 => box
    (iteration_statement_statement_safe_'nt, [NT statement_safe'nt; T RPAREN't; NT expression'nt; T LPAREN't; T WHILE't]%list)
    (fun stmt _4 expr _2 loc =>
    ( Cabs.WHILE (fst expr) stmt loc )
)
  | Prod'iteration_statement_statement_safe_'1 => box
    (iteration_statement_statement_safe_'nt, [T SEMICOLON't; T RPAREN't; NT expression'nt; T LPAREN't; T WHILE't; NT statement_dangerous'nt; T DO't]%list)
    (fun _7 _6 expr _4 _3 stmt loc =>
    ( Cabs.DOWHILE (fst expr) stmt loc )
)
  | Prod'iteration_statement_statement_safe_'2 => box
    (iteration_statement_statement_safe_'nt, [NT statement_safe'nt; T RPAREN't; NT expression'nt; T SEMICOLON't; NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _8 expr3 _6 expr2 _4 expr1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_EXP (fst expr1))) (Some (fst expr2)) (Some (fst expr3)) stmt loc )
)
  | Prod'iteration_statement_statement_safe_'3 => box
    (iteration_statement_statement_safe_'nt, [NT statement_safe'nt; T RPAREN't; NT expression'nt; T SEMICOLON't; NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _7 expr3 _5 expr2 decl1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_DECL decl1)) (Some (fst expr2)) (Some (fst expr3)) stmt loc )
)
  | Prod'iteration_statement_statement_safe_'4 => box
    (iteration_statement_statement_safe_'nt, [NT statement_safe'nt; T RPAREN't; NT expression'nt; T SEMICOLON't; NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list)
    (fun stmt _7 expr3 _5 expr2 _3 _2 loc =>
    ( Cabs.FOR None (Some (fst expr2)) (Some (fst expr3)) stmt loc )
)
  | Prod'iteration_statement_statement_safe_'5 => box
    (iteration_statement_statement_safe_'nt, [NT statement_safe'nt; T RPAREN't; NT expression'nt; T SEMICOLON't; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _7 expr3 _5 _4 expr1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_EXP (fst expr1))) None (Some (fst expr3)) stmt loc )
)
  | Prod'iteration_statement_statement_safe_'6 => box
    (iteration_statement_statement_safe_'nt, [NT statement_safe'nt; T RPAREN't; NT expression'nt; T SEMICOLON't; NT declaration'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _6 expr3 _4 decl1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_DECL decl1)) None (Some (fst expr3)) stmt loc )
)
  | Prod'iteration_statement_statement_safe_'7 => box
    (iteration_statement_statement_safe_'nt, [NT statement_safe'nt; T RPAREN't; NT expression'nt; T SEMICOLON't; T SEMICOLON't; T LPAREN't; T FOR't]%list)
    (fun stmt _6 expr3 _4 _3 _2 loc =>
    ( Cabs.FOR None None (Some (fst expr3)) stmt loc )
)
  | Prod'iteration_statement_statement_safe_'8 => box
    (iteration_statement_statement_safe_'nt, [NT statement_safe'nt; T RPAREN't; T SEMICOLON't; NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _7 _6 expr2 _4 expr1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_EXP (fst expr1))) (Some (fst expr2)) None stmt loc )
)
  | Prod'iteration_statement_statement_safe_'9 => box
    (iteration_statement_statement_safe_'nt, [NT statement_safe'nt; T RPAREN't; T SEMICOLON't; NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _6 _5 expr2 decl1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_DECL decl1)) (Some (fst expr2)) None stmt loc )
)
  | Prod'iteration_statement_statement_safe_'10 => box
    (iteration_statement_statement_safe_'nt, [NT statement_safe'nt; T RPAREN't; T SEMICOLON't; NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list)
    (fun stmt _6 _5 expr2 _3 _2 loc =>
    ( Cabs.FOR None (Some (fst expr2)) None stmt loc )
)
  | Prod'iteration_statement_statement_safe_'11 => box
    (iteration_statement_statement_safe_'nt, [NT statement_safe'nt; T RPAREN't; T SEMICOLON't; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _6 _5 _4 expr1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_EXP (fst expr1))) None None stmt loc )
)
  | Prod'iteration_statement_statement_safe_'12 => box
    (iteration_statement_statement_safe_'nt, [NT statement_safe'nt; T RPAREN't; T SEMICOLON't; NT declaration'nt; T LPAREN't; T FOR't]%list)
    (fun stmt _5 _4 decl1 _2 loc =>
    ( Cabs.FOR (Some (Cabs.FC_DECL decl1)) None None stmt loc )
)
  | Prod'iteration_statement_statement_safe_'13 => box
    (iteration_statement_statement_safe_'nt, [NT statement_safe'nt; T RPAREN't; T SEMICOLON't; T SEMICOLON't; T LPAREN't; T FOR't]%list)
    (fun stmt _5 _4 _3 _2 loc =>
    ( Cabs.FOR None None None stmt loc )
)
  | Prod'jump_statement'0 => box
    (jump_statement'nt, [T SEMICOLON't; T OTHER_NAME't; T GOTO't]%list)
    (fun _3 id loc =>
    ( Cabs.GOTO (fst id) loc )
)
  | Prod'jump_statement'1 => box
    (jump_statement'nt, [T SEMICOLON't; T CONTINUE't]%list)
    (fun _2 loc =>
    ( Cabs.CONTINUE loc )
)
  | Prod'jump_statement'2 => box
    (jump_statement'nt, [T SEMICOLON't; T BREAK't]%list)
    (fun _2 loc =>
    ( Cabs.BREAK loc )
)
  | Prod'jump_statement'3 => box
    (jump_statement'nt, [T SEMICOLON't; NT expression'nt; T RETURN't]%list)
    (fun _3 expr loc =>
    ( Cabs.RETURN (Some (fst expr)) loc )
)
  | Prod'jump_statement'4 => box
    (jump_statement'nt, [T SEMICOLON't; T RETURN't]%list)
    (fun _2 loc =>
    ( Cabs.RETURN None loc )
)
  | Prod'labeled_statement_statement_dangerous_'0 => box
    (labeled_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T COLON't; T OTHER_NAME't]%list)
    (fun stmt _2 lbl =>
    ( Cabs.LABEL (fst lbl) stmt (snd lbl) )
)
  | Prod'labeled_statement_statement_dangerous_'1 => box
    (labeled_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T COLON't; NT constant_expression'nt; T CASE't]%list)
    (fun stmt _3 expr loc =>
    ( Cabs.CASE (fst expr) stmt loc )
)
  | Prod'labeled_statement_statement_dangerous_'2 => box
    (labeled_statement_statement_dangerous_'nt, [NT statement_dangerous'nt; T COLON't; T DEFAULT't]%list)
    (fun stmt _2 loc =>
    ( Cabs.DEFAULT stmt loc )
)
  | Prod'labeled_statement_statement_safe_'0 => box
    (labeled_statement_statement_safe_'nt, [NT statement_safe'nt; T COLON't; T OTHER_NAME't]%list)
    (fun stmt _2 lbl =>
    ( Cabs.LABEL (fst lbl) stmt (snd lbl) )
)
  | Prod'labeled_statement_statement_safe_'1 => box
    (labeled_statement_statement_safe_'nt, [NT statement_safe'nt; T COLON't; NT constant_expression'nt; T CASE't]%list)
    (fun stmt _3 expr loc =>
    ( Cabs.CASE (fst expr) stmt loc )
)
  | Prod'labeled_statement_statement_safe_'2 => box
    (labeled_statement_statement_safe_'nt, [NT statement_safe'nt; T COLON't; T DEFAULT't]%list)
    (fun stmt _2 loc =>
    ( Cabs.DEFAULT stmt loc )
)
  | Prod'logical_AND_expression'0 => box
    (logical_AND_expression'nt, [NT inclusive_OR_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'logical_AND_expression'1 => box
    (logical_AND_expression'nt, [NT inclusive_OR_expression'nt; T ANDAND't; NT logical_AND_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.AND (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'logical_OR_expression'0 => box
    (logical_OR_expression'nt, [NT logical_AND_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'logical_OR_expression'1 => box
    (logical_OR_expression'nt, [NT logical_AND_expression'nt; T BARBAR't; NT logical_OR_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.OR (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'multiplicative_expression'0 => box
    (multiplicative_expression'nt, [NT cast_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'multiplicative_expression'1 => box
    (multiplicative_expression'nt, [NT cast_expression'nt; T STAR't; NT multiplicative_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.MUL (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'multiplicative_expression'2 => box
    (multiplicative_expression'nt, [NT cast_expression'nt; T SLASH't; NT multiplicative_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.DIV (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'multiplicative_expression'3 => box
    (multiplicative_expression'nt, [NT cast_expression'nt; T PERCENT't; NT multiplicative_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.MOD (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'parameter_declaration'0 => box
    (parameter_declaration'nt, [NT declarator'nt; NT declaration_specifiers'nt]%list)
    (fun decl specs =>
    ( match decl with Cabs.Name name typ attr _ =>
        Cabs.PARAM (fst specs) (Some name) typ attr (snd specs) end )
)
  | Prod'parameter_declaration'1 => box
    (parameter_declaration'nt, [NT abstract_declarator'nt; NT declaration_specifiers'nt]%list)
    (fun decl specs =>
    ( Cabs.PARAM (fst specs) None decl [] (snd specs) )
)
  | Prod'parameter_declaration'2 => box
    (parameter_declaration'nt, [NT declaration_specifiers'nt]%list)
    (fun specs =>
    ( Cabs.PARAM (fst specs) None Cabs.JUSTBASE [] (snd specs) )
)
  | Prod'parameter_list'0 => box
    (parameter_list'nt, [NT parameter_declaration'nt]%list)
    (fun param =>
    ( [param] )
)
  | Prod'parameter_list'1 => box
    (parameter_list'nt, [NT parameter_declaration'nt; T COMMA't; NT parameter_list'nt]%list)
    (fun paramt _2 paramq =>
    ( paramt::paramq )
)
  | Prod'parameter_type_list'0 => box
    (parameter_type_list'nt, [NT parameter_list'nt]%list)
    (fun lst =>
    ( (rev' lst, false) )
)
  | Prod'parameter_type_list'1 => box
    (parameter_type_list'nt, [T ELLIPSIS't; T COMMA't; NT parameter_list'nt]%list)
    (fun _3 _2 lst =>
    ( (rev' lst, true) )
)
  | Prod'pointer'0 => box
    (pointer'nt, [T STAR't]%list)
    (fun loc =>
    ( (fun typ => Cabs.PTR [] typ, loc) )
)
  | Prod'pointer'1 => box
    (pointer'nt, [NT type_qualifier_list'nt; T STAR't]%list)
    (fun quallst loc =>
    ( (fun typ => Cabs.PTR (rev' quallst) typ, loc) )
)
  | Prod'pointer'2 => box
    (pointer'nt, [NT pointer'nt; T STAR't]%list)
    (fun pt loc =>
    ( (fun typ => Cabs.PTR [] ((fst pt) typ), loc) )
)
  | Prod'pointer'3 => box
    (pointer'nt, [NT pointer'nt; NT type_qualifier_list'nt; T STAR't]%list)
    (fun pt quallst loc =>
    ( (fun typ => Cabs.PTR (rev' quallst) ((fst pt) typ), loc) )
)
  | Prod'postfix_expression'0 => box
    (postfix_expression'nt, [NT primary_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'postfix_expression'1 => box
    (postfix_expression'nt, [T RBRACK't; NT expression'nt; T LBRACK't; NT postfix_expression'nt]%list)
    (fun _4 index _2 expr =>
    ( (Cabs.INDEX (fst expr) (fst index), snd expr) )
)
  | Prod'postfix_expression'2 => box
    (postfix_expression'nt, [T RPAREN't; NT argument_expression_list'nt; T LPAREN't; NT postfix_expression'nt]%list)
    (fun _4 args _2 expr =>
    ( (Cabs.CALL (fst expr) (rev' args), snd expr) )
)
  | Prod'postfix_expression'3 => box
    (postfix_expression'nt, [T RPAREN't; T LPAREN't; NT postfix_expression'nt]%list)
    (fun _3 _2 expr =>
    ( (Cabs.CALL (fst expr) [], snd expr) )
)
  | Prod'postfix_expression'4 => box
    (postfix_expression'nt, [T RPAREN't; NT type_name'nt; T COMMA't; NT assignment_expression'nt; T LPAREN't; T BUILTIN_VA_ARG't]%list)
    (fun _6 ty _4 expr _2 loc =>
    ( (Cabs.BUILTIN_VA_ARG (fst expr) ty, loc) )
)
  | Prod'postfix_expression'5 => box
    (postfix_expression'nt, [T OTHER_NAME't; T DOT't; NT postfix_expression'nt]%list)
    (fun mem _2 expr =>
    ( (Cabs.MEMBEROF (fst expr) (fst mem), snd expr) )
)
  | Prod'postfix_expression'6 => box
    (postfix_expression'nt, [T OTHER_NAME't; T PTR't; NT postfix_expression'nt]%list)
    (fun mem _2 expr =>
    ( (Cabs.MEMBEROFPTR (fst expr) (fst mem), snd expr) )
)
  | Prod'postfix_expression'7 => box
    (postfix_expression'nt, [T INC't; NT postfix_expression'nt]%list)
    (fun _2 expr =>
    ( (Cabs.UNARY Cabs.POSINCR (fst expr), snd expr) )
)
  | Prod'postfix_expression'8 => box
    (postfix_expression'nt, [T DEC't; NT postfix_expression'nt]%list)
    (fun _2 expr =>
    ( (Cabs.UNARY Cabs.POSDECR (fst expr), snd expr) )
)
  | Prod'postfix_expression'9 => box
    (postfix_expression'nt, [T RBRACE't; NT initializer_list'nt; T LBRACE't; T RPAREN't; NT type_name'nt; T LPAREN't]%list)
    (fun _6 init _4 _3 typ loc =>
    ( (Cabs.CAST typ (Cabs.COMPOUND_INIT (rev' init)), loc) )
)
  | Prod'postfix_expression'10 => box
    (postfix_expression'nt, [T RBRACE't; T COMMA't; NT initializer_list'nt; T LBRACE't; T RPAREN't; NT type_name'nt; T LPAREN't]%list)
    (fun _7 _6 init _4 _3 typ loc =>
    ( (Cabs.CAST typ (Cabs.COMPOUND_INIT (rev' init)), loc) )
)
  | Prod'postfix_expression'11 => box
    (postfix_expression'nt, [T RPAREN't; NT designator_list'nt; T OTHER_NAME't; T COMMA't; NT type_name'nt; T LPAREN't; T BUILTIN_OFFSETOF't]%list)
    (fun _7 mems id _4 typ _2 loc =>
    ( (Cabs.BUILTIN_OFFSETOF typ ((Cabs.INFIELD_INIT (fst id))::(rev mems)), loc) )
)
  | Prod'postfix_expression'12 => box
    (postfix_expression'nt, [T RPAREN't; T OTHER_NAME't; T COMMA't; NT type_name'nt; T LPAREN't; T BUILTIN_OFFSETOF't]%list)
    (fun _6 mem _4 typ _2 loc =>
    ( (Cabs.BUILTIN_OFFSETOF typ [Cabs.INFIELD_INIT (fst mem)], loc) )
)
  | Prod'primary_expression'0 => box
    (primary_expression'nt, [T VAR_NAME't]%list)
    (fun var =>
    ( (Cabs.VARIABLE (fst var), snd var) )
)
  | Prod'primary_expression'1 => box
    (primary_expression'nt, [T CONSTANT't]%list)
    (fun cst =>
    ( (Cabs.CONSTANT (fst cst), snd cst) )
)
  | Prod'primary_expression'2 => box
    (primary_expression'nt, [T STRING_LITERAL't]%list)
    (fun str =>
    ( let '((wide, chars), loc) := str in
      (Cabs.CONSTANT (Cabs.CONST_STRING wide chars), loc) )
)
  | Prod'primary_expression'3 => box
    (primary_expression'nt, [T RPAREN't; NT expression'nt; T LPAREN't]%list)
    (fun _3 expr loc =>
    ( (fst expr, loc))
)
  | Prod'relational_expression'0 => box
    (relational_expression'nt, [NT shift_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'relational_expression'1 => box
    (relational_expression'nt, [NT shift_expression'nt; T LT't; NT relational_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.LT (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'relational_expression'2 => box
    (relational_expression'nt, [NT shift_expression'nt; T GT't; NT relational_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.GT (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'relational_expression'3 => box
    (relational_expression'nt, [NT shift_expression'nt; T LEQ't; NT relational_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.LE (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'relational_expression'4 => box
    (relational_expression'nt, [NT shift_expression'nt; T GEQ't; NT relational_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.GE (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'selection_statement_dangerous'0 => box
    (selection_statement_dangerous'nt, [NT statement_dangerous'nt; T RPAREN't; NT expression'nt; T LPAREN't; T IF_'t]%list)
    (fun stmt _4 expr _2 loc =>
    ( Cabs.If (fst expr) stmt None loc )
)
  | Prod'selection_statement_dangerous'1 => box
    (selection_statement_dangerous'nt, [NT statement_dangerous'nt; T ELSE't; NT statement_safe'nt; T RPAREN't; NT expression'nt; T LPAREN't; T IF_'t]%list)
    (fun stmt2 _6 stmt1 _4 expr _2 loc =>
    ( Cabs.If (fst expr) stmt1 (Some stmt2) loc )
)
  | Prod'selection_statement_dangerous'2 => box
    (selection_statement_dangerous'nt, [NT statement_dangerous'nt; T RPAREN't; NT expression'nt; T LPAREN't; T SWITCH't]%list)
    (fun stmt _4 expr _2 loc =>
    ( Cabs.SWITCH (fst expr) stmt loc )
)
  | Prod'selection_statement_safe'0 => box
    (selection_statement_safe'nt, [NT statement_safe'nt; T ELSE't; NT statement_safe'nt; T RPAREN't; NT expression'nt; T LPAREN't; T IF_'t]%list)
    (fun stmt2 _6 stmt1 _4 expr _2 loc =>
    ( Cabs.If (fst expr) stmt1 (Some stmt2) loc )
)
  | Prod'selection_statement_safe'1 => box
    (selection_statement_safe'nt, [NT statement_safe'nt; T RPAREN't; NT expression'nt; T LPAREN't; T SWITCH't]%list)
    (fun stmt _4 expr _2 loc =>
    ( Cabs.SWITCH (fst expr) stmt loc )
)
  | Prod'shift_expression'0 => box
    (shift_expression'nt, [NT additive_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'shift_expression'1 => box
    (shift_expression'nt, [NT additive_expression'nt; T LEFT't; NT shift_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.SHL (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'shift_expression'2 => box
    (shift_expression'nt, [NT additive_expression'nt; T RIGHT't; NT shift_expression'nt]%list)
    (fun expr2 _2 expr1 =>
    ( (Cabs.BINARY Cabs.SHR (fst expr1) (fst expr2), snd expr1) )
)
  | Prod'specifier_qualifier_list'0 => box
    (specifier_qualifier_list'nt, [NT specifier_qualifier_list'nt; NT type_specifier'nt]%list)
    (fun rest typ =>
    ( (Cabs.SpecType (fst typ)::fst rest, snd typ) )
)
  | Prod'specifier_qualifier_list'1 => box
    (specifier_qualifier_list'nt, [NT type_specifier'nt]%list)
    (fun typ =>
    ( ([Cabs.SpecType (fst typ)], snd typ) )
)
  | Prod'specifier_qualifier_list'2 => box
    (specifier_qualifier_list'nt, [NT specifier_qualifier_list'nt; NT type_qualifier'nt]%list)
    (fun rest qual =>
    ( (Cabs.SpecCV (fst qual)::fst rest, snd qual) )
)
  | Prod'specifier_qualifier_list'3 => box
    (specifier_qualifier_list'nt, [NT type_qualifier'nt]%list)
    (fun qual =>
    ( ([Cabs.SpecCV (fst qual)], snd qual) )
)
  | Prod'statement_dangerous'0 => box
    (statement_dangerous'nt, [NT labeled_statement_statement_dangerous_'nt]%list)
    (fun stmt =>
    ( stmt )
)
  | Prod'statement_dangerous'1 => box
    (statement_dangerous'nt, [NT compound_statement'nt]%list)
    (fun stmt =>
    ( stmt )
)
  | Prod'statement_dangerous'2 => box
    (statement_dangerous'nt, [NT expression_statement'nt]%list)
    (fun stmt =>
    ( stmt )
)
  | Prod'statement_dangerous'3 => box
    (statement_dangerous'nt, [NT selection_statement_dangerous'nt]%list)
    (fun stmt =>
    ( stmt )
)
  | Prod'statement_dangerous'4 => box
    (statement_dangerous'nt, [NT iteration_statement_statement_dangerous_'nt]%list)
    (fun stmt =>
    ( stmt )
)
  | Prod'statement_dangerous'5 => box
    (statement_dangerous'nt, [NT jump_statement'nt]%list)
    (fun stmt =>
    ( stmt )
)
  | Prod'statement_dangerous'6 => box
    (statement_dangerous'nt, [NT asm_statement'nt]%list)
    (fun stmt =>
    ( stmt )
)
  | Prod'statement_safe'0 => box
    (statement_safe'nt, [NT labeled_statement_statement_safe_'nt]%list)
    (fun stmt =>
    ( stmt )
)
  | Prod'statement_safe'1 => box
    (statement_safe'nt, [NT compound_statement'nt]%list)
    (fun stmt =>
    ( stmt )
)
  | Prod'statement_safe'2 => box
    (statement_safe'nt, [NT expression_statement'nt]%list)
    (fun stmt =>
    ( stmt )
)
  | Prod'statement_safe'3 => box
    (statement_safe'nt, [NT selection_statement_safe'nt]%list)
    (fun stmt =>
    ( stmt )
)
  | Prod'statement_safe'4 => box
    (statement_safe'nt, [NT iteration_statement_statement_safe_'nt]%list)
    (fun stmt =>
    ( stmt )
)
  | Prod'statement_safe'5 => box
    (statement_safe'nt, [NT jump_statement'nt]%list)
    (fun stmt =>
    ( stmt )
)
  | Prod'statement_safe'6 => box
    (statement_safe'nt, [NT asm_statement'nt]%list)
    (fun stmt =>
    ( stmt )
)
  | Prod'static_assert_declaration'0 => box
    (static_assert_declaration'nt, [T SEMICOLON't; T RPAREN't; T STRING_LITERAL't; T COMMA't; NT constant_expression'nt; T LPAREN't; T STATIC_ASSERT't]%list)
    (fun _7 _6 str _4 expr _2 loc =>
    ( let '((wide, chars), locs) := str in
      (expr, (Cabs.CONST_STRING wide chars, locs), loc) )
)
  | Prod'storage_class_specifier'0 => box
    (storage_class_specifier'nt, [T TYPEDEF't]%list)
    (fun loc =>
    ( (Cabs.TYPEDEF, loc) )
)
  | Prod'storage_class_specifier'1 => box
    (storage_class_specifier'nt, [T EXTERN't]%list)
    (fun loc =>
    ( (Cabs.EXTERN, loc) )
)
  | Prod'storage_class_specifier'2 => box
    (storage_class_specifier'nt, [T STATIC't]%list)
    (fun loc =>
    ( (Cabs.STATIC, loc) )
)
  | Prod'storage_class_specifier'3 => box
    (storage_class_specifier'nt, [T AUTO't]%list)
    (fun loc =>
    ( (Cabs.AUTO, loc) )
)
  | Prod'storage_class_specifier'4 => box
    (storage_class_specifier'nt, [T REGISTER't]%list)
    (fun loc =>
    ( (Cabs.REGISTER, loc) )
)
  | Prod'struct_declaration'0 => box
    (struct_declaration'nt, [T SEMICOLON't; NT struct_declarator_list'nt; NT specifier_qualifier_list'nt]%list)
    (fun _3 decls decspec =>
    ( Cabs.Field_group (fst decspec) (rev' decls) (snd decspec) )
)
  | Prod'struct_declaration'1 => box
    (struct_declaration'nt, [T SEMICOLON't; NT specifier_qualifier_list'nt]%list)
    (fun _2 decspec =>
    ( Cabs.Field_group (fst decspec) [(None,None)] (snd decspec) )
)
  | Prod'struct_declaration'2 => box
    (struct_declaration'nt, [NT static_assert_declaration'nt]%list)
    (fun asrt =>
    ( let '((e, loc_e), (s, loc_s), loc) := asrt in
      Cabs.Field_group_static_assert e loc_e s loc_s loc )
)
  | Prod'struct_declaration_list'0 => box
    (struct_declaration_list'nt, []%list)
    (
    ( nil )
)
  | Prod'struct_declaration_list'1 => box
    (struct_declaration_list'nt, [NT struct_declaration'nt; NT struct_declaration_list'nt]%list)
    (fun tdecls qdecls =>
    ( tdecls::qdecls )
)
  | Prod'struct_declarator'0 => box
    (struct_declarator'nt, [NT declarator'nt]%list)
    (fun decl =>
    ( (Some decl, None) )
)
  | Prod'struct_declarator'1 => box
    (struct_declarator'nt, [NT constant_expression'nt; T COLON't; NT declarator'nt]%list)
    (fun expr _2 decl =>
    ( (Some decl, Some (fst expr)) )
)
  | Prod'struct_declarator'2 => box
    (struct_declarator'nt, [NT constant_expression'nt; T COLON't]%list)
    (fun expr _1 =>
    ( (None, Some (fst expr)) )
)
  | Prod'struct_declarator_list'0 => box
    (struct_declarator_list'nt, [NT struct_declarator'nt]%list)
    (fun decl =>
    ( [decl] )
)
  | Prod'struct_declarator_list'1 => box
    (struct_declarator_list'nt, [NT struct_declarator'nt; T COMMA't; NT struct_declarator_list'nt]%list)
    (fun declt _2 declq =>
    ( declt::declq )
)
  | Prod'struct_or_union'0 => box
    (struct_or_union'nt, [T STRUCT't]%list)
    (fun loc =>
    ( (Cabs.STRUCT, loc) )
)
  | Prod'struct_or_union'1 => box
    (struct_or_union'nt, [T UNION't]%list)
    (fun loc =>
    ( (Cabs.UNION, loc) )
)
  | Prod'struct_or_union_specifier'0 => box
    (struct_or_union_specifier'nt, [T RBRACE't; NT struct_declaration_list'nt; T LBRACE't; T OTHER_NAME't; NT attribute_specifier_list'nt; NT struct_or_union'nt]%list)
    (fun _6 decls _4 id attrs str_uni =>
    ( (Cabs.Tstruct_union (fst str_uni) (Some (fst id)) (Some (rev' decls)) attrs,
       snd str_uni) )
)
  | Prod'struct_or_union_specifier'1 => box
    (struct_or_union_specifier'nt, [T RBRACE't; NT struct_declaration_list'nt; T LBRACE't; NT attribute_specifier_list'nt; NT struct_or_union'nt]%list)
    (fun _5 decls _3 attrs str_uni =>
    ( (Cabs.Tstruct_union (fst str_uni) None (Some (rev' decls)) attrs,
       snd str_uni) )
)
  | Prod'struct_or_union_specifier'2 => box
    (struct_or_union_specifier'nt, [T OTHER_NAME't; NT attribute_specifier_list'nt; NT struct_or_union'nt]%list)
    (fun id attrs str_uni =>
    ( (Cabs.Tstruct_union (fst str_uni) (Some (fst id)) None attrs,
       snd str_uni) )
)
  | Prod'translation_unit'0 => box
    (translation_unit'nt, [NT external_declaration'nt]%list)
    (fun def =>
    ( [def] )
)
  | Prod'translation_unit'1 => box
    (translation_unit'nt, [NT external_declaration'nt; NT translation_unit'nt]%list)
    (fun deft defq =>
    ( deft::defq )
)
  | Prod'translation_unit'2 => box
    (translation_unit'nt, [T SEMICOLON't; NT translation_unit'nt]%list)
    (fun _2 tu =>
    ( tu )
)
  | Prod'translation_unit'3 => box
    (translation_unit'nt, [T SEMICOLON't]%list)
    (fun _1 =>
    ( [] )
)
  | Prod'translation_unit_file'0 => box
    (translation_unit_file'nt, [T EOF't; NT translation_unit'nt]%list)
    (fun _2 lst =>
    ( rev' lst )
)
  | Prod'translation_unit_file'1 => box
    (translation_unit_file'nt, [T EOF't]%list)
    (fun _1 =>
    ( [] )
)
  | Prod'type_name'0 => box
    (type_name'nt, [NT specifier_qualifier_list'nt]%list)
    (fun specqual =>
    ( (fst specqual, Cabs.JUSTBASE) )
)
  | Prod'type_name'1 => box
    (type_name'nt, [NT abstract_declarator'nt; NT specifier_qualifier_list'nt]%list)
    (fun typ specqual =>
    ( (fst specqual, typ) )
)
  | Prod'type_qualifier'0 => box
    (type_qualifier'nt, [NT type_qualifier_noattr'nt]%list)
    (fun qual =>
    ( qual )
)
  | Prod'type_qualifier'1 => box
    (type_qualifier'nt, [NT attribute_specifier'nt]%list)
    (fun attr =>
    ( (Cabs.CV_ATTR (fst attr), snd attr) )
)
  | Prod'type_qualifier_list'0 => box
    (type_qualifier_list'nt, [NT type_qualifier'nt]%list)
    (fun qual =>
    ( [fst qual] )
)
  | Prod'type_qualifier_list'1 => box
    (type_qualifier_list'nt, [NT type_qualifier'nt; NT type_qualifier_list'nt]%list)
    (fun qualt qualq =>
    ( fst qualt::qualq )
)
  | Prod'type_qualifier_noattr'0 => box
    (type_qualifier_noattr'nt, [T CONST't]%list)
    (fun loc =>
    ( (Cabs.CV_CONST, loc) )
)
  | Prod'type_qualifier_noattr'1 => box
    (type_qualifier_noattr'nt, [T RESTRICT't]%list)
    (fun loc =>
    ( (Cabs.CV_RESTRICT, loc) )
)
  | Prod'type_qualifier_noattr'2 => box
    (type_qualifier_noattr'nt, [T VOLATILE't]%list)
    (fun loc =>
    ( (Cabs.CV_VOLATILE, loc) )
)
  | Prod'type_specifier'0 => box
    (type_specifier'nt, [T VOID't]%list)
    (fun loc =>
    ( (Cabs.Tvoid, loc) )
)
  | Prod'type_specifier'1 => box
    (type_specifier'nt, [T CHAR't]%list)
    (fun loc =>
    ( (Cabs.Tchar, loc) )
)
  | Prod'type_specifier'2 => box
    (type_specifier'nt, [T SHORT't]%list)
    (fun loc =>
    ( (Cabs.Tshort, loc) )
)
  | Prod'type_specifier'3 => box
    (type_specifier'nt, [T INT't]%list)
    (fun loc =>
    ( (Cabs.Tint, loc) )
)
  | Prod'type_specifier'4 => box
    (type_specifier'nt, [T LONG't]%list)
    (fun loc =>
    ( (Cabs.Tlong, loc) )
)
  | Prod'type_specifier'5 => box
    (type_specifier'nt, [T FLOAT't]%list)
    (fun loc =>
    ( (Cabs.Tfloat, loc) )
)
  | Prod'type_specifier'6 => box
    (type_specifier'nt, [T DOUBLE't]%list)
    (fun loc =>
    ( (Cabs.Tdouble, loc) )
)
  | Prod'type_specifier'7 => box
    (type_specifier'nt, [T SIGNED't]%list)
    (fun loc =>
    ( (Cabs.Tsigned, loc) )
)
  | Prod'type_specifier'8 => box
    (type_specifier'nt, [T UNSIGNED't]%list)
    (fun loc =>
    ( (Cabs.Tunsigned, loc) )
)
  | Prod'type_specifier'9 => box
    (type_specifier'nt, [T UNDERSCORE_BOOL't]%list)
    (fun loc =>
    ( (Cabs.T_Bool, loc) )
)
  | Prod'type_specifier'10 => box
    (type_specifier'nt, [NT struct_or_union_specifier'nt]%list)
    (fun spec =>
    ( spec )
)
  | Prod'type_specifier'11 => box
    (type_specifier'nt, [NT enum_specifier'nt]%list)
    (fun spec =>
    ( spec )
)
  | Prod'type_specifier'12 => box
    (type_specifier'nt, [T TYPEDEF_NAME't]%list)
    (fun id =>
    ( (Cabs.Tnamed (fst id), snd id) )
)
  | Prod'unary_expression'0 => box
    (unary_expression'nt, [NT postfix_expression'nt]%list)
    (fun expr =>
    ( expr )
)
  | Prod'unary_expression'1 => box
    (unary_expression'nt, [NT unary_expression'nt; T INC't]%list)
    (fun expr loc =>
    ( (Cabs.UNARY Cabs.PREINCR (fst expr), loc) )
)
  | Prod'unary_expression'2 => box
    (unary_expression'nt, [NT unary_expression'nt; T DEC't]%list)
    (fun expr loc =>
    ( (Cabs.UNARY Cabs.PREDECR (fst expr), loc) )
)
  | Prod'unary_expression'3 => box
    (unary_expression'nt, [NT cast_expression'nt; NT unary_operator'nt]%list)
    (fun expr op =>
    ( (Cabs.UNARY (fst op) (fst expr), snd op) )
)
  | Prod'unary_expression'4 => box
    (unary_expression'nt, [NT unary_expression'nt; T SIZEOF't]%list)
    (fun expr loc =>
    ( (Cabs.EXPR_SIZEOF (fst expr), loc) )
)
  | Prod'unary_expression'5 => box
    (unary_expression'nt, [T RPAREN't; NT type_name'nt; T LPAREN't; T SIZEOF't]%list)
    (fun _4 typ _2 loc =>
    ( (Cabs.TYPE_SIZEOF typ, loc) )
)
  | Prod'unary_expression'6 => box
    (unary_expression'nt, [T RPAREN't; NT type_name'nt; T LPAREN't; T ALIGNOF't]%list)
    (fun _4 typ _2 loc =>
    ( (Cabs.ALIGNOF typ, loc) )
)
  | Prod'unary_operator'0 => box
    (unary_operator'nt, [T AND't]%list)
    (fun loc =>
    ( (Cabs.ADDROF, loc) )
)
  | Prod'unary_operator'1 => box
    (unary_operator'nt, [T STAR't]%list)
    (fun loc =>
    ( (Cabs.MEMOF, loc) )
)
  | Prod'unary_operator'2 => box
    (unary_operator'nt, [T PLUS't]%list)
    (fun loc =>
    ( (Cabs.PLUS, loc) )
)
  | Prod'unary_operator'3 => box
    (unary_operator'nt, [T MINUS't]%list)
    (fun loc =>
    ( (Cabs.MINUS, loc) )
)
  | Prod'unary_operator'4 => box
    (unary_operator'nt, [T TILDE't]%list)
    (fun loc =>
    ( (Cabs.BNOT, loc) )
)
  | Prod'unary_operator'5 => box
    (unary_operator'nt, [T BANG't]%list)
    (fun loc =>
    ( (Cabs.NOT, loc) )
)
  end.

Definition prod_lhs (p:production) :=
  fst (projT1 (prod_contents p)).
Definition prod_rhs_rev (p:production) :=
  snd (projT1 (prod_contents p)).
Definition prod_action (p:production) :=
  projT2 (prod_contents p).

Include MenhirLib.Grammar.Defs.

End Gram.

Module Aut <: MenhirLib.Automaton.T.

Local Obligation Tactic := let x := fresh in intro x; case x; reflexivity.

Module Gram := Gram.
Module GramDefs := Gram.

Definition nullable_nterm (nt:nonterminal) : bool :=
  match nt with
  | unary_operator'nt => false
  | unary_expression'nt => false
  | type_specifier'nt => false
  | type_qualifier_noattr'nt => false
  | type_qualifier_list'nt => false
  | type_qualifier'nt => false
  | type_name'nt => false
  | translation_unit_file'nt => false
  | translation_unit'nt => false
  | struct_or_union_specifier'nt => false
  | struct_or_union'nt => false
  | struct_declarator_list'nt => false
  | struct_declarator'nt => false
  | struct_declaration_list'nt => true
  | struct_declaration'nt => false
  | storage_class_specifier'nt => false
  | static_assert_declaration'nt => false
  | statement_safe'nt => false
  | statement_dangerous'nt => false
  | specifier_qualifier_list'nt => false
  | shift_expression'nt => false
  | selection_statement_safe'nt => false
  | selection_statement_dangerous'nt => false
  | relational_expression'nt => false
  | primary_expression'nt => false
  | postfix_expression'nt => false
  | pointer'nt => false
  | parameter_type_list'nt => false
  | parameter_list'nt => false
  | parameter_declaration'nt => false
  | multiplicative_expression'nt => false
  | logical_OR_expression'nt => false
  | logical_AND_expression'nt => false
  | labeled_statement_statement_safe_'nt => false
  | labeled_statement_statement_dangerous_'nt => false
  | jump_statement'nt => false
  | iteration_statement_statement_safe_'nt => false
  | iteration_statement_statement_dangerous_'nt => false
  | initializer_list'nt => false
  | init_declarator_list'nt => false
  | init_declarator'nt => false
  | inclusive_OR_expression'nt => false
  | identifier_list'nt => false
  | gcc_attribute_word'nt => false
  | gcc_attribute_list'nt => true
  | gcc_attribute'nt => true
  | function_specifier'nt => false
  | function_definition'nt => false
  | external_declaration'nt => false
  | expression_statement'nt => false
  | expression'nt => false
  | exclusive_OR_expression'nt => false
  | equality_expression'nt => false
  | enumerator_list'nt => false
  | enumerator'nt => false
  | enumeration_constant'nt => false
  | enum_specifier'nt => false
  | direct_declarator'nt => false
  | direct_abstract_declarator'nt => false
  | designator_list'nt => false
  | designator'nt => false
  | designation'nt => false
  | declarator_noattrend'nt => false
  | declarator'nt => false
  | declaration_specifiers_typespec_opt'nt => true
  | declaration_specifiers'nt => false
  | declaration_list'nt => false
  | declaration'nt => false
  | constant_expression'nt => false
  | conditional_expression'nt => false
  | compound_statement'nt => false
  | cast_expression'nt => false
  | c_initializer'nt => false
  | block_item_list'nt => false
  | block_item'nt => false
  | attribute_specifier_list'nt => true
  | attribute_specifier'nt => false
  | assignment_operator'nt => false
  | assignment_expression'nt => false
  | asm_statement'nt => false
  | asm_operands_ne'nt => false
  | asm_operands'nt => true
  | asm_operand'nt => false
  | asm_op_name'nt => true
  | asm_flags'nt => false
  | asm_attributes'nt => true
  | asm_arguments'nt => true
  | argument_expression_list'nt => false
  | additive_expression'nt => false
  | abstract_declarator'nt => false
  | AND_expression'nt => false
  end.

Definition first_nterm (nt:nonterminal) : list terminal :=
  match nt with
  | unary_operator'nt => [TILDE't; STAR't; PLUS't; MINUS't; BANG't; AND't]%list
  | unary_expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | type_specifier'nt => [VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; STRUCT't; SIGNED't; SHORT't; LONG't; INT't; FLOAT't; ENUM't; DOUBLE't; CHAR't]%list
  | type_qualifier_noattr'nt => [VOLATILE't; RESTRICT't; CONST't]%list
  | type_qualifier_list'nt => [VOLATILE't; RESTRICT't; PACKED't; CONST't; ATTRIBUTE't; ALIGNAS't]%list
  | type_qualifier'nt => [VOLATILE't; RESTRICT't; PACKED't; CONST't; ATTRIBUTE't; ALIGNAS't]%list
  | type_name'nt => [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; STRUCT't; SIGNED't; SHORT't; RESTRICT't; PACKED't; LONG't; INT't; FLOAT't; ENUM't; DOUBLE't; CONST't; CHAR't; ATTRIBUTE't; ALIGNAS't]%list
  | translation_unit_file'nt => [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC_ASSERT't; STATIC't; SIGNED't; SHORT't; SEMICOLON't; RESTRICT't; REGISTER't; PRAGMA't; PACKED't; NORETURN't; LONG't; INT't; INLINE't; FLOAT't; EXTERN't; EOF't; ENUM't; DOUBLE't; CONST't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list
  | translation_unit'nt => [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC_ASSERT't; STATIC't; SIGNED't; SHORT't; SEMICOLON't; RESTRICT't; REGISTER't; PRAGMA't; PACKED't; NORETURN't; LONG't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list
  | struct_or_union_specifier'nt => [UNION't; STRUCT't]%list
  | struct_or_union'nt => [UNION't; STRUCT't]%list
  | struct_declarator_list'nt => [VAR_NAME't; STAR't; LPAREN't; COLON't]%list
  | struct_declarator'nt => [VAR_NAME't; STAR't; LPAREN't; COLON't]%list
  | struct_declaration_list'nt => [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; STRUCT't; STATIC_ASSERT't; SIGNED't; SHORT't; RESTRICT't; PACKED't; LONG't; INT't; FLOAT't; ENUM't; DOUBLE't; CONST't; CHAR't; ATTRIBUTE't; ALIGNAS't]%list
  | struct_declaration'nt => [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; STRUCT't; STATIC_ASSERT't; SIGNED't; SHORT't; RESTRICT't; PACKED't; LONG't; INT't; FLOAT't; ENUM't; DOUBLE't; CONST't; CHAR't; ATTRIBUTE't; ALIGNAS't]%list
  | storage_class_specifier'nt => [TYPEDEF't; STATIC't; REGISTER't; EXTERN't; AUTO't]%list
  | static_assert_declaration'nt => [STATIC_ASSERT't]%list
  | statement_safe'nt => [WHILE't; VAR_NAME't; TILDE't; SWITCH't; STRING_LITERAL't; STAR't; SIZEOF't; SEMICOLON't; RETURN't; PLUS't; OTHER_NAME't; MINUS't; LPAREN't; LBRACE't; INC't; IF_'t; GOTO't; FOR't; DO't; DEFAULT't; DEC't; CONTINUE't; CONSTANT't; CASE't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BREAK't; BANG't; ASM't; AND't; ALIGNOF't]%list
  | statement_dangerous'nt => [WHILE't; VAR_NAME't; TILDE't; SWITCH't; STRING_LITERAL't; STAR't; SIZEOF't; SEMICOLON't; RETURN't; PLUS't; OTHER_NAME't; MINUS't; LPAREN't; LBRACE't; INC't; IF_'t; GOTO't; FOR't; DO't; DEFAULT't; DEC't; CONTINUE't; CONSTANT't; CASE't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BREAK't; BANG't; ASM't; AND't; ALIGNOF't]%list
  | specifier_qualifier_list'nt => [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; STRUCT't; SIGNED't; SHORT't; RESTRICT't; PACKED't; LONG't; INT't; FLOAT't; ENUM't; DOUBLE't; CONST't; CHAR't; ATTRIBUTE't; ALIGNAS't]%list
  | shift_expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | selection_statement_safe'nt => [SWITCH't; IF_'t]%list
  | selection_statement_dangerous'nt => [SWITCH't; IF_'t]%list
  | relational_expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | primary_expression'nt => [VAR_NAME't; STRING_LITERAL't; LPAREN't; CONSTANT't]%list
  | postfix_expression'nt => [VAR_NAME't; STRING_LITERAL't; LPAREN't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't]%list
  | pointer'nt => [STAR't]%list
  | parameter_type_list'nt => [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC't; SIGNED't; SHORT't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LONG't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list
  | parameter_list'nt => [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC't; SIGNED't; SHORT't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LONG't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list
  | parameter_declaration'nt => [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC't; SIGNED't; SHORT't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LONG't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list
  | multiplicative_expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | logical_OR_expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | logical_AND_expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | labeled_statement_statement_safe_'nt => [OTHER_NAME't; DEFAULT't; CASE't]%list
  | labeled_statement_statement_dangerous_'nt => [OTHER_NAME't; DEFAULT't; CASE't]%list
  | jump_statement'nt => [RETURN't; GOTO't; CONTINUE't; BREAK't]%list
  | iteration_statement_statement_safe_'nt => [WHILE't; FOR't; DO't]%list
  | iteration_statement_statement_dangerous_'nt => [WHILE't; FOR't; DO't]%list
  | initializer_list'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; LBRACK't; LBRACE't; INC't; DOT't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | init_declarator_list'nt => [VAR_NAME't; STAR't; LPAREN't]%list
  | init_declarator'nt => [VAR_NAME't; STAR't; LPAREN't]%list
  | inclusive_OR_expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | identifier_list'nt => [VAR_NAME't]%list
  | gcc_attribute_word'nt => [PACKED't; OTHER_NAME't; CONST't]%list
  | gcc_attribute_list'nt => [PACKED't; OTHER_NAME't; CONST't; COMMA't]%list
  | gcc_attribute'nt => [PACKED't; OTHER_NAME't; CONST't]%list
  | function_specifier'nt => [NORETURN't; INLINE't]%list
  | function_definition'nt => [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC't; SIGNED't; SHORT't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LONG't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list
  | external_declaration'nt => [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC_ASSERT't; STATIC't; SIGNED't; SHORT't; RESTRICT't; REGISTER't; PRAGMA't; PACKED't; NORETURN't; LONG't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list
  | expression_statement'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; SEMICOLON't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | exclusive_OR_expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | equality_expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | enumerator_list'nt => [VAR_NAME't]%list
  | enumerator'nt => [VAR_NAME't]%list
  | enumeration_constant'nt => [VAR_NAME't]%list
  | enum_specifier'nt => [ENUM't]%list
  | direct_declarator'nt => [VAR_NAME't; LPAREN't]%list
  | direct_abstract_declarator'nt => [LPAREN't; LBRACK't]%list
  | designator_list'nt => [LBRACK't; DOT't]%list
  | designator'nt => [LBRACK't; DOT't]%list
  | designation'nt => [LBRACK't; DOT't]%list
  | declarator_noattrend'nt => [VAR_NAME't; STAR't; LPAREN't]%list
  | declarator'nt => [VAR_NAME't; STAR't; LPAREN't]%list
  | declaration_specifiers_typespec_opt'nt => [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC't; SIGNED't; SHORT't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LONG't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list
  | declaration_specifiers'nt => [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC't; SIGNED't; SHORT't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LONG't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list
  | declaration_list'nt => [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC_ASSERT't; STATIC't; SIGNED't; SHORT't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LONG't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list
  | declaration'nt => [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC_ASSERT't; STATIC't; SIGNED't; SHORT't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LONG't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list
  | constant_expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | conditional_expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | compound_statement'nt => [LBRACE't]%list
  | cast_expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | c_initializer'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; LBRACE't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | block_item_list'nt => [WHILE't; VOLATILE't; VOID't; VAR_NAME't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; TILDE't; SWITCH't; STRUCT't; STRING_LITERAL't; STATIC_ASSERT't; STATIC't; STAR't; SIZEOF't; SIGNED't; SHORT't; SEMICOLON't; RETURN't; RESTRICT't; REGISTER't; PRAGMA't; PLUS't; PACKED't; OTHER_NAME't; NORETURN't; MINUS't; LPAREN't; LONG't; LBRACE't; INT't; INLINE't; INC't; IF_'t; GOTO't; FOR't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; DO't; DEFAULT't; DEC't; CONTINUE't; CONSTANT't; CONST't; CHAR't; CASE't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BREAK't; BANG't; AUTO't; ATTRIBUTE't; ASM't; AND't; ALIGNOF't; ALIGNAS't]%list
  | block_item'nt => [WHILE't; VOLATILE't; VOID't; VAR_NAME't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; TILDE't; SWITCH't; STRUCT't; STRING_LITERAL't; STATIC_ASSERT't; STATIC't; STAR't; SIZEOF't; SIGNED't; SHORT't; SEMICOLON't; RETURN't; RESTRICT't; REGISTER't; PRAGMA't; PLUS't; PACKED't; OTHER_NAME't; NORETURN't; MINUS't; LPAREN't; LONG't; LBRACE't; INT't; INLINE't; INC't; IF_'t; GOTO't; FOR't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; DO't; DEFAULT't; DEC't; CONTINUE't; CONSTANT't; CONST't; CHAR't; CASE't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BREAK't; BANG't; AUTO't; ATTRIBUTE't; ASM't; AND't; ALIGNOF't; ALIGNAS't]%list
  | attribute_specifier_list'nt => [PACKED't; ATTRIBUTE't; ALIGNAS't]%list
  | attribute_specifier'nt => [PACKED't; ATTRIBUTE't; ALIGNAS't]%list
  | assignment_operator'nt => [XOR_ASSIGN't; SUB_ASSIGN't; RIGHT_ASSIGN't; OR_ASSIGN't; MUL_ASSIGN't; MOD_ASSIGN't; LEFT_ASSIGN't; EQ't; DIV_ASSIGN't; AND_ASSIGN't; ADD_ASSIGN't]%list
  | assignment_expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | asm_statement'nt => [ASM't]%list
  | asm_operands_ne'nt => [STRING_LITERAL't; LBRACK't]%list
  | asm_operands'nt => [STRING_LITERAL't; LBRACK't]%list
  | asm_operand'nt => [STRING_LITERAL't; LBRACK't]%list
  | asm_op_name'nt => [LBRACK't]%list
  | asm_flags'nt => [STRING_LITERAL't]%list
  | asm_attributes'nt => [VOLATILE't; CONST't]%list
  | asm_arguments'nt => [COLON't]%list
  | argument_expression_list'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | additive_expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  | abstract_declarator'nt => [STAR't; LPAREN't; LBRACK't]%list
  | AND_expression'nt => [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list
  end.

Inductive noninitstate' : Set :=
| Nis'621
| Nis'620
| Nis'619
| Nis'618
| Nis'617
| Nis'616
| Nis'615
| Nis'614
| Nis'613
| Nis'612
| Nis'611
| Nis'610
| Nis'609
| Nis'608
| Nis'607
| Nis'606
| Nis'605
| Nis'604
| Nis'603
| Nis'602
| Nis'601
| Nis'600
| Nis'599
| Nis'598
| Nis'597
| Nis'596
| Nis'595
| Nis'594
| Nis'593
| Nis'592
| Nis'591
| Nis'590
| Nis'589
| Nis'588
| Nis'587
| Nis'586
| Nis'585
| Nis'584
| Nis'583
| Nis'582
| Nis'581
| Nis'580
| Nis'579
| Nis'578
| Nis'577
| Nis'576
| Nis'575
| Nis'574
| Nis'573
| Nis'572
| Nis'571
| Nis'570
| Nis'569
| Nis'568
| Nis'567
| Nis'566
| Nis'565
| Nis'564
| Nis'563
| Nis'562
| Nis'561
| Nis'560
| Nis'559
| Nis'558
| Nis'557
| Nis'556
| Nis'555
| Nis'554
| Nis'553
| Nis'552
| Nis'551
| Nis'550
| Nis'549
| Nis'548
| Nis'547
| Nis'546
| Nis'545
| Nis'544
| Nis'543
| Nis'542
| Nis'541
| Nis'540
| Nis'539
| Nis'538
| Nis'537
| Nis'536
| Nis'535
| Nis'534
| Nis'533
| Nis'532
| Nis'531
| Nis'530
| Nis'529
| Nis'528
| Nis'527
| Nis'526
| Nis'525
| Nis'524
| Nis'523
| Nis'522
| Nis'521
| Nis'520
| Nis'519
| Nis'518
| Nis'517
| Nis'516
| Nis'515
| Nis'514
| Nis'513
| Nis'512
| Nis'511
| Nis'510
| Nis'509
| Nis'508
| Nis'507
| Nis'506
| Nis'505
| Nis'504
| Nis'503
| Nis'502
| Nis'501
| Nis'500
| Nis'499
| Nis'498
| Nis'497
| Nis'496
| Nis'495
| Nis'494
| Nis'493
| Nis'492
| Nis'491
| Nis'490
| Nis'489
| Nis'488
| Nis'487
| Nis'486
| Nis'485
| Nis'484
| Nis'483
| Nis'482
| Nis'481
| Nis'480
| Nis'479
| Nis'478
| Nis'477
| Nis'476
| Nis'475
| Nis'474
| Nis'473
| Nis'472
| Nis'471
| Nis'470
| Nis'469
| Nis'468
| Nis'467
| Nis'466
| Nis'465
| Nis'464
| Nis'463
| Nis'462
| Nis'461
| Nis'460
| Nis'459
| Nis'458
| Nis'457
| Nis'456
| Nis'455
| Nis'454
| Nis'453
| Nis'452
| Nis'451
| Nis'450
| Nis'449
| Nis'448
| Nis'447
| Nis'446
| Nis'445
| Nis'444
| Nis'443
| Nis'442
| Nis'441
| Nis'440
| Nis'439
| Nis'438
| Nis'437
| Nis'436
| Nis'435
| Nis'434
| Nis'433
| Nis'432
| Nis'431
| Nis'430
| Nis'429
| Nis'428
| Nis'427
| Nis'426
| Nis'425
| Nis'424
| Nis'423
| Nis'422
| Nis'421
| Nis'420
| Nis'419
| Nis'418
| Nis'417
| Nis'416
| Nis'415
| Nis'414
| Nis'413
| Nis'412
| Nis'411
| Nis'410
| Nis'409
| Nis'408
| Nis'407
| Nis'406
| Nis'405
| Nis'404
| Nis'403
| Nis'402
| Nis'401
| Nis'400
| Nis'399
| Nis'398
| Nis'397
| Nis'396
| Nis'395
| Nis'394
| Nis'393
| Nis'392
| Nis'391
| Nis'390
| Nis'389
| Nis'388
| Nis'387
| Nis'386
| Nis'385
| Nis'384
| Nis'383
| Nis'382
| Nis'381
| Nis'380
| Nis'379
| Nis'378
| Nis'377
| Nis'376
| Nis'375
| Nis'374
| Nis'373
| Nis'372
| Nis'371
| Nis'370
| Nis'369
| Nis'368
| Nis'367
| Nis'365
| Nis'364
| Nis'363
| Nis'362
| Nis'361
| Nis'360
| Nis'359
| Nis'358
| Nis'357
| Nis'356
| Nis'355
| Nis'354
| Nis'353
| Nis'352
| Nis'351
| Nis'350
| Nis'349
| Nis'348
| Nis'347
| Nis'346
| Nis'345
| Nis'344
| Nis'343
| Nis'342
| Nis'341
| Nis'340
| Nis'339
| Nis'338
| Nis'337
| Nis'336
| Nis'335
| Nis'334
| Nis'333
| Nis'332
| Nis'331
| Nis'330
| Nis'329
| Nis'328
| Nis'327
| Nis'326
| Nis'325
| Nis'324
| Nis'323
| Nis'322
| Nis'321
| Nis'320
| Nis'319
| Nis'318
| Nis'317
| Nis'316
| Nis'315
| Nis'314
| Nis'313
| Nis'312
| Nis'311
| Nis'310
| Nis'309
| Nis'308
| Nis'307
| Nis'306
| Nis'305
| Nis'304
| Nis'303
| Nis'302
| Nis'301
| Nis'300
| Nis'299
| Nis'298
| Nis'297
| Nis'296
| Nis'295
| Nis'294
| Nis'293
| Nis'292
| Nis'291
| Nis'290
| Nis'289
| Nis'288
| Nis'287
| Nis'286
| Nis'285
| Nis'284
| Nis'283
| Nis'282
| Nis'281
| Nis'280
| Nis'279
| Nis'278
| Nis'277
| Nis'276
| Nis'275
| Nis'274
| Nis'273
| Nis'272
| Nis'271
| Nis'270
| Nis'269
| Nis'268
| Nis'267
| Nis'266
| Nis'265
| Nis'264
| Nis'263
| Nis'262
| Nis'261
| Nis'260
| Nis'259
| Nis'258
| Nis'257
| Nis'256
| Nis'255
| Nis'254
| Nis'253
| Nis'252
| Nis'251
| Nis'250
| Nis'249
| Nis'248
| Nis'247
| Nis'246
| Nis'245
| Nis'244
| Nis'243
| Nis'242
| Nis'241
| Nis'240
| Nis'239
| Nis'238
| Nis'237
| Nis'236
| Nis'235
| Nis'234
| Nis'233
| Nis'232
| Nis'231
| Nis'230
| Nis'229
| Nis'228
| Nis'227
| Nis'226
| Nis'225
| Nis'224
| Nis'223
| Nis'222
| Nis'221
| Nis'220
| Nis'219
| Nis'218
| Nis'217
| Nis'216
| Nis'215
| Nis'214
| Nis'213
| Nis'212
| Nis'211
| Nis'210
| Nis'209
| Nis'208
| Nis'207
| Nis'206
| Nis'205
| Nis'204
| Nis'203
| Nis'202
| Nis'201
| Nis'200
| Nis'199
| Nis'198
| Nis'197
| Nis'196
| Nis'195
| Nis'194
| Nis'193
| Nis'192
| Nis'191
| Nis'190
| Nis'189
| Nis'188
| Nis'187
| Nis'186
| Nis'185
| Nis'184
| Nis'183
| Nis'182
| Nis'181
| Nis'180
| Nis'179
| Nis'178
| Nis'177
| Nis'176
| Nis'175
| Nis'174
| Nis'173
| Nis'172
| Nis'171
| Nis'170
| Nis'169
| Nis'168
| Nis'167
| Nis'166
| Nis'165
| Nis'164
| Nis'163
| Nis'162
| Nis'161
| Nis'160
| Nis'159
| Nis'158
| Nis'157
| Nis'156
| Nis'155
| Nis'154
| Nis'153
| Nis'152
| Nis'151
| Nis'150
| Nis'149
| Nis'148
| Nis'147
| Nis'146
| Nis'145
| Nis'144
| Nis'143
| Nis'142
| Nis'141
| Nis'140
| Nis'139
| Nis'138
| Nis'137
| Nis'136
| Nis'135
| Nis'134
| Nis'133
| Nis'132
| Nis'131
| Nis'130
| Nis'129
| Nis'128
| Nis'127
| Nis'126
| Nis'125
| Nis'124
| Nis'123
| Nis'122
| Nis'121
| Nis'120
| Nis'119
| Nis'118
| Nis'117
| Nis'116
| Nis'115
| Nis'114
| Nis'113
| Nis'112
| Nis'111
| Nis'110
| Nis'109
| Nis'108
| Nis'107
| Nis'106
| Nis'105
| Nis'104
| Nis'103
| Nis'102
| Nis'101
| Nis'100
| Nis'99
| Nis'98
| Nis'97
| Nis'96
| Nis'95
| Nis'94
| Nis'93
| Nis'92
| Nis'91
| Nis'90
| Nis'89
| Nis'88
| Nis'87
| Nis'86
| Nis'85
| Nis'84
| Nis'83
| Nis'82
| Nis'81
| Nis'80
| Nis'79
| Nis'78
| Nis'77
| Nis'76
| Nis'75
| Nis'74
| Nis'73
| Nis'72
| Nis'71
| Nis'70
| Nis'69
| Nis'68
| Nis'67
| Nis'66
| Nis'65
| Nis'64
| Nis'63
| Nis'62
| Nis'61
| Nis'60
| Nis'59
| Nis'58
| Nis'57
| Nis'56
| Nis'55
| Nis'54
| Nis'53
| Nis'52
| Nis'51
| Nis'50
| Nis'49
| Nis'48
| Nis'47
| Nis'46
| Nis'45
| Nis'44
| Nis'43
| Nis'42
| Nis'41
| Nis'40
| Nis'39
| Nis'38
| Nis'37
| Nis'36
| Nis'35
| Nis'34
| Nis'33
| Nis'32
| Nis'31
| Nis'30
| Nis'29
| Nis'28
| Nis'27
| Nis'26
| Nis'25
| Nis'24
| Nis'23
| Nis'22
| Nis'21
| Nis'20
| Nis'19
| Nis'18
| Nis'17
| Nis'16
| Nis'15
| Nis'14
| Nis'13
| Nis'12
| Nis'11
| Nis'10
| Nis'9
| Nis'8
| Nis'7
| Nis'6
| Nis'5
| Nis'4
| Nis'3
| Nis'2
| Nis'1.
Definition noninitstate := noninitstate'.

Program Instance noninitstateNum : MenhirLib.Alphabet.Numbered noninitstate :=
  { inj := fun x => match x return _ with
    | Nis'621 => 1%positive
    | Nis'620 => 2%positive
    | Nis'619 => 3%positive
    | Nis'618 => 4%positive
    | Nis'617 => 5%positive
    | Nis'616 => 6%positive
    | Nis'615 => 7%positive
    | Nis'614 => 8%positive
    | Nis'613 => 9%positive
    | Nis'612 => 10%positive
    | Nis'611 => 11%positive
    | Nis'610 => 12%positive
    | Nis'609 => 13%positive
    | Nis'608 => 14%positive
    | Nis'607 => 15%positive
    | Nis'606 => 16%positive
    | Nis'605 => 17%positive
    | Nis'604 => 18%positive
    | Nis'603 => 19%positive
    | Nis'602 => 20%positive
    | Nis'601 => 21%positive
    | Nis'600 => 22%positive
    | Nis'599 => 23%positive
    | Nis'598 => 24%positive
    | Nis'597 => 25%positive
    | Nis'596 => 26%positive
    | Nis'595 => 27%positive
    | Nis'594 => 28%positive
    | Nis'593 => 29%positive
    | Nis'592 => 30%positive
    | Nis'591 => 31%positive
    | Nis'590 => 32%positive
    | Nis'589 => 33%positive
    | Nis'588 => 34%positive
    | Nis'587 => 35%positive
    | Nis'586 => 36%positive
    | Nis'585 => 37%positive
    | Nis'584 => 38%positive
    | Nis'583 => 39%positive
    | Nis'582 => 40%positive
    | Nis'581 => 41%positive
    | Nis'580 => 42%positive
    | Nis'579 => 43%positive
    | Nis'578 => 44%positive
    | Nis'577 => 45%positive
    | Nis'576 => 46%positive
    | Nis'575 => 47%positive
    | Nis'574 => 48%positive
    | Nis'573 => 49%positive
    | Nis'572 => 50%positive
    | Nis'571 => 51%positive
    | Nis'570 => 52%positive
    | Nis'569 => 53%positive
    | Nis'568 => 54%positive
    | Nis'567 => 55%positive
    | Nis'566 => 56%positive
    | Nis'565 => 57%positive
    | Nis'564 => 58%positive
    | Nis'563 => 59%positive
    | Nis'562 => 60%positive
    | Nis'561 => 61%positive
    | Nis'560 => 62%positive
    | Nis'559 => 63%positive
    | Nis'558 => 64%positive
    | Nis'557 => 65%positive
    | Nis'556 => 66%positive
    | Nis'555 => 67%positive
    | Nis'554 => 68%positive
    | Nis'553 => 69%positive
    | Nis'552 => 70%positive
    | Nis'551 => 71%positive
    | Nis'550 => 72%positive
    | Nis'549 => 73%positive
    | Nis'548 => 74%positive
    | Nis'547 => 75%positive
    | Nis'546 => 76%positive
    | Nis'545 => 77%positive
    | Nis'544 => 78%positive
    | Nis'543 => 79%positive
    | Nis'542 => 80%positive
    | Nis'541 => 81%positive
    | Nis'540 => 82%positive
    | Nis'539 => 83%positive
    | Nis'538 => 84%positive
    | Nis'537 => 85%positive
    | Nis'536 => 86%positive
    | Nis'535 => 87%positive
    | Nis'534 => 88%positive
    | Nis'533 => 89%positive
    | Nis'532 => 90%positive
    | Nis'531 => 91%positive
    | Nis'530 => 92%positive
    | Nis'529 => 93%positive
    | Nis'528 => 94%positive
    | Nis'527 => 95%positive
    | Nis'526 => 96%positive
    | Nis'525 => 97%positive
    | Nis'524 => 98%positive
    | Nis'523 => 99%positive
    | Nis'522 => 100%positive
    | Nis'521 => 101%positive
    | Nis'520 => 102%positive
    | Nis'519 => 103%positive
    | Nis'518 => 104%positive
    | Nis'517 => 105%positive
    | Nis'516 => 106%positive
    | Nis'515 => 107%positive
    | Nis'514 => 108%positive
    | Nis'513 => 109%positive
    | Nis'512 => 110%positive
    | Nis'511 => 111%positive
    | Nis'510 => 112%positive
    | Nis'509 => 113%positive
    | Nis'508 => 114%positive
    | Nis'507 => 115%positive
    | Nis'506 => 116%positive
    | Nis'505 => 117%positive
    | Nis'504 => 118%positive
    | Nis'503 => 119%positive
    | Nis'502 => 120%positive
    | Nis'501 => 121%positive
    | Nis'500 => 122%positive
    | Nis'499 => 123%positive
    | Nis'498 => 124%positive
    | Nis'497 => 125%positive
    | Nis'496 => 126%positive
    | Nis'495 => 127%positive
    | Nis'494 => 128%positive
    | Nis'493 => 129%positive
    | Nis'492 => 130%positive
    | Nis'491 => 131%positive
    | Nis'490 => 132%positive
    | Nis'489 => 133%positive
    | Nis'488 => 134%positive
    | Nis'487 => 135%positive
    | Nis'486 => 136%positive
    | Nis'485 => 137%positive
    | Nis'484 => 138%positive
    | Nis'483 => 139%positive
    | Nis'482 => 140%positive
    | Nis'481 => 141%positive
    | Nis'480 => 142%positive
    | Nis'479 => 143%positive
    | Nis'478 => 144%positive
    | Nis'477 => 145%positive
    | Nis'476 => 146%positive
    | Nis'475 => 147%positive
    | Nis'474 => 148%positive
    | Nis'473 => 149%positive
    | Nis'472 => 150%positive
    | Nis'471 => 151%positive
    | Nis'470 => 152%positive
    | Nis'469 => 153%positive
    | Nis'468 => 154%positive
    | Nis'467 => 155%positive
    | Nis'466 => 156%positive
    | Nis'465 => 157%positive
    | Nis'464 => 158%positive
    | Nis'463 => 159%positive
    | Nis'462 => 160%positive
    | Nis'461 => 161%positive
    | Nis'460 => 162%positive
    | Nis'459 => 163%positive
    | Nis'458 => 164%positive
    | Nis'457 => 165%positive
    | Nis'456 => 166%positive
    | Nis'455 => 167%positive
    | Nis'454 => 168%positive
    | Nis'453 => 169%positive
    | Nis'452 => 170%positive
    | Nis'451 => 171%positive
    | Nis'450 => 172%positive
    | Nis'449 => 173%positive
    | Nis'448 => 174%positive
    | Nis'447 => 175%positive
    | Nis'446 => 176%positive
    | Nis'445 => 177%positive
    | Nis'444 => 178%positive
    | Nis'443 => 179%positive
    | Nis'442 => 180%positive
    | Nis'441 => 181%positive
    | Nis'440 => 182%positive
    | Nis'439 => 183%positive
    | Nis'438 => 184%positive
    | Nis'437 => 185%positive
    | Nis'436 => 186%positive
    | Nis'435 => 187%positive
    | Nis'434 => 188%positive
    | Nis'433 => 189%positive
    | Nis'432 => 190%positive
    | Nis'431 => 191%positive
    | Nis'430 => 192%positive
    | Nis'429 => 193%positive
    | Nis'428 => 194%positive
    | Nis'427 => 195%positive
    | Nis'426 => 196%positive
    | Nis'425 => 197%positive
    | Nis'424 => 198%positive
    | Nis'423 => 199%positive
    | Nis'422 => 200%positive
    | Nis'421 => 201%positive
    | Nis'420 => 202%positive
    | Nis'419 => 203%positive
    | Nis'418 => 204%positive
    | Nis'417 => 205%positive
    | Nis'416 => 206%positive
    | Nis'415 => 207%positive
    | Nis'414 => 208%positive
    | Nis'413 => 209%positive
    | Nis'412 => 210%positive
    | Nis'411 => 211%positive
    | Nis'410 => 212%positive
    | Nis'409 => 213%positive
    | Nis'408 => 214%positive
    | Nis'407 => 215%positive
    | Nis'406 => 216%positive
    | Nis'405 => 217%positive
    | Nis'404 => 218%positive
    | Nis'403 => 219%positive
    | Nis'402 => 220%positive
    | Nis'401 => 221%positive
    | Nis'400 => 222%positive
    | Nis'399 => 223%positive
    | Nis'398 => 224%positive
    | Nis'397 => 225%positive
    | Nis'396 => 226%positive
    | Nis'395 => 227%positive
    | Nis'394 => 228%positive
    | Nis'393 => 229%positive
    | Nis'392 => 230%positive
    | Nis'391 => 231%positive
    | Nis'390 => 232%positive
    | Nis'389 => 233%positive
    | Nis'388 => 234%positive
    | Nis'387 => 235%positive
    | Nis'386 => 236%positive
    | Nis'385 => 237%positive
    | Nis'384 => 238%positive
    | Nis'383 => 239%positive
    | Nis'382 => 240%positive
    | Nis'381 => 241%positive
    | Nis'380 => 242%positive
    | Nis'379 => 243%positive
    | Nis'378 => 244%positive
    | Nis'377 => 245%positive
    | Nis'376 => 246%positive
    | Nis'375 => 247%positive
    | Nis'374 => 248%positive
    | Nis'373 => 249%positive
    | Nis'372 => 250%positive
    | Nis'371 => 251%positive
    | Nis'370 => 252%positive
    | Nis'369 => 253%positive
    | Nis'368 => 254%positive
    | Nis'367 => 255%positive
    | Nis'365 => 256%positive
    | Nis'364 => 257%positive
    | Nis'363 => 258%positive
    | Nis'362 => 259%positive
    | Nis'361 => 260%positive
    | Nis'360 => 261%positive
    | Nis'359 => 262%positive
    | Nis'358 => 263%positive
    | Nis'357 => 264%positive
    | Nis'356 => 265%positive
    | Nis'355 => 266%positive
    | Nis'354 => 267%positive
    | Nis'353 => 268%positive
    | Nis'352 => 269%positive
    | Nis'351 => 270%positive
    | Nis'350 => 271%positive
    | Nis'349 => 272%positive
    | Nis'348 => 273%positive
    | Nis'347 => 274%positive
    | Nis'346 => 275%positive
    | Nis'345 => 276%positive
    | Nis'344 => 277%positive
    | Nis'343 => 278%positive
    | Nis'342 => 279%positive
    | Nis'341 => 280%positive
    | Nis'340 => 281%positive
    | Nis'339 => 282%positive
    | Nis'338 => 283%positive
    | Nis'337 => 284%positive
    | Nis'336 => 285%positive
    | Nis'335 => 286%positive
    | Nis'334 => 287%positive
    | Nis'333 => 288%positive
    | Nis'332 => 289%positive
    | Nis'331 => 290%positive
    | Nis'330 => 291%positive
    | Nis'329 => 292%positive
    | Nis'328 => 293%positive
    | Nis'327 => 294%positive
    | Nis'326 => 295%positive
    | Nis'325 => 296%positive
    | Nis'324 => 297%positive
    | Nis'323 => 298%positive
    | Nis'322 => 299%positive
    | Nis'321 => 300%positive
    | Nis'320 => 301%positive
    | Nis'319 => 302%positive
    | Nis'318 => 303%positive
    | Nis'317 => 304%positive
    | Nis'316 => 305%positive
    | Nis'315 => 306%positive
    | Nis'314 => 307%positive
    | Nis'313 => 308%positive
    | Nis'312 => 309%positive
    | Nis'311 => 310%positive
    | Nis'310 => 311%positive
    | Nis'309 => 312%positive
    | Nis'308 => 313%positive
    | Nis'307 => 314%positive
    | Nis'306 => 315%positive
    | Nis'305 => 316%positive
    | Nis'304 => 317%positive
    | Nis'303 => 318%positive
    | Nis'302 => 319%positive
    | Nis'301 => 320%positive
    | Nis'300 => 321%positive
    | Nis'299 => 322%positive
    | Nis'298 => 323%positive
    | Nis'297 => 324%positive
    | Nis'296 => 325%positive
    | Nis'295 => 326%positive
    | Nis'294 => 327%positive
    | Nis'293 => 328%positive
    | Nis'292 => 329%positive
    | Nis'291 => 330%positive
    | Nis'290 => 331%positive
    | Nis'289 => 332%positive
    | Nis'288 => 333%positive
    | Nis'287 => 334%positive
    | Nis'286 => 335%positive
    | Nis'285 => 336%positive
    | Nis'284 => 337%positive
    | Nis'283 => 338%positive
    | Nis'282 => 339%positive
    | Nis'281 => 340%positive
    | Nis'280 => 341%positive
    | Nis'279 => 342%positive
    | Nis'278 => 343%positive
    | Nis'277 => 344%positive
    | Nis'276 => 345%positive
    | Nis'275 => 346%positive
    | Nis'274 => 347%positive
    | Nis'273 => 348%positive
    | Nis'272 => 349%positive
    | Nis'271 => 350%positive
    | Nis'270 => 351%positive
    | Nis'269 => 352%positive
    | Nis'268 => 353%positive
    | Nis'267 => 354%positive
    | Nis'266 => 355%positive
    | Nis'265 => 356%positive
    | Nis'264 => 357%positive
    | Nis'263 => 358%positive
    | Nis'262 => 359%positive
    | Nis'261 => 360%positive
    | Nis'260 => 361%positive
    | Nis'259 => 362%positive
    | Nis'258 => 363%positive
    | Nis'257 => 364%positive
    | Nis'256 => 365%positive
    | Nis'255 => 366%positive
    | Nis'254 => 367%positive
    | Nis'253 => 368%positive
    | Nis'252 => 369%positive
    | Nis'251 => 370%positive
    | Nis'250 => 371%positive
    | Nis'249 => 372%positive
    | Nis'248 => 373%positive
    | Nis'247 => 374%positive
    | Nis'246 => 375%positive
    | Nis'245 => 376%positive
    | Nis'244 => 377%positive
    | Nis'243 => 378%positive
    | Nis'242 => 379%positive
    | Nis'241 => 380%positive
    | Nis'240 => 381%positive
    | Nis'239 => 382%positive
    | Nis'238 => 383%positive
    | Nis'237 => 384%positive
    | Nis'236 => 385%positive
    | Nis'235 => 386%positive
    | Nis'234 => 387%positive
    | Nis'233 => 388%positive
    | Nis'232 => 389%positive
    | Nis'231 => 390%positive
    | Nis'230 => 391%positive
    | Nis'229 => 392%positive
    | Nis'228 => 393%positive
    | Nis'227 => 394%positive
    | Nis'226 => 395%positive
    | Nis'225 => 396%positive
    | Nis'224 => 397%positive
    | Nis'223 => 398%positive
    | Nis'222 => 399%positive
    | Nis'221 => 400%positive
    | Nis'220 => 401%positive
    | Nis'219 => 402%positive
    | Nis'218 => 403%positive
    | Nis'217 => 404%positive
    | Nis'216 => 405%positive
    | Nis'215 => 406%positive
    | Nis'214 => 407%positive
    | Nis'213 => 408%positive
    | Nis'212 => 409%positive
    | Nis'211 => 410%positive
    | Nis'210 => 411%positive
    | Nis'209 => 412%positive
    | Nis'208 => 413%positive
    | Nis'207 => 414%positive
    | Nis'206 => 415%positive
    | Nis'205 => 416%positive
    | Nis'204 => 417%positive
    | Nis'203 => 418%positive
    | Nis'202 => 419%positive
    | Nis'201 => 420%positive
    | Nis'200 => 421%positive
    | Nis'199 => 422%positive
    | Nis'198 => 423%positive
    | Nis'197 => 424%positive
    | Nis'196 => 425%positive
    | Nis'195 => 426%positive
    | Nis'194 => 427%positive
    | Nis'193 => 428%positive
    | Nis'192 => 429%positive
    | Nis'191 => 430%positive
    | Nis'190 => 431%positive
    | Nis'189 => 432%positive
    | Nis'188 => 433%positive
    | Nis'187 => 434%positive
    | Nis'186 => 435%positive
    | Nis'185 => 436%positive
    | Nis'184 => 437%positive
    | Nis'183 => 438%positive
    | Nis'182 => 439%positive
    | Nis'181 => 440%positive
    | Nis'180 => 441%positive
    | Nis'179 => 442%positive
    | Nis'178 => 443%positive
    | Nis'177 => 444%positive
    | Nis'176 => 445%positive
    | Nis'175 => 446%positive
    | Nis'174 => 447%positive
    | Nis'173 => 448%positive
    | Nis'172 => 449%positive
    | Nis'171 => 450%positive
    | Nis'170 => 451%positive
    | Nis'169 => 452%positive
    | Nis'168 => 453%positive
    | Nis'167 => 454%positive
    | Nis'166 => 455%positive
    | Nis'165 => 456%positive
    | Nis'164 => 457%positive
    | Nis'163 => 458%positive
    | Nis'162 => 459%positive
    | Nis'161 => 460%positive
    | Nis'160 => 461%positive
    | Nis'159 => 462%positive
    | Nis'158 => 463%positive
    | Nis'157 => 464%positive
    | Nis'156 => 465%positive
    | Nis'155 => 466%positive
    | Nis'154 => 467%positive
    | Nis'153 => 468%positive
    | Nis'152 => 469%positive
    | Nis'151 => 470%positive
    | Nis'150 => 471%positive
    | Nis'149 => 472%positive
    | Nis'148 => 473%positive
    | Nis'147 => 474%positive
    | Nis'146 => 475%positive
    | Nis'145 => 476%positive
    | Nis'144 => 477%positive
    | Nis'143 => 478%positive
    | Nis'142 => 479%positive
    | Nis'141 => 480%positive
    | Nis'140 => 481%positive
    | Nis'139 => 482%positive
    | Nis'138 => 483%positive
    | Nis'137 => 484%positive
    | Nis'136 => 485%positive
    | Nis'135 => 486%positive
    | Nis'134 => 487%positive
    | Nis'133 => 488%positive
    | Nis'132 => 489%positive
    | Nis'131 => 490%positive
    | Nis'130 => 491%positive
    | Nis'129 => 492%positive
    | Nis'128 => 493%positive
    | Nis'127 => 494%positive
    | Nis'126 => 495%positive
    | Nis'125 => 496%positive
    | Nis'124 => 497%positive
    | Nis'123 => 498%positive
    | Nis'122 => 499%positive
    | Nis'121 => 500%positive
    | Nis'120 => 501%positive
    | Nis'119 => 502%positive
    | Nis'118 => 503%positive
    | Nis'117 => 504%positive
    | Nis'116 => 505%positive
    | Nis'115 => 506%positive
    | Nis'114 => 507%positive
    | Nis'113 => 508%positive
    | Nis'112 => 509%positive
    | Nis'111 => 510%positive
    | Nis'110 => 511%positive
    | Nis'109 => 512%positive
    | Nis'108 => 513%positive
    | Nis'107 => 514%positive
    | Nis'106 => 515%positive
    | Nis'105 => 516%positive
    | Nis'104 => 517%positive
    | Nis'103 => 518%positive
    | Nis'102 => 519%positive
    | Nis'101 => 520%positive
    | Nis'100 => 521%positive
    | Nis'99 => 522%positive
    | Nis'98 => 523%positive
    | Nis'97 => 524%positive
    | Nis'96 => 525%positive
    | Nis'95 => 526%positive
    | Nis'94 => 527%positive
    | Nis'93 => 528%positive
    | Nis'92 => 529%positive
    | Nis'91 => 530%positive
    | Nis'90 => 531%positive
    | Nis'89 => 532%positive
    | Nis'88 => 533%positive
    | Nis'87 => 534%positive
    | Nis'86 => 535%positive
    | Nis'85 => 536%positive
    | Nis'84 => 537%positive
    | Nis'83 => 538%positive
    | Nis'82 => 539%positive
    | Nis'81 => 540%positive
    | Nis'80 => 541%positive
    | Nis'79 => 542%positive
    | Nis'78 => 543%positive
    | Nis'77 => 544%positive
    | Nis'76 => 545%positive
    | Nis'75 => 546%positive
    | Nis'74 => 547%positive
    | Nis'73 => 548%positive
    | Nis'72 => 549%positive
    | Nis'71 => 550%positive
    | Nis'70 => 551%positive
    | Nis'69 => 552%positive
    | Nis'68 => 553%positive
    | Nis'67 => 554%positive
    | Nis'66 => 555%positive
    | Nis'65 => 556%positive
    | Nis'64 => 557%positive
    | Nis'63 => 558%positive
    | Nis'62 => 559%positive
    | Nis'61 => 560%positive
    | Nis'60 => 561%positive
    | Nis'59 => 562%positive
    | Nis'58 => 563%positive
    | Nis'57 => 564%positive
    | Nis'56 => 565%positive
    | Nis'55 => 566%positive
    | Nis'54 => 567%positive
    | Nis'53 => 568%positive
    | Nis'52 => 569%positive
    | Nis'51 => 570%positive
    | Nis'50 => 571%positive
    | Nis'49 => 572%positive
    | Nis'48 => 573%positive
    | Nis'47 => 574%positive
    | Nis'46 => 575%positive
    | Nis'45 => 576%positive
    | Nis'44 => 577%positive
    | Nis'43 => 578%positive
    | Nis'42 => 579%positive
    | Nis'41 => 580%positive
    | Nis'40 => 581%positive
    | Nis'39 => 582%positive
    | Nis'38 => 583%positive
    | Nis'37 => 584%positive
    | Nis'36 => 585%positive
    | Nis'35 => 586%positive
    | Nis'34 => 587%positive
    | Nis'33 => 588%positive
    | Nis'32 => 589%positive
    | Nis'31 => 590%positive
    | Nis'30 => 591%positive
    | Nis'29 => 592%positive
    | Nis'28 => 593%positive
    | Nis'27 => 594%positive
    | Nis'26 => 595%positive
    | Nis'25 => 596%positive
    | Nis'24 => 597%positive
    | Nis'23 => 598%positive
    | Nis'22 => 599%positive
    | Nis'21 => 600%positive
    | Nis'20 => 601%positive
    | Nis'19 => 602%positive
    | Nis'18 => 603%positive
    | Nis'17 => 604%positive
    | Nis'16 => 605%positive
    | Nis'15 => 606%positive
    | Nis'14 => 607%positive
    | Nis'13 => 608%positive
    | Nis'12 => 609%positive
    | Nis'11 => 610%positive
    | Nis'10 => 611%positive
    | Nis'9 => 612%positive
    | Nis'8 => 613%positive
    | Nis'7 => 614%positive
    | Nis'6 => 615%positive
    | Nis'5 => 616%positive
    | Nis'4 => 617%positive
    | Nis'3 => 618%positive
    | Nis'2 => 619%positive
    | Nis'1 => 620%positive
    end;
    surj := (fun n => match n return _ with
    | 1%positive => Nis'621
    | 2%positive => Nis'620
    | 3%positive => Nis'619
    | 4%positive => Nis'618
    | 5%positive => Nis'617
    | 6%positive => Nis'616
    | 7%positive => Nis'615
    | 8%positive => Nis'614
    | 9%positive => Nis'613
    | 10%positive => Nis'612
    | 11%positive => Nis'611
    | 12%positive => Nis'610
    | 13%positive => Nis'609
    | 14%positive => Nis'608
    | 15%positive => Nis'607
    | 16%positive => Nis'606
    | 17%positive => Nis'605
    | 18%positive => Nis'604
    | 19%positive => Nis'603
    | 20%positive => Nis'602
    | 21%positive => Nis'601
    | 22%positive => Nis'600
    | 23%positive => Nis'599
    | 24%positive => Nis'598
    | 25%positive => Nis'597
    | 26%positive => Nis'596
    | 27%positive => Nis'595
    | 28%positive => Nis'594
    | 29%positive => Nis'593
    | 30%positive => Nis'592
    | 31%positive => Nis'591
    | 32%positive => Nis'590
    | 33%positive => Nis'589
    | 34%positive => Nis'588
    | 35%positive => Nis'587
    | 36%positive => Nis'586
    | 37%positive => Nis'585
    | 38%positive => Nis'584
    | 39%positive => Nis'583
    | 40%positive => Nis'582
    | 41%positive => Nis'581
    | 42%positive => Nis'580
    | 43%positive => Nis'579
    | 44%positive => Nis'578
    | 45%positive => Nis'577
    | 46%positive => Nis'576
    | 47%positive => Nis'575
    | 48%positive => Nis'574
    | 49%positive => Nis'573
    | 50%positive => Nis'572
    | 51%positive => Nis'571
    | 52%positive => Nis'570
    | 53%positive => Nis'569
    | 54%positive => Nis'568
    | 55%positive => Nis'567
    | 56%positive => Nis'566
    | 57%positive => Nis'565
    | 58%positive => Nis'564
    | 59%positive => Nis'563
    | 60%positive => Nis'562
    | 61%positive => Nis'561
    | 62%positive => Nis'560
    | 63%positive => Nis'559
    | 64%positive => Nis'558
    | 65%positive => Nis'557
    | 66%positive => Nis'556
    | 67%positive => Nis'555
    | 68%positive => Nis'554
    | 69%positive => Nis'553
    | 70%positive => Nis'552
    | 71%positive => Nis'551
    | 72%positive => Nis'550
    | 73%positive => Nis'549
    | 74%positive => Nis'548
    | 75%positive => Nis'547
    | 76%positive => Nis'546
    | 77%positive => Nis'545
    | 78%positive => Nis'544
    | 79%positive => Nis'543
    | 80%positive => Nis'542
    | 81%positive => Nis'541
    | 82%positive => Nis'540
    | 83%positive => Nis'539
    | 84%positive => Nis'538
    | 85%positive => Nis'537
    | 86%positive => Nis'536
    | 87%positive => Nis'535
    | 88%positive => Nis'534
    | 89%positive => Nis'533
    | 90%positive => Nis'532
    | 91%positive => Nis'531
    | 92%positive => Nis'530
    | 93%positive => Nis'529
    | 94%positive => Nis'528
    | 95%positive => Nis'527
    | 96%positive => Nis'526
    | 97%positive => Nis'525
    | 98%positive => Nis'524
    | 99%positive => Nis'523
    | 100%positive => Nis'522
    | 101%positive => Nis'521
    | 102%positive => Nis'520
    | 103%positive => Nis'519
    | 104%positive => Nis'518
    | 105%positive => Nis'517
    | 106%positive => Nis'516
    | 107%positive => Nis'515
    | 108%positive => Nis'514
    | 109%positive => Nis'513
    | 110%positive => Nis'512
    | 111%positive => Nis'511
    | 112%positive => Nis'510
    | 113%positive => Nis'509
    | 114%positive => Nis'508
    | 115%positive => Nis'507
    | 116%positive => Nis'506
    | 117%positive => Nis'505
    | 118%positive => Nis'504
    | 119%positive => Nis'503
    | 120%positive => Nis'502
    | 121%positive => Nis'501
    | 122%positive => Nis'500
    | 123%positive => Nis'499
    | 124%positive => Nis'498
    | 125%positive => Nis'497
    | 126%positive => Nis'496
    | 127%positive => Nis'495
    | 128%positive => Nis'494
    | 129%positive => Nis'493
    | 130%positive => Nis'492
    | 131%positive => Nis'491
    | 132%positive => Nis'490
    | 133%positive => Nis'489
    | 134%positive => Nis'488
    | 135%positive => Nis'487
    | 136%positive => Nis'486
    | 137%positive => Nis'485
    | 138%positive => Nis'484
    | 139%positive => Nis'483
    | 140%positive => Nis'482
    | 141%positive => Nis'481
    | 142%positive => Nis'480
    | 143%positive => Nis'479
    | 144%positive => Nis'478
    | 145%positive => Nis'477
    | 146%positive => Nis'476
    | 147%positive => Nis'475
    | 148%positive => Nis'474
    | 149%positive => Nis'473
    | 150%positive => Nis'472
    | 151%positive => Nis'471
    | 152%positive => Nis'470
    | 153%positive => Nis'469
    | 154%positive => Nis'468
    | 155%positive => Nis'467
    | 156%positive => Nis'466
    | 157%positive => Nis'465
    | 158%positive => Nis'464
    | 159%positive => Nis'463
    | 160%positive => Nis'462
    | 161%positive => Nis'461
    | 162%positive => Nis'460
    | 163%positive => Nis'459
    | 164%positive => Nis'458
    | 165%positive => Nis'457
    | 166%positive => Nis'456
    | 167%positive => Nis'455
    | 168%positive => Nis'454
    | 169%positive => Nis'453
    | 170%positive => Nis'452
    | 171%positive => Nis'451
    | 172%positive => Nis'450
    | 173%positive => Nis'449
    | 174%positive => Nis'448
    | 175%positive => Nis'447
    | 176%positive => Nis'446
    | 177%positive => Nis'445
    | 178%positive => Nis'444
    | 179%positive => Nis'443
    | 180%positive => Nis'442
    | 181%positive => Nis'441
    | 182%positive => Nis'440
    | 183%positive => Nis'439
    | 184%positive => Nis'438
    | 185%positive => Nis'437
    | 186%positive => Nis'436
    | 187%positive => Nis'435
    | 188%positive => Nis'434
    | 189%positive => Nis'433
    | 190%positive => Nis'432
    | 191%positive => Nis'431
    | 192%positive => Nis'430
    | 193%positive => Nis'429
    | 194%positive => Nis'428
    | 195%positive => Nis'427
    | 196%positive => Nis'426
    | 197%positive => Nis'425
    | 198%positive => Nis'424
    | 199%positive => Nis'423
    | 200%positive => Nis'422
    | 201%positive => Nis'421
    | 202%positive => Nis'420
    | 203%positive => Nis'419
    | 204%positive => Nis'418
    | 205%positive => Nis'417
    | 206%positive => Nis'416
    | 207%positive => Nis'415
    | 208%positive => Nis'414
    | 209%positive => Nis'413
    | 210%positive => Nis'412
    | 211%positive => Nis'411
    | 212%positive => Nis'410
    | 213%positive => Nis'409
    | 214%positive => Nis'408
    | 215%positive => Nis'407
    | 216%positive => Nis'406
    | 217%positive => Nis'405
    | 218%positive => Nis'404
    | 219%positive => Nis'403
    | 220%positive => Nis'402
    | 221%positive => Nis'401
    | 222%positive => Nis'400
    | 223%positive => Nis'399
    | 224%positive => Nis'398
    | 225%positive => Nis'397
    | 226%positive => Nis'396
    | 227%positive => Nis'395
    | 228%positive => Nis'394
    | 229%positive => Nis'393
    | 230%positive => Nis'392
    | 231%positive => Nis'391
    | 232%positive => Nis'390
    | 233%positive => Nis'389
    | 234%positive => Nis'388
    | 235%positive => Nis'387
    | 236%positive => Nis'386
    | 237%positive => Nis'385
    | 238%positive => Nis'384
    | 239%positive => Nis'383
    | 240%positive => Nis'382
    | 241%positive => Nis'381
    | 242%positive => Nis'380
    | 243%positive => Nis'379
    | 244%positive => Nis'378
    | 245%positive => Nis'377
    | 246%positive => Nis'376
    | 247%positive => Nis'375
    | 248%positive => Nis'374
    | 249%positive => Nis'373
    | 250%positive => Nis'372
    | 251%positive => Nis'371
    | 252%positive => Nis'370
    | 253%positive => Nis'369
    | 254%positive => Nis'368
    | 255%positive => Nis'367
    | 256%positive => Nis'365
    | 257%positive => Nis'364
    | 258%positive => Nis'363
    | 259%positive => Nis'362
    | 260%positive => Nis'361
    | 261%positive => Nis'360
    | 262%positive => Nis'359
    | 263%positive => Nis'358
    | 264%positive => Nis'357
    | 265%positive => Nis'356
    | 266%positive => Nis'355
    | 267%positive => Nis'354
    | 268%positive => Nis'353
    | 269%positive => Nis'352
    | 270%positive => Nis'351
    | 271%positive => Nis'350
    | 272%positive => Nis'349
    | 273%positive => Nis'348
    | 274%positive => Nis'347
    | 275%positive => Nis'346
    | 276%positive => Nis'345
    | 277%positive => Nis'344
    | 278%positive => Nis'343
    | 279%positive => Nis'342
    | 280%positive => Nis'341
    | 281%positive => Nis'340
    | 282%positive => Nis'339
    | 283%positive => Nis'338
    | 284%positive => Nis'337
    | 285%positive => Nis'336
    | 286%positive => Nis'335
    | 287%positive => Nis'334
    | 288%positive => Nis'333
    | 289%positive => Nis'332
    | 290%positive => Nis'331
    | 291%positive => Nis'330
    | 292%positive => Nis'329
    | 293%positive => Nis'328
    | 294%positive => Nis'327
    | 295%positive => Nis'326
    | 296%positive => Nis'325
    | 297%positive => Nis'324
    | 298%positive => Nis'323
    | 299%positive => Nis'322
    | 300%positive => Nis'321
    | 301%positive => Nis'320
    | 302%positive => Nis'319
    | 303%positive => Nis'318
    | 304%positive => Nis'317
    | 305%positive => Nis'316
    | 306%positive => Nis'315
    | 307%positive => Nis'314
    | 308%positive => Nis'313
    | 309%positive => Nis'312
    | 310%positive => Nis'311
    | 311%positive => Nis'310
    | 312%positive => Nis'309
    | 313%positive => Nis'308
    | 314%positive => Nis'307
    | 315%positive => Nis'306
    | 316%positive => Nis'305
    | 317%positive => Nis'304
    | 318%positive => Nis'303
    | 319%positive => Nis'302
    | 320%positive => Nis'301
    | 321%positive => Nis'300
    | 322%positive => Nis'299
    | 323%positive => Nis'298
    | 324%positive => Nis'297
    | 325%positive => Nis'296
    | 326%positive => Nis'295
    | 327%positive => Nis'294
    | 328%positive => Nis'293
    | 329%positive => Nis'292
    | 330%positive => Nis'291
    | 331%positive => Nis'290
    | 332%positive => Nis'289
    | 333%positive => Nis'288
    | 334%positive => Nis'287
    | 335%positive => Nis'286
    | 336%positive => Nis'285
    | 337%positive => Nis'284
    | 338%positive => Nis'283
    | 339%positive => Nis'282
    | 340%positive => Nis'281
    | 341%positive => Nis'280
    | 342%positive => Nis'279
    | 343%positive => Nis'278
    | 344%positive => Nis'277
    | 345%positive => Nis'276
    | 346%positive => Nis'275
    | 347%positive => Nis'274
    | 348%positive => Nis'273
    | 349%positive => Nis'272
    | 350%positive => Nis'271
    | 351%positive => Nis'270
    | 352%positive => Nis'269
    | 353%positive => Nis'268
    | 354%positive => Nis'267
    | 355%positive => Nis'266
    | 356%positive => Nis'265
    | 357%positive => Nis'264
    | 358%positive => Nis'263
    | 359%positive => Nis'262
    | 360%positive => Nis'261
    | 361%positive => Nis'260
    | 362%positive => Nis'259
    | 363%positive => Nis'258
    | 364%positive => Nis'257
    | 365%positive => Nis'256
    | 366%positive => Nis'255
    | 367%positive => Nis'254
    | 368%positive => Nis'253
    | 369%positive => Nis'252
    | 370%positive => Nis'251
    | 371%positive => Nis'250
    | 372%positive => Nis'249
    | 373%positive => Nis'248
    | 374%positive => Nis'247
    | 375%positive => Nis'246
    | 376%positive => Nis'245
    | 377%positive => Nis'244
    | 378%positive => Nis'243
    | 379%positive => Nis'242
    | 380%positive => Nis'241
    | 381%positive => Nis'240
    | 382%positive => Nis'239
    | 383%positive => Nis'238
    | 384%positive => Nis'237
    | 385%positive => Nis'236
    | 386%positive => Nis'235
    | 387%positive => Nis'234
    | 388%positive => Nis'233
    | 389%positive => Nis'232
    | 390%positive => Nis'231
    | 391%positive => Nis'230
    | 392%positive => Nis'229
    | 393%positive => Nis'228
    | 394%positive => Nis'227
    | 395%positive => Nis'226
    | 396%positive => Nis'225
    | 397%positive => Nis'224
    | 398%positive => Nis'223
    | 399%positive => Nis'222
    | 400%positive => Nis'221
    | 401%positive => Nis'220
    | 402%positive => Nis'219
    | 403%positive => Nis'218
    | 404%positive => Nis'217
    | 405%positive => Nis'216
    | 406%positive => Nis'215
    | 407%positive => Nis'214
    | 408%positive => Nis'213
    | 409%positive => Nis'212
    | 410%positive => Nis'211
    | 411%positive => Nis'210
    | 412%positive => Nis'209
    | 413%positive => Nis'208
    | 414%positive => Nis'207
    | 415%positive => Nis'206
    | 416%positive => Nis'205
    | 417%positive => Nis'204
    | 418%positive => Nis'203
    | 419%positive => Nis'202
    | 420%positive => Nis'201
    | 421%positive => Nis'200
    | 422%positive => Nis'199
    | 423%positive => Nis'198
    | 424%positive => Nis'197
    | 425%positive => Nis'196
    | 426%positive => Nis'195
    | 427%positive => Nis'194
    | 428%positive => Nis'193
    | 429%positive => Nis'192
    | 430%positive => Nis'191
    | 431%positive => Nis'190
    | 432%positive => Nis'189
    | 433%positive => Nis'188
    | 434%positive => Nis'187
    | 435%positive => Nis'186
    | 436%positive => Nis'185
    | 437%positive => Nis'184
    | 438%positive => Nis'183
    | 439%positive => Nis'182
    | 440%positive => Nis'181
    | 441%positive => Nis'180
    | 442%positive => Nis'179
    | 443%positive => Nis'178
    | 444%positive => Nis'177
    | 445%positive => Nis'176
    | 446%positive => Nis'175
    | 447%positive => Nis'174
    | 448%positive => Nis'173
    | 449%positive => Nis'172
    | 450%positive => Nis'171
    | 451%positive => Nis'170
    | 452%positive => Nis'169
    | 453%positive => Nis'168
    | 454%positive => Nis'167
    | 455%positive => Nis'166
    | 456%positive => Nis'165
    | 457%positive => Nis'164
    | 458%positive => Nis'163
    | 459%positive => Nis'162
    | 460%positive => Nis'161
    | 461%positive => Nis'160
    | 462%positive => Nis'159
    | 463%positive => Nis'158
    | 464%positive => Nis'157
    | 465%positive => Nis'156
    | 466%positive => Nis'155
    | 467%positive => Nis'154
    | 468%positive => Nis'153
    | 469%positive => Nis'152
    | 470%positive => Nis'151
    | 471%positive => Nis'150
    | 472%positive => Nis'149
    | 473%positive => Nis'148
    | 474%positive => Nis'147
    | 475%positive => Nis'146
    | 476%positive => Nis'145
    | 477%positive => Nis'144
    | 478%positive => Nis'143
    | 479%positive => Nis'142
    | 480%positive => Nis'141
    | 481%positive => Nis'140
    | 482%positive => Nis'139
    | 483%positive => Nis'138
    | 484%positive => Nis'137
    | 485%positive => Nis'136
    | 486%positive => Nis'135
    | 487%positive => Nis'134
    | 488%positive => Nis'133
    | 489%positive => Nis'132
    | 490%positive => Nis'131
    | 491%positive => Nis'130
    | 492%positive => Nis'129
    | 493%positive => Nis'128
    | 494%positive => Nis'127
    | 495%positive => Nis'126
    | 496%positive => Nis'125
    | 497%positive => Nis'124
    | 498%positive => Nis'123
    | 499%positive => Nis'122
    | 500%positive => Nis'121
    | 501%positive => Nis'120
    | 502%positive => Nis'119
    | 503%positive => Nis'118
    | 504%positive => Nis'117
    | 505%positive => Nis'116
    | 506%positive => Nis'115
    | 507%positive => Nis'114
    | 508%positive => Nis'113
    | 509%positive => Nis'112
    | 510%positive => Nis'111
    | 511%positive => Nis'110
    | 512%positive => Nis'109
    | 513%positive => Nis'108
    | 514%positive => Nis'107
    | 515%positive => Nis'106
    | 516%positive => Nis'105
    | 517%positive => Nis'104
    | 518%positive => Nis'103
    | 519%positive => Nis'102
    | 520%positive => Nis'101
    | 521%positive => Nis'100
    | 522%positive => Nis'99
    | 523%positive => Nis'98
    | 524%positive => Nis'97
    | 525%positive => Nis'96
    | 526%positive => Nis'95
    | 527%positive => Nis'94
    | 528%positive => Nis'93
    | 529%positive => Nis'92
    | 530%positive => Nis'91
    | 531%positive => Nis'90
    | 532%positive => Nis'89
    | 533%positive => Nis'88
    | 534%positive => Nis'87
    | 535%positive => Nis'86
    | 536%positive => Nis'85
    | 537%positive => Nis'84
    | 538%positive => Nis'83
    | 539%positive => Nis'82
    | 540%positive => Nis'81
    | 541%positive => Nis'80
    | 542%positive => Nis'79
    | 543%positive => Nis'78
    | 544%positive => Nis'77
    | 545%positive => Nis'76
    | 546%positive => Nis'75
    | 547%positive => Nis'74
    | 548%positive => Nis'73
    | 549%positive => Nis'72
    | 550%positive => Nis'71
    | 551%positive => Nis'70
    | 552%positive => Nis'69
    | 553%positive => Nis'68
    | 554%positive => Nis'67
    | 555%positive => Nis'66
    | 556%positive => Nis'65
    | 557%positive => Nis'64
    | 558%positive => Nis'63
    | 559%positive => Nis'62
    | 560%positive => Nis'61
    | 561%positive => Nis'60
    | 562%positive => Nis'59
    | 563%positive => Nis'58
    | 564%positive => Nis'57
    | 565%positive => Nis'56
    | 566%positive => Nis'55
    | 567%positive => Nis'54
    | 568%positive => Nis'53
    | 569%positive => Nis'52
    | 570%positive => Nis'51
    | 571%positive => Nis'50
    | 572%positive => Nis'49
    | 573%positive => Nis'48
    | 574%positive => Nis'47
    | 575%positive => Nis'46
    | 576%positive => Nis'45
    | 577%positive => Nis'44
    | 578%positive => Nis'43
    | 579%positive => Nis'42
    | 580%positive => Nis'41
    | 581%positive => Nis'40
    | 582%positive => Nis'39
    | 583%positive => Nis'38
    | 584%positive => Nis'37
    | 585%positive => Nis'36
    | 586%positive => Nis'35
    | 587%positive => Nis'34
    | 588%positive => Nis'33
    | 589%positive => Nis'32
    | 590%positive => Nis'31
    | 591%positive => Nis'30
    | 592%positive => Nis'29
    | 593%positive => Nis'28
    | 594%positive => Nis'27
    | 595%positive => Nis'26
    | 596%positive => Nis'25
    | 597%positive => Nis'24
    | 598%positive => Nis'23
    | 599%positive => Nis'22
    | 600%positive => Nis'21
    | 601%positive => Nis'20
    | 602%positive => Nis'19
    | 603%positive => Nis'18
    | 604%positive => Nis'17
    | 605%positive => Nis'16
    | 606%positive => Nis'15
    | 607%positive => Nis'14
    | 608%positive => Nis'13
    | 609%positive => Nis'12
    | 610%positive => Nis'11
    | 611%positive => Nis'10
    | 612%positive => Nis'9
    | 613%positive => Nis'8
    | 614%positive => Nis'7
    | 615%positive => Nis'6
    | 616%positive => Nis'5
    | 617%positive => Nis'4
    | 618%positive => Nis'3
    | 619%positive => Nis'2
    | 620%positive => Nis'1
    | _ => Nis'621
    end)%Z;
    inj_bound := 620%positive }.
Instance NonInitStateAlph : MenhirLib.Alphabet.Alphabet noninitstate := _.

Definition last_symb_of_non_init_state (noninitstate:noninitstate) : symbol :=
  match noninitstate with
  | Nis'1 => T VOLATILE't
  | Nis'2 => T VOID't
  | Nis'3 => T UNSIGNED't
  | Nis'4 => T UNION't
  | Nis'5 => T UNDERSCORE_BOOL't
  | Nis'6 => T TYPEDEF_NAME't
  | Nis'7 => T TYPEDEF't
  | Nis'8 => T STRUCT't
  | Nis'9 => T STATIC_ASSERT't
  | Nis'10 => T LPAREN't
  | Nis'11 => T VAR_NAME't
  | Nis'12 => T TILDE't
  | Nis'13 => T STRING_LITERAL't
  | Nis'14 => T STAR't
  | Nis'15 => T SIZEOF't
  | Nis'16 => T PLUS't
  | Nis'17 => T MINUS't
  | Nis'18 => T LPAREN't
  | Nis'19 => T SIGNED't
  | Nis'20 => T SHORT't
  | Nis'21 => T RESTRICT't
  | Nis'22 => T PACKED't
  | Nis'23 => T LPAREN't
  | Nis'24 => T LPAREN't
  | Nis'25 => T LONG't
  | Nis'26 => T INT't
  | Nis'27 => T INC't
  | Nis'28 => T LPAREN't
  | Nis'29 => T FLOAT't
  | Nis'30 => T ENUM't
  | Nis'31 => T ATTRIBUTE't
  | Nis'32 => T LPAREN't
  | Nis'33 => T LPAREN't
  | Nis'34 => T PACKED't
  | Nis'35 => T OTHER_NAME't
  | Nis'36 => T CONST't
  | Nis'37 => NT gcc_attribute_word'nt
  | Nis'38 => T LPAREN't
  | Nis'39 => T RPAREN't
  | Nis'40 => T DEC't
  | Nis'41 => T CONSTANT't
  | Nis'42 => T BUILTIN_VA_ARG't
  | Nis'43 => T LPAREN't
  | Nis'44 => T BUILTIN_OFFSETOF't
  | Nis'45 => T LPAREN't
  | Nis'46 => T DOUBLE't
  | Nis'47 => T CONST't
  | Nis'48 => T CHAR't
  | Nis'49 => T ALIGNAS't
  | Nis'50 => T LPAREN't
  | Nis'51 => T BANG't
  | Nis'52 => T AND't
  | Nis'53 => T ALIGNOF't
  | Nis'54 => T LPAREN't
  | Nis'55 => NT type_specifier'nt
  | Nis'56 => NT type_qualifier_noattr'nt
  | Nis'57 => NT type_qualifier'nt
  | Nis'58 => NT struct_or_union_specifier'nt
  | Nis'59 => NT struct_or_union'nt
  | Nis'60 => NT attribute_specifier_list'nt
  | Nis'61 => T OTHER_NAME't
  | Nis'62 => T LBRACE't
  | Nis'63 => NT struct_declaration_list'nt
  | Nis'64 => T RBRACE't
  | Nis'65 => NT struct_declaration'nt
  | Nis'66 => NT static_assert_declaration'nt
  | Nis'67 => NT specifier_qualifier_list'nt
  | Nis'68 => T VAR_NAME't
  | Nis'69 => T STAR't
  | Nis'70 => NT type_qualifier_list'nt
  | Nis'71 => NT type_qualifier'nt
  | Nis'72 => NT pointer'nt
  | Nis'73 => NT attribute_specifier'nt
  | Nis'74 => NT type_qualifier'nt
  | Nis'75 => NT pointer'nt
  | Nis'76 => T SEMICOLON't
  | Nis'77 => T LPAREN't
  | Nis'78 => NT pointer'nt
  | Nis'79 => NT direct_declarator'nt
  | Nis'80 => T LPAREN't
  | Nis'81 => T VAR_NAME't
  | Nis'82 => T STATIC't
  | Nis'83 => T RPAREN't
  | Nis'84 => T REGISTER't
  | Nis'85 => T NORETURN't
  | Nis'86 => T INLINE't
  | Nis'87 => T EXTERN't
  | Nis'88 => T AUTO't
  | Nis'89 => NT type_specifier'nt
  | Nis'90 => NT type_specifier'nt
  | Nis'91 => NT type_qualifier'nt
  | Nis'92 => NT storage_class_specifier'nt
  | Nis'93 => NT function_specifier'nt
  | Nis'94 => NT enum_specifier'nt
  | Nis'95 => NT declaration_specifiers_typespec_opt'nt
  | Nis'96 => NT declaration_specifiers_typespec_opt'nt
  | Nis'97 => NT declaration_specifiers_typespec_opt'nt
  | Nis'98 => NT declaration_specifiers_typespec_opt'nt
  | Nis'99 => NT declaration_specifiers_typespec_opt'nt
  | Nis'100 => NT type_qualifier_noattr'nt
  | Nis'101 => NT storage_class_specifier'nt
  | Nis'102 => NT function_specifier'nt
  | Nis'103 => NT declaration_specifiers'nt
  | Nis'104 => NT attribute_specifier'nt
  | Nis'105 => NT declaration_specifiers'nt
  | Nis'106 => NT declaration_specifiers'nt
  | Nis'107 => NT declaration_specifiers'nt
  | Nis'108 => NT parameter_type_list'nt
  | Nis'109 => T RPAREN't
  | Nis'110 => NT parameter_list'nt
  | Nis'111 => T COMMA't
  | Nis'112 => T ELLIPSIS't
  | Nis'113 => NT parameter_declaration'nt
  | Nis'114 => NT declaration_specifiers'nt
  | Nis'115 => T LPAREN't
  | Nis'116 => T RPAREN't
  | Nis'117 => T LBRACK't
  | Nis'118 => T RBRACK't
  | Nis'119 => NT unary_operator'nt
  | Nis'120 => NT unary_expression'nt
  | Nis'121 => NT primary_expression'nt
  | Nis'122 => NT postfix_expression'nt
  | Nis'123 => T PTR't
  | Nis'124 => T OTHER_NAME't
  | Nis'125 => T LPAREN't
  | Nis'126 => T RPAREN't
  | Nis'127 => NT unary_expression'nt
  | Nis'128 => T XOR_ASSIGN't
  | Nis'129 => T SUB_ASSIGN't
  | Nis'130 => T RIGHT_ASSIGN't
  | Nis'131 => T OR_ASSIGN't
  | Nis'132 => T MUL_ASSIGN't
  | Nis'133 => T MOD_ASSIGN't
  | Nis'134 => T LEFT_ASSIGN't
  | Nis'135 => T EQ't
  | Nis'136 => T DIV_ASSIGN't
  | Nis'137 => T AND_ASSIGN't
  | Nis'138 => T ADD_ASSIGN't
  | Nis'139 => NT assignment_operator'nt
  | Nis'140 => NT shift_expression'nt
  | Nis'141 => T RIGHT't
  | Nis'142 => NT multiplicative_expression'nt
  | Nis'143 => T STAR't
  | Nis'144 => NT cast_expression'nt
  | Nis'145 => T SLASH't
  | Nis'146 => NT cast_expression'nt
  | Nis'147 => T PERCENT't
  | Nis'148 => NT cast_expression'nt
  | Nis'149 => NT cast_expression'nt
  | Nis'150 => NT additive_expression'nt
  | Nis'151 => T PLUS't
  | Nis'152 => NT multiplicative_expression'nt
  | Nis'153 => T MINUS't
  | Nis'154 => NT multiplicative_expression'nt
  | Nis'155 => T LEFT't
  | Nis'156 => NT additive_expression'nt
  | Nis'157 => NT relational_expression'nt
  | Nis'158 => T LT't
  | Nis'159 => NT shift_expression'nt
  | Nis'160 => NT additive_expression'nt
  | Nis'161 => T LEQ't
  | Nis'162 => NT shift_expression'nt
  | Nis'163 => T GT't
  | Nis'164 => NT shift_expression'nt
  | Nis'165 => T GEQ't
  | Nis'166 => NT shift_expression'nt
  | Nis'167 => NT logical_OR_expression'nt
  | Nis'168 => T QUESTION't
  | Nis'169 => NT logical_AND_expression'nt
  | Nis'170 => T ANDAND't
  | Nis'171 => NT inclusive_OR_expression'nt
  | Nis'172 => T BAR't
  | Nis'173 => NT exclusive_OR_expression'nt
  | Nis'174 => T HAT't
  | Nis'175 => NT equality_expression'nt
  | Nis'176 => T NEQ't
  | Nis'177 => NT relational_expression'nt
  | Nis'178 => T EQEQ't
  | Nis'179 => NT relational_expression'nt
  | Nis'180 => NT AND_expression'nt
  | Nis'181 => T AND't
  | Nis'182 => NT equality_expression'nt
  | Nis'183 => NT AND_expression'nt
  | Nis'184 => NT exclusive_OR_expression'nt
  | Nis'185 => NT inclusive_OR_expression'nt
  | Nis'186 => NT expression'nt
  | Nis'187 => T COMMA't
  | Nis'188 => NT conditional_expression'nt
  | Nis'189 => NT assignment_expression'nt
  | Nis'190 => T COLON't
  | Nis'191 => NT conditional_expression'nt
  | Nis'192 => NT assignment_expression'nt
  | Nis'193 => T BARBAR't
  | Nis'194 => NT logical_AND_expression'nt
  | Nis'195 => NT assignment_expression'nt
  | Nis'196 => NT assignment_expression'nt
  | Nis'197 => NT argument_expression_list'nt
  | Nis'198 => T RPAREN't
  | Nis'199 => T COMMA't
  | Nis'200 => NT assignment_expression'nt
  | Nis'201 => T LBRACK't
  | Nis'202 => NT expression'nt
  | Nis'203 => T RBRACK't
  | Nis'204 => T INC't
  | Nis'205 => T DOT't
  | Nis'206 => T OTHER_NAME't
  | Nis'207 => T DEC't
  | Nis'208 => NT cast_expression'nt
  | Nis'209 => NT type_qualifier_list'nt
  | Nis'210 => T RBRACK't
  | Nis'211 => NT assignment_expression'nt
  | Nis'212 => T RBRACK't
  | Nis'213 => NT assignment_expression'nt
  | Nis'214 => T RBRACK't
  | Nis'215 => NT pointer'nt
  | Nis'216 => NT direct_abstract_declarator'nt
  | Nis'217 => T LPAREN't
  | Nis'218 => T RPAREN't
  | Nis'219 => NT parameter_type_list'nt
  | Nis'220 => T RPAREN't
  | Nis'221 => NT parameter_declaration'nt
  | Nis'222 => T LBRACK't
  | Nis'223 => T RBRACK't
  | Nis'224 => NT type_qualifier_list'nt
  | Nis'225 => T RBRACK't
  | Nis'226 => NT assignment_expression'nt
  | Nis'227 => T RBRACK't
  | Nis'228 => NT assignment_expression'nt
  | Nis'229 => T RBRACK't
  | Nis'230 => NT parameter_type_list'nt
  | Nis'231 => T RPAREN't
  | Nis'232 => NT direct_declarator'nt
  | Nis'233 => T LBRACK't
  | Nis'234 => T RBRACK't
  | Nis'235 => NT type_qualifier_list'nt
  | Nis'236 => T RBRACK't
  | Nis'237 => NT assignment_expression'nt
  | Nis'238 => T RBRACK't
  | Nis'239 => NT assignment_expression'nt
  | Nis'240 => T RBRACK't
  | Nis'241 => NT direct_abstract_declarator'nt
  | Nis'242 => NT declarator_noattrend'nt
  | Nis'243 => NT attribute_specifier_list'nt
  | Nis'244 => NT attribute_specifier'nt
  | Nis'245 => NT attribute_specifier_list'nt
  | Nis'246 => NT declarator'nt
  | Nis'247 => T RPAREN't
  | Nis'248 => NT abstract_declarator'nt
  | Nis'249 => T RPAREN't
  | Nis'250 => NT declarator'nt
  | Nis'251 => NT abstract_declarator'nt
  | Nis'252 => NT identifier_list'nt
  | Nis'253 => T RPAREN't
  | Nis'254 => T COMMA't
  | Nis'255 => T VAR_NAME't
  | Nis'256 => T COLON't
  | Nis'257 => NT constant_expression'nt
  | Nis'258 => NT conditional_expression'nt
  | Nis'259 => NT struct_declarator_list'nt
  | Nis'260 => T SEMICOLON't
  | Nis'261 => T COMMA't
  | Nis'262 => NT struct_declarator'nt
  | Nis'263 => NT declarator'nt
  | Nis'264 => T COLON't
  | Nis'265 => NT constant_expression'nt
  | Nis'266 => NT struct_declarator'nt
  | Nis'267 => T LBRACE't
  | Nis'268 => NT struct_declaration_list'nt
  | Nis'269 => T RBRACE't
  | Nis'270 => NT specifier_qualifier_list'nt
  | Nis'271 => NT specifier_qualifier_list'nt
  | Nis'272 => NT type_name'nt
  | Nis'273 => T RPAREN't
  | Nis'274 => NT specifier_qualifier_list'nt
  | Nis'275 => T LPAREN't
  | Nis'276 => NT pointer'nt
  | Nis'277 => NT abstract_declarator'nt
  | Nis'278 => NT type_name'nt
  | Nis'279 => T RPAREN't
  | Nis'280 => NT argument_expression_list'nt
  | Nis'281 => T RPAREN't
  | Nis'282 => NT type_name'nt
  | Nis'283 => T COMMA't
  | Nis'284 => T OTHER_NAME't
  | Nis'285 => T RPAREN't
  | Nis'286 => T LBRACK't
  | Nis'287 => NT constant_expression'nt
  | Nis'288 => T RBRACK't
  | Nis'289 => T DOT't
  | Nis'290 => T OTHER_NAME't
  | Nis'291 => NT designator_list'nt
  | Nis'292 => T RPAREN't
  | Nis'293 => NT designator'nt
  | Nis'294 => NT designator'nt
  | Nis'295 => NT assignment_expression'nt
  | Nis'296 => T COMMA't
  | Nis'297 => NT type_name'nt
  | Nis'298 => T RPAREN't
  | Nis'299 => NT unary_expression'nt
  | Nis'300 => NT argument_expression_list'nt
  | Nis'301 => T RPAREN't
  | Nis'302 => NT gcc_attribute_list'nt
  | Nis'303 => T RPAREN't
  | Nis'304 => T RPAREN't
  | Nis'305 => T COMMA't
  | Nis'306 => NT gcc_attribute'nt
  | Nis'307 => NT gcc_attribute'nt
  | Nis'308 => NT attribute_specifier_list'nt
  | Nis'309 => T OTHER_NAME't
  | Nis'310 => T LBRACE't
  | Nis'311 => T VAR_NAME't
  | Nis'312 => NT enumerator_list'nt
  | Nis'313 => T RBRACE't
  | Nis'314 => T COMMA't
  | Nis'315 => T RBRACE't
  | Nis'316 => NT enumerator'nt
  | Nis'317 => NT enumeration_constant'nt
  | Nis'318 => T EQ't
  | Nis'319 => NT constant_expression'nt
  | Nis'320 => NT enumerator'nt
  | Nis'321 => T LBRACE't
  | Nis'322 => NT enumerator_list'nt
  | Nis'323 => T RBRACE't
  | Nis'324 => T COMMA't
  | Nis'325 => T RBRACE't
  | Nis'326 => NT type_name'nt
  | Nis'327 => T RPAREN't
  | Nis'328 => T LBRACE't
  | Nis'329 => T LBRACE't
  | Nis'330 => NT initializer_list'nt
  | Nis'331 => T RBRACE't
  | Nis'332 => T COMMA't
  | Nis'333 => T RBRACE't
  | Nis'334 => NT designator_list'nt
  | Nis'335 => T EQ't
  | Nis'336 => NT designation'nt
  | Nis'337 => NT c_initializer'nt
  | Nis'338 => NT assignment_expression'nt
  | Nis'339 => NT c_initializer'nt
  | Nis'340 => NT designation'nt
  | Nis'341 => NT c_initializer'nt
  | Nis'342 => NT c_initializer'nt
  | Nis'343 => NT initializer_list'nt
  | Nis'344 => T RBRACE't
  | Nis'345 => T COMMA't
  | Nis'346 => T RBRACE't
  | Nis'347 => NT expression'nt
  | Nis'348 => T RPAREN't
  | Nis'349 => NT unary_expression'nt
  | Nis'350 => NT type_name'nt
  | Nis'351 => T RPAREN't
  | Nis'352 => NT cast_expression'nt
  | Nis'353 => NT argument_expression_list'nt
  | Nis'354 => T RPAREN't
  | Nis'355 => NT type_name'nt
  | Nis'356 => T RPAREN't
  | Nis'357 => NT unary_expression'nt
  | Nis'358 => NT constant_expression'nt
  | Nis'359 => T COMMA't
  | Nis'360 => T STRING_LITERAL't
  | Nis'361 => T RPAREN't
  | Nis'362 => T SEMICOLON't
  | Nis'363 => T SEMICOLON't
  | Nis'364 => T PRAGMA't
  | Nis'365 => T EOF't
  | Nis'367 => NT translation_unit'nt
  | Nis'368 => T SEMICOLON't
  | Nis'369 => T EOF't
  | Nis'370 => NT static_assert_declaration'nt
  | Nis'371 => NT function_definition'nt
  | Nis'372 => NT external_declaration'nt
  | Nis'373 => NT declaration_specifiers'nt
  | Nis'374 => T SEMICOLON't
  | Nis'375 => NT init_declarator_list'nt
  | Nis'376 => T SEMICOLON't
  | Nis'377 => T COMMA't
  | Nis'378 => NT init_declarator'nt
  | Nis'379 => NT declarator'nt
  | Nis'380 => T EQ't
  | Nis'381 => NT c_initializer'nt
  | Nis'382 => NT init_declarator'nt
  | Nis'383 => NT declarator_noattrend'nt
  | Nis'384 => NT declaration_specifiers'nt
  | Nis'385 => NT declaration_list'nt
  | Nis'386 => T LBRACE't
  | Nis'387 => T WHILE't
  | Nis'388 => T LPAREN't
  | Nis'389 => NT expression'nt
  | Nis'390 => T RPAREN't
  | Nis'391 => T SWITCH't
  | Nis'392 => T LPAREN't
  | Nis'393 => NT expression'nt
  | Nis'394 => T RPAREN't
  | Nis'395 => T SEMICOLON't
  | Nis'396 => T RETURN't
  | Nis'397 => T SEMICOLON't
  | Nis'398 => NT expression'nt
  | Nis'399 => T SEMICOLON't
  | Nis'400 => T OTHER_NAME't
  | Nis'401 => T COLON't
  | Nis'402 => T IF_'t
  | Nis'403 => T LPAREN't
  | Nis'404 => NT expression'nt
  | Nis'405 => T RPAREN't
  | Nis'406 => T WHILE't
  | Nis'407 => T LPAREN't
  | Nis'408 => NT expression'nt
  | Nis'409 => T RPAREN't
  | Nis'410 => T SWITCH't
  | Nis'411 => T LPAREN't
  | Nis'412 => NT expression'nt
  | Nis'413 => T RPAREN't
  | Nis'414 => T OTHER_NAME't
  | Nis'415 => T COLON't
  | Nis'416 => T IF_'t
  | Nis'417 => T LPAREN't
  | Nis'418 => NT expression'nt
  | Nis'419 => T RPAREN't
  | Nis'420 => T GOTO't
  | Nis'421 => T OTHER_NAME't
  | Nis'422 => T SEMICOLON't
  | Nis'423 => T FOR't
  | Nis'424 => T LPAREN't
  | Nis'425 => T SEMICOLON't
  | Nis'426 => T SEMICOLON't
  | Nis'427 => T RPAREN't
  | Nis'428 => T DO't
  | Nis'429 => T FOR't
  | Nis'430 => T LPAREN't
  | Nis'431 => T SEMICOLON't
  | Nis'432 => T SEMICOLON't
  | Nis'433 => T RPAREN't
  | Nis'434 => T DO't
  | Nis'435 => T DEFAULT't
  | Nis'436 => T COLON't
  | Nis'437 => T CONTINUE't
  | Nis'438 => T SEMICOLON't
  | Nis'439 => T CASE't
  | Nis'440 => NT constant_expression'nt
  | Nis'441 => T COLON't
  | Nis'442 => T BREAK't
  | Nis'443 => T SEMICOLON't
  | Nis'444 => T ASM't
  | Nis'445 => T VOLATILE't
  | Nis'446 => T CONST't
  | Nis'447 => NT asm_attributes'nt
  | Nis'448 => NT asm_attributes'nt
  | Nis'449 => NT asm_attributes'nt
  | Nis'450 => T LPAREN't
  | Nis'451 => T STRING_LITERAL't
  | Nis'452 => T COLON't
  | Nis'453 => T LBRACK't
  | Nis'454 => T OTHER_NAME't
  | Nis'455 => T RBRACK't
  | Nis'456 => NT asm_operands_ne'nt
  | Nis'457 => T COMMA't
  | Nis'458 => NT asm_operand'nt
  | Nis'459 => NT asm_op_name'nt
  | Nis'460 => T STRING_LITERAL't
  | Nis'461 => T LPAREN't
  | Nis'462 => NT expression'nt
  | Nis'463 => T RPAREN't
  | Nis'464 => NT asm_operands'nt
  | Nis'465 => T COLON't
  | Nis'466 => NT asm_operands'nt
  | Nis'467 => T COLON't
  | Nis'468 => T STRING_LITERAL't
  | Nis'469 => T COMMA't
  | Nis'470 => NT asm_flags'nt
  | Nis'471 => NT asm_flags'nt
  | Nis'472 => NT asm_operand'nt
  | Nis'473 => NT asm_arguments'nt
  | Nis'474 => T RPAREN't
  | Nis'475 => T SEMICOLON't
  | Nis'476 => NT statement_dangerous'nt
  | Nis'477 => NT selection_statement_dangerous'nt
  | Nis'478 => NT labeled_statement_statement_dangerous_'nt
  | Nis'479 => NT jump_statement'nt
  | Nis'480 => NT iteration_statement_statement_dangerous_'nt
  | Nis'481 => NT expression_statement'nt
  | Nis'482 => NT expression'nt
  | Nis'483 => T SEMICOLON't
  | Nis'484 => NT compound_statement'nt
  | Nis'485 => NT asm_statement'nt
  | Nis'486 => NT statement_dangerous'nt
  | Nis'487 => NT statement_dangerous'nt
  | Nis'488 => T WHILE't
  | Nis'489 => T LPAREN't
  | Nis'490 => NT expression'nt
  | Nis'491 => T RPAREN't
  | Nis'492 => T SEMICOLON't
  | Nis'493 => NT statement_dangerous'nt
  | Nis'494 => NT expression'nt
  | Nis'495 => T RPAREN't
  | Nis'496 => NT statement_dangerous'nt
  | Nis'497 => NT expression'nt
  | Nis'498 => T SEMICOLON't
  | Nis'499 => T RPAREN't
  | Nis'500 => NT statement_dangerous'nt
  | Nis'501 => NT expression'nt
  | Nis'502 => T RPAREN't
  | Nis'503 => NT statement_dangerous'nt
  | Nis'504 => NT expression'nt
  | Nis'505 => T SEMICOLON't
  | Nis'506 => T SEMICOLON't
  | Nis'507 => T RPAREN't
  | Nis'508 => NT statement_dangerous'nt
  | Nis'509 => NT expression'nt
  | Nis'510 => T RPAREN't
  | Nis'511 => NT statement_dangerous'nt
  | Nis'512 => NT expression'nt
  | Nis'513 => T SEMICOLON't
  | Nis'514 => T RPAREN't
  | Nis'515 => NT statement_dangerous'nt
  | Nis'516 => NT expression'nt
  | Nis'517 => T RPAREN't
  | Nis'518 => NT statement_dangerous'nt
  | Nis'519 => NT declaration'nt
  | Nis'520 => T SEMICOLON't
  | Nis'521 => T RPAREN't
  | Nis'522 => NT statement_dangerous'nt
  | Nis'523 => NT expression'nt
  | Nis'524 => T RPAREN't
  | Nis'525 => NT statement_dangerous'nt
  | Nis'526 => NT expression'nt
  | Nis'527 => T SEMICOLON't
  | Nis'528 => T RPAREN't
  | Nis'529 => NT statement_dangerous'nt
  | Nis'530 => NT expression'nt
  | Nis'531 => T RPAREN't
  | Nis'532 => NT statement_dangerous'nt
  | Nis'533 => NT statement_dangerous'nt
  | Nis'534 => T WHILE't
  | Nis'535 => T LPAREN't
  | Nis'536 => NT expression'nt
  | Nis'537 => T RPAREN't
  | Nis'538 => T SEMICOLON't
  | Nis'539 => T DEFAULT't
  | Nis'540 => T COLON't
  | Nis'541 => T CASE't
  | Nis'542 => NT constant_expression'nt
  | Nis'543 => T COLON't
  | Nis'544 => NT statement_safe'nt
  | Nis'545 => NT selection_statement_safe'nt
  | Nis'546 => NT labeled_statement_statement_safe_'nt
  | Nis'547 => NT jump_statement'nt
  | Nis'548 => NT iteration_statement_statement_safe_'nt
  | Nis'549 => NT expression_statement'nt
  | Nis'550 => NT compound_statement'nt
  | Nis'551 => NT asm_statement'nt
  | Nis'552 => NT statement_safe'nt
  | Nis'553 => NT statement_safe'nt
  | Nis'554 => NT expression'nt
  | Nis'555 => T RPAREN't
  | Nis'556 => NT statement_safe'nt
  | Nis'557 => NT expression'nt
  | Nis'558 => T SEMICOLON't
  | Nis'559 => T RPAREN't
  | Nis'560 => NT statement_safe'nt
  | Nis'561 => NT expression'nt
  | Nis'562 => T RPAREN't
  | Nis'563 => NT statement_safe'nt
  | Nis'564 => NT expression'nt
  | Nis'565 => T SEMICOLON't
  | Nis'566 => T SEMICOLON't
  | Nis'567 => T RPAREN't
  | Nis'568 => NT statement_safe'nt
  | Nis'569 => NT expression'nt
  | Nis'570 => T RPAREN't
  | Nis'571 => NT statement_safe'nt
  | Nis'572 => NT expression'nt
  | Nis'573 => T SEMICOLON't
  | Nis'574 => T RPAREN't
  | Nis'575 => NT statement_safe'nt
  | Nis'576 => NT expression'nt
  | Nis'577 => T RPAREN't
  | Nis'578 => NT statement_safe'nt
  | Nis'579 => NT declaration'nt
  | Nis'580 => T SEMICOLON't
  | Nis'581 => T RPAREN't
  | Nis'582 => NT statement_safe'nt
  | Nis'583 => NT expression'nt
  | Nis'584 => T RPAREN't
  | Nis'585 => NT statement_safe'nt
  | Nis'586 => NT expression'nt
  | Nis'587 => T SEMICOLON't
  | Nis'588 => T RPAREN't
  | Nis'589 => NT statement_safe'nt
  | Nis'590 => NT expression'nt
  | Nis'591 => T RPAREN't
  | Nis'592 => NT statement_safe'nt
  | Nis'593 => NT statement_safe'nt
  | Nis'594 => T ELSE't
  | Nis'595 => NT statement_safe'nt
  | Nis'596 => NT statement_dangerous'nt
  | Nis'597 => NT statement_dangerous'nt
  | Nis'598 => NT statement_safe'nt
  | Nis'599 => NT statement_dangerous'nt
  | Nis'600 => NT statement_safe'nt
  | Nis'601 => NT statement_dangerous'nt
  | Nis'602 => NT statement_safe'nt
  | Nis'603 => NT statement_dangerous'nt
  | Nis'604 => NT statement_safe'nt
  | Nis'605 => T ELSE't
  | Nis'606 => T RBRACE't
  | Nis'607 => T PRAGMA't
  | Nis'608 => NT statement_dangerous'nt
  | Nis'609 => NT declaration'nt
  | Nis'610 => NT block_item_list'nt
  | Nis'611 => T RBRACE't
  | Nis'612 => NT block_item'nt
  | Nis'613 => NT block_item'nt
  | Nis'614 => NT declaration'nt
  | Nis'615 => NT compound_statement'nt
  | Nis'616 => NT declaration'nt
  | Nis'617 => NT attribute_specifier'nt
  | Nis'618 => NT declarator'nt
  | Nis'619 => NT compound_statement'nt
  | Nis'620 => NT declaration'nt
  | Nis'621 => NT external_declaration'nt
  end.

Inductive initstate' : Set :=
| Init'0.
Definition initstate := initstate'.

Program Instance initstateNum : MenhirLib.Alphabet.Numbered initstate :=
  { inj := fun x => match x return _ with
    | Init'0 => 1%positive
    end;
    surj := (fun n => match n return _ with
    | 1%positive => Init'0
    | _ => Init'0
    end)%Z;
    inj_bound := 1%positive }.
Instance InitStateAlph : MenhirLib.Alphabet.Alphabet initstate := _.

Include MenhirLib.Automaton.Types.

Definition start_nt (init:initstate) : nonterminal :=
  match init with
  | Init'0 => translation_unit_file'nt
  end.

Definition action_table (state:state) : action :=
  match state with
  | Init Init'0 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC_ASSERT't => Shift_act Nis'9 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'363 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PRAGMA't => Shift_act Nis'364 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | EOF't => Shift_act Nis'365 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'1 => Default_reduce_act Prod'type_qualifier_noattr'2
  | Ninit Nis'2 => Default_reduce_act Prod'type_specifier'0
  | Ninit Nis'3 => Default_reduce_act Prod'type_specifier'8
  | Ninit Nis'4 => Default_reduce_act Prod'struct_or_union'1
  | Ninit Nis'5 => Default_reduce_act Prod'type_specifier'9
  | Ninit Nis'6 => Default_reduce_act Prod'type_specifier'12
  | Ninit Nis'7 => Default_reduce_act Prod'storage_class_specifier'0
  | Ninit Nis'8 => Default_reduce_act Prod'struct_or_union'0
  | Ninit Nis'9 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'10 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'10 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'11 => Default_reduce_act Prod'primary_expression'0
  | Ninit Nis'12 => Default_reduce_act Prod'unary_operator'4
  | Ninit Nis'13 => Default_reduce_act Prod'primary_expression'2
  | Ninit Nis'14 => Default_reduce_act Prod'unary_operator'1
  | Ninit Nis'15 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'18 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'16 => Default_reduce_act Prod'unary_operator'2
  | Ninit Nis'17 => Default_reduce_act Prod'unary_operator'3
  | Ninit Nis'18 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'19 => Default_reduce_act Prod'type_specifier'7
  | Ninit Nis'20 => Default_reduce_act Prod'type_specifier'2
  | Ninit Nis'21 => Default_reduce_act Prod'type_qualifier_noattr'1
  | Ninit Nis'22 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'23 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'23 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'24 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'25 => Default_reduce_act Prod'type_specifier'4
  | Ninit Nis'26 => Default_reduce_act Prod'type_specifier'3
  | Ninit Nis'27 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'28 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'28 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'29 => Default_reduce_act Prod'type_specifier'5
  | Ninit Nis'30 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | OTHER_NAME't => Reduce_act Prod'attribute_specifier_list'0
    | LBRACE't => Reduce_act Prod'attribute_specifier_list'0
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'31 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'32 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'32 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'33 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'33 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Reduce_act Prod'gcc_attribute'0
    | PACKED't => Shift_act Nis'34 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'35 (eq_refl _)
    | CONST't => Shift_act Nis'36 (eq_refl _)
    | COMMA't => Reduce_act Prod'gcc_attribute'0
    | _ => Fail_act
    end)
  | Ninit Nis'34 => Default_reduce_act Prod'gcc_attribute_word'2
  | Ninit Nis'35 => Default_reduce_act Prod'gcc_attribute_word'0
  | Ninit Nis'36 => Default_reduce_act Prod'gcc_attribute_word'1
  | Ninit Nis'37 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Reduce_act Prod'gcc_attribute'1
    | LPAREN't => Shift_act Nis'38 (eq_refl _)
    | COMMA't => Reduce_act Prod'gcc_attribute'1
    | _ => Fail_act
    end)
  | Ninit Nis'38 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RPAREN't => Shift_act Nis'39 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'39 => Default_reduce_act Prod'gcc_attribute'2
  | Ninit Nis'40 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'28 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'41 => Default_reduce_act Prod'primary_expression'1
  | Ninit Nis'42 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'43 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'43 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'44 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'45 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'45 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'46 => Default_reduce_act Prod'type_specifier'6
  | Ninit Nis'47 => Default_reduce_act Prod'type_qualifier_noattr'0
  | Ninit Nis'48 => Default_reduce_act Prod'type_specifier'1
  | Ninit Nis'49 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'50 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'50 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'51 => Default_reduce_act Prod'unary_operator'5
  | Ninit Nis'52 => Default_reduce_act Prod'unary_operator'0
  | Ninit Nis'53 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'54 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'54 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'55 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Reduce_act Prod'specifier_qualifier_list'1
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STAR't => Reduce_act Prod'specifier_qualifier_list'1
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | SEMICOLON't => Reduce_act Prod'specifier_qualifier_list'1
    | RPAREN't => Reduce_act Prod'specifier_qualifier_list'1
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | LPAREN't => Reduce_act Prod'specifier_qualifier_list'1
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | LBRACK't => Reduce_act Prod'specifier_qualifier_list'1
    | INT't => Shift_act Nis'26 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | COMMA't => Reduce_act Prod'specifier_qualifier_list'1
    | COLON't => Reduce_act Prod'specifier_qualifier_list'1
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'56 => Default_reduce_act Prod'type_qualifier'0
  | Ninit Nis'57 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Reduce_act Prod'specifier_qualifier_list'3
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STAR't => Reduce_act Prod'specifier_qualifier_list'3
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | SEMICOLON't => Reduce_act Prod'specifier_qualifier_list'3
    | RPAREN't => Reduce_act Prod'specifier_qualifier_list'3
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | LPAREN't => Reduce_act Prod'specifier_qualifier_list'3
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | LBRACK't => Reduce_act Prod'specifier_qualifier_list'3
    | INT't => Shift_act Nis'26 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | COMMA't => Reduce_act Prod'specifier_qualifier_list'3
    | COLON't => Reduce_act Prod'specifier_qualifier_list'3
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'58 => Default_reduce_act Prod'type_specifier'10
  | Ninit Nis'59 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | OTHER_NAME't => Reduce_act Prod'attribute_specifier_list'0
    | LBRACE't => Reduce_act Prod'attribute_specifier_list'0
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'60 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | OTHER_NAME't => Shift_act Nis'61 (eq_refl _)
    | LBRACE't => Shift_act Nis'267 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'61 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Reduce_act Prod'struct_or_union_specifier'2
    | VOID't => Reduce_act Prod'struct_or_union_specifier'2
    | VAR_NAME't => Reduce_act Prod'struct_or_union_specifier'2
    | UNSIGNED't => Reduce_act Prod'struct_or_union_specifier'2
    | UNION't => Reduce_act Prod'struct_or_union_specifier'2
    | UNDERSCORE_BOOL't => Reduce_act Prod'struct_or_union_specifier'2
    | TYPEDEF_NAME't => Reduce_act Prod'struct_or_union_specifier'2
    | TYPEDEF't => Reduce_act Prod'struct_or_union_specifier'2
    | STRUCT't => Reduce_act Prod'struct_or_union_specifier'2
    | STATIC't => Reduce_act Prod'struct_or_union_specifier'2
    | STAR't => Reduce_act Prod'struct_or_union_specifier'2
    | SIGNED't => Reduce_act Prod'struct_or_union_specifier'2
    | SHORT't => Reduce_act Prod'struct_or_union_specifier'2
    | SEMICOLON't => Reduce_act Prod'struct_or_union_specifier'2
    | RPAREN't => Reduce_act Prod'struct_or_union_specifier'2
    | RESTRICT't => Reduce_act Prod'struct_or_union_specifier'2
    | REGISTER't => Reduce_act Prod'struct_or_union_specifier'2
    | PACKED't => Reduce_act Prod'struct_or_union_specifier'2
    | NORETURN't => Reduce_act Prod'struct_or_union_specifier'2
    | LPAREN't => Reduce_act Prod'struct_or_union_specifier'2
    | LONG't => Reduce_act Prod'struct_or_union_specifier'2
    | LBRACK't => Reduce_act Prod'struct_or_union_specifier'2
    | LBRACE't => Shift_act Nis'62 (eq_refl _)
    | INT't => Reduce_act Prod'struct_or_union_specifier'2
    | INLINE't => Reduce_act Prod'struct_or_union_specifier'2
    | FLOAT't => Reduce_act Prod'struct_or_union_specifier'2
    | EXTERN't => Reduce_act Prod'struct_or_union_specifier'2
    | ENUM't => Reduce_act Prod'struct_or_union_specifier'2
    | DOUBLE't => Reduce_act Prod'struct_or_union_specifier'2
    | CONST't => Reduce_act Prod'struct_or_union_specifier'2
    | COMMA't => Reduce_act Prod'struct_or_union_specifier'2
    | COLON't => Reduce_act Prod'struct_or_union_specifier'2
    | CHAR't => Reduce_act Prod'struct_or_union_specifier'2
    | AUTO't => Reduce_act Prod'struct_or_union_specifier'2
    | ATTRIBUTE't => Reduce_act Prod'struct_or_union_specifier'2
    | ALIGNAS't => Reduce_act Prod'struct_or_union_specifier'2
    | _ => Fail_act
    end)
  | Ninit Nis'62 => Default_reduce_act Prod'struct_declaration_list'0
  | Ninit Nis'63 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC_ASSERT't => Shift_act Nis'9 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | RBRACE't => Shift_act Nis'64 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'64 => Default_reduce_act Prod'struct_or_union_specifier'0
  | Ninit Nis'65 => Default_reduce_act Prod'struct_declaration_list'1
  | Ninit Nis'66 => Default_reduce_act Prod'struct_declaration'2
  | Ninit Nis'67 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'68 (eq_refl _)
    | STAR't => Shift_act Nis'69 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'76 (eq_refl _)
    | LPAREN't => Shift_act Nis'77 (eq_refl _)
    | COLON't => Shift_act Nis'256 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'68 => Default_reduce_act Prod'direct_declarator'0
  | Ninit Nis'69 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VAR_NAME't => Reduce_act Prod'pointer'0
    | STAR't => Shift_act Nis'69 (eq_refl _)
    | RPAREN't => Reduce_act Prod'pointer'0
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | LPAREN't => Reduce_act Prod'pointer'0
    | LBRACK't => Reduce_act Prod'pointer'0
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | COMMA't => Reduce_act Prod'pointer'0
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'70 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VAR_NAME't => Reduce_act Prod'pointer'1
    | STAR't => Shift_act Nis'69 (eq_refl _)
    | RPAREN't => Reduce_act Prod'pointer'1
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | LPAREN't => Reduce_act Prod'pointer'1
    | LBRACK't => Reduce_act Prod'pointer'1
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | COMMA't => Reduce_act Prod'pointer'1
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'71 => Default_reduce_act Prod'type_qualifier_list'1
  | Ninit Nis'72 => Default_reduce_act Prod'pointer'3
  | Ninit Nis'73 => Default_reduce_act Prod'type_qualifier'1
  | Ninit Nis'74 => Default_reduce_act Prod'type_qualifier_list'0
  | Ninit Nis'75 => Default_reduce_act Prod'pointer'2
  | Ninit Nis'76 => Default_reduce_act Prod'struct_declaration'1
  | Ninit Nis'77 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'68 (eq_refl _)
    | STAR't => Shift_act Nis'69 (eq_refl _)
    | LPAREN't => Shift_act Nis'77 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'78 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'68 (eq_refl _)
    | LPAREN't => Shift_act Nis'77 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'79 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Reduce_act Prod'declarator_noattrend'1
    | VOID't => Reduce_act Prod'declarator_noattrend'1
    | UNSIGNED't => Reduce_act Prod'declarator_noattrend'1
    | UNION't => Reduce_act Prod'declarator_noattrend'1
    | UNDERSCORE_BOOL't => Reduce_act Prod'declarator_noattrend'1
    | TYPEDEF_NAME't => Reduce_act Prod'declarator_noattrend'1
    | TYPEDEF't => Reduce_act Prod'declarator_noattrend'1
    | STRUCT't => Reduce_act Prod'declarator_noattrend'1
    | STATIC_ASSERT't => Reduce_act Prod'declarator_noattrend'1
    | STATIC't => Reduce_act Prod'declarator_noattrend'1
    | SIGNED't => Reduce_act Prod'declarator_noattrend'1
    | SHORT't => Reduce_act Prod'declarator_noattrend'1
    | SEMICOLON't => Reduce_act Prod'declarator_noattrend'1
    | RPAREN't => Reduce_act Prod'declarator_noattrend'1
    | RESTRICT't => Reduce_act Prod'declarator_noattrend'1
    | REGISTER't => Reduce_act Prod'declarator_noattrend'1
    | PACKED't => Reduce_act Prod'declarator_noattrend'1
    | NORETURN't => Reduce_act Prod'declarator_noattrend'1
    | LPAREN't => Shift_act Nis'80 (eq_refl _)
    | LONG't => Reduce_act Prod'declarator_noattrend'1
    | LBRACK't => Shift_act Nis'233 (eq_refl _)
    | LBRACE't => Reduce_act Prod'declarator_noattrend'1
    | INT't => Reduce_act Prod'declarator_noattrend'1
    | INLINE't => Reduce_act Prod'declarator_noattrend'1
    | FLOAT't => Reduce_act Prod'declarator_noattrend'1
    | EXTERN't => Reduce_act Prod'declarator_noattrend'1
    | EQ't => Reduce_act Prod'declarator_noattrend'1
    | ENUM't => Reduce_act Prod'declarator_noattrend'1
    | DOUBLE't => Reduce_act Prod'declarator_noattrend'1
    | CONST't => Reduce_act Prod'declarator_noattrend'1
    | COMMA't => Reduce_act Prod'declarator_noattrend'1
    | COLON't => Reduce_act Prod'declarator_noattrend'1
    | CHAR't => Reduce_act Prod'declarator_noattrend'1
    | AUTO't => Reduce_act Prod'declarator_noattrend'1
    | ATTRIBUTE't => Reduce_act Prod'declarator_noattrend'1
    | ALIGNAS't => Reduce_act Prod'declarator_noattrend'1
    | _ => Fail_act
    end)
  | Ninit Nis'80 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'81 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RPAREN't => Shift_act Nis'83 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'81 => Default_reduce_act Prod'identifier_list'0
  | Ninit Nis'82 => Default_reduce_act Prod'storage_class_specifier'2
  | Ninit Nis'83 => Default_reduce_act Prod'direct_declarator'7
  | Ninit Nis'84 => Default_reduce_act Prod'storage_class_specifier'4
  | Ninit Nis'85 => Default_reduce_act Prod'function_specifier'1
  | Ninit Nis'86 => Default_reduce_act Prod'function_specifier'0
  | Ninit Nis'87 => Default_reduce_act Prod'storage_class_specifier'1
  | Ninit Nis'88 => Default_reduce_act Prod'storage_class_specifier'3
  | Ninit Nis'89 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | STAR't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | SEMICOLON't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | RPAREN't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LPAREN't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | LBRACK't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | COMMA't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'90 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | STAR't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | SEMICOLON't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | RPAREN't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LPAREN't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | LBRACK't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | COMMA't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'91 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | STAR't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | SEMICOLON't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | RPAREN't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LPAREN't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | LBRACK't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | COMMA't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'92 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | STAR't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | SEMICOLON't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | RPAREN't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LPAREN't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | LBRACK't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | COMMA't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'93 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | STAR't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | SEMICOLON't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | RPAREN't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LPAREN't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | LBRACK't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | COMMA't => Reduce_act Prod'declaration_specifiers_typespec_opt'4
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'94 => Default_reduce_act Prod'type_specifier'11
  | Ninit Nis'95 => Default_reduce_act Prod'declaration_specifiers_typespec_opt'3
  | Ninit Nis'96 => Default_reduce_act Prod'declaration_specifiers_typespec_opt'0
  | Ninit Nis'97 => Default_reduce_act Prod'declaration_specifiers_typespec_opt'2
  | Ninit Nis'98 => Default_reduce_act Prod'declaration_specifiers_typespec_opt'1
  | Ninit Nis'99 => Default_reduce_act Prod'declaration_specifiers'1
  | Ninit Nis'100 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'101 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'102 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'103 => Default_reduce_act Prod'declaration_specifiers'4
  | Ninit Nis'104 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'105 => Default_reduce_act Prod'declaration_specifiers'3
  | Ninit Nis'106 => Default_reduce_act Prod'declaration_specifiers'0
  | Ninit Nis'107 => Default_reduce_act Prod'declaration_specifiers'2
  | Ninit Nis'108 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'109 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'109 => Default_reduce_act Prod'direct_declarator'6
  | Ninit Nis'110 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Reduce_act Prod'parameter_type_list'0
    | COMMA't => Shift_act Nis'111 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'111 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | ELLIPSIS't => Shift_act Nis'112 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'112 => Default_reduce_act Prod'parameter_type_list'1
  | Ninit Nis'113 => Default_reduce_act Prod'parameter_list'1
  | Ninit Nis'114 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'68 (eq_refl _)
    | STAR't => Shift_act Nis'69 (eq_refl _)
    | RPAREN't => Reduce_act Prod'parameter_declaration'2
    | LPAREN't => Shift_act Nis'115 (eq_refl _)
    | LBRACK't => Shift_act Nis'117 (eq_refl _)
    | COMMA't => Reduce_act Prod'parameter_declaration'2
    | _ => Fail_act
    end)
  | Ninit Nis'115 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'68 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | STAR't => Shift_act Nis'69 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RPAREN't => Shift_act Nis'116 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LPAREN't => Shift_act Nis'115 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | LBRACK't => Shift_act Nis'117 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'116 => Default_reduce_act Prod'direct_abstract_declarator'12
  | Ninit Nis'117 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | RBRACK't => Shift_act Nis'118 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'118 => Default_reduce_act Prod'direct_abstract_declarator'8
  | Ninit Nis'119 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'120 => Default_reduce_act Prod'cast_expression'0
  | Ninit Nis'121 => Default_reduce_act Prod'postfix_expression'0
  | Ninit Nis'122 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | XOR_ASSIGN't => Reduce_act Prod'unary_expression'0
    | SUB_ASSIGN't => Reduce_act Prod'unary_expression'0
    | STAR't => Reduce_act Prod'unary_expression'0
    | SLASH't => Reduce_act Prod'unary_expression'0
    | SEMICOLON't => Reduce_act Prod'unary_expression'0
    | RPAREN't => Reduce_act Prod'unary_expression'0
    | RIGHT_ASSIGN't => Reduce_act Prod'unary_expression'0
    | RIGHT't => Reduce_act Prod'unary_expression'0
    | RBRACK't => Reduce_act Prod'unary_expression'0
    | RBRACE't => Reduce_act Prod'unary_expression'0
    | QUESTION't => Reduce_act Prod'unary_expression'0
    | PTR't => Shift_act Nis'123 (eq_refl _)
    | PLUS't => Reduce_act Prod'unary_expression'0
    | PERCENT't => Reduce_act Prod'unary_expression'0
    | OR_ASSIGN't => Reduce_act Prod'unary_expression'0
    | NEQ't => Reduce_act Prod'unary_expression'0
    | MUL_ASSIGN't => Reduce_act Prod'unary_expression'0
    | MOD_ASSIGN't => Reduce_act Prod'unary_expression'0
    | MINUS't => Reduce_act Prod'unary_expression'0
    | LT't => Reduce_act Prod'unary_expression'0
    | LPAREN't => Shift_act Nis'125 (eq_refl _)
    | LEQ't => Reduce_act Prod'unary_expression'0
    | LEFT_ASSIGN't => Reduce_act Prod'unary_expression'0
    | LEFT't => Reduce_act Prod'unary_expression'0
    | LBRACK't => Shift_act Nis'201 (eq_refl _)
    | INC't => Shift_act Nis'204 (eq_refl _)
    | HAT't => Reduce_act Prod'unary_expression'0
    | GT't => Reduce_act Prod'unary_expression'0
    | GEQ't => Reduce_act Prod'unary_expression'0
    | EQEQ't => Reduce_act Prod'unary_expression'0
    | EQ't => Reduce_act Prod'unary_expression'0
    | DOT't => Shift_act Nis'205 (eq_refl _)
    | DIV_ASSIGN't => Reduce_act Prod'unary_expression'0
    | DEC't => Shift_act Nis'207 (eq_refl _)
    | COMMA't => Reduce_act Prod'unary_expression'0
    | COLON't => Reduce_act Prod'unary_expression'0
    | BARBAR't => Reduce_act Prod'unary_expression'0
    | BAR't => Reduce_act Prod'unary_expression'0
    | AND_ASSIGN't => Reduce_act Prod'unary_expression'0
    | ANDAND't => Reduce_act Prod'unary_expression'0
    | AND't => Reduce_act Prod'unary_expression'0
    | ADD_ASSIGN't => Reduce_act Prod'unary_expression'0
    | _ => Fail_act
    end)
  | Ninit Nis'123 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | OTHER_NAME't => Shift_act Nis'124 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'124 => Default_reduce_act Prod'postfix_expression'6
  | Ninit Nis'125 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RPAREN't => Shift_act Nis'126 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'126 => Default_reduce_act Prod'postfix_expression'3
  | Ninit Nis'127 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | XOR_ASSIGN't => Shift_act Nis'128 (eq_refl _)
    | SUB_ASSIGN't => Shift_act Nis'129 (eq_refl _)
    | STAR't => Reduce_act Prod'cast_expression'0
    | SLASH't => Reduce_act Prod'cast_expression'0
    | SEMICOLON't => Reduce_act Prod'cast_expression'0
    | RPAREN't => Reduce_act Prod'cast_expression'0
    | RIGHT_ASSIGN't => Shift_act Nis'130 (eq_refl _)
    | RIGHT't => Reduce_act Prod'cast_expression'0
    | RBRACK't => Reduce_act Prod'cast_expression'0
    | RBRACE't => Reduce_act Prod'cast_expression'0
    | QUESTION't => Reduce_act Prod'cast_expression'0
    | PLUS't => Reduce_act Prod'cast_expression'0
    | PERCENT't => Reduce_act Prod'cast_expression'0
    | OR_ASSIGN't => Shift_act Nis'131 (eq_refl _)
    | NEQ't => Reduce_act Prod'cast_expression'0
    | MUL_ASSIGN't => Shift_act Nis'132 (eq_refl _)
    | MOD_ASSIGN't => Shift_act Nis'133 (eq_refl _)
    | MINUS't => Reduce_act Prod'cast_expression'0
    | LT't => Reduce_act Prod'cast_expression'0
    | LEQ't => Reduce_act Prod'cast_expression'0
    | LEFT_ASSIGN't => Shift_act Nis'134 (eq_refl _)
    | LEFT't => Reduce_act Prod'cast_expression'0
    | HAT't => Reduce_act Prod'cast_expression'0
    | GT't => Reduce_act Prod'cast_expression'0
    | GEQ't => Reduce_act Prod'cast_expression'0
    | EQEQ't => Reduce_act Prod'cast_expression'0
    | EQ't => Shift_act Nis'135 (eq_refl _)
    | DIV_ASSIGN't => Shift_act Nis'136 (eq_refl _)
    | COMMA't => Reduce_act Prod'cast_expression'0
    | COLON't => Reduce_act Prod'cast_expression'0
    | BARBAR't => Reduce_act Prod'cast_expression'0
    | BAR't => Reduce_act Prod'cast_expression'0
    | AND_ASSIGN't => Shift_act Nis'137 (eq_refl _)
    | ANDAND't => Reduce_act Prod'cast_expression'0
    | AND't => Reduce_act Prod'cast_expression'0
    | ADD_ASSIGN't => Shift_act Nis'138 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'128 => Default_reduce_act Prod'assignment_operator'8
  | Ninit Nis'129 => Default_reduce_act Prod'assignment_operator'5
  | Ninit Nis'130 => Default_reduce_act Prod'assignment_operator'7
  | Ninit Nis'131 => Default_reduce_act Prod'assignment_operator'9
  | Ninit Nis'132 => Default_reduce_act Prod'assignment_operator'1
  | Ninit Nis'133 => Default_reduce_act Prod'assignment_operator'3
  | Ninit Nis'134 => Default_reduce_act Prod'assignment_operator'6
  | Ninit Nis'135 => Default_reduce_act Prod'assignment_operator'0
  | Ninit Nis'136 => Default_reduce_act Prod'assignment_operator'2
  | Ninit Nis'137 => Default_reduce_act Prod'assignment_operator'10
  | Ninit Nis'138 => Default_reduce_act Prod'assignment_operator'4
  | Ninit Nis'139 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'140 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'relational_expression'0
    | RPAREN't => Reduce_act Prod'relational_expression'0
    | RIGHT't => Shift_act Nis'141 (eq_refl _)
    | RBRACK't => Reduce_act Prod'relational_expression'0
    | RBRACE't => Reduce_act Prod'relational_expression'0
    | QUESTION't => Reduce_act Prod'relational_expression'0
    | NEQ't => Reduce_act Prod'relational_expression'0
    | LT't => Reduce_act Prod'relational_expression'0
    | LEQ't => Reduce_act Prod'relational_expression'0
    | LEFT't => Shift_act Nis'155 (eq_refl _)
    | HAT't => Reduce_act Prod'relational_expression'0
    | GT't => Reduce_act Prod'relational_expression'0
    | GEQ't => Reduce_act Prod'relational_expression'0
    | EQEQ't => Reduce_act Prod'relational_expression'0
    | COMMA't => Reduce_act Prod'relational_expression'0
    | COLON't => Reduce_act Prod'relational_expression'0
    | BARBAR't => Reduce_act Prod'relational_expression'0
    | BAR't => Reduce_act Prod'relational_expression'0
    | ANDAND't => Reduce_act Prod'relational_expression'0
    | AND't => Reduce_act Prod'relational_expression'0
    | _ => Fail_act
    end)
  | Ninit Nis'141 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'142 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | STAR't => Shift_act Nis'143 (eq_refl _)
    | SLASH't => Shift_act Nis'145 (eq_refl _)
    | SEMICOLON't => Reduce_act Prod'additive_expression'0
    | RPAREN't => Reduce_act Prod'additive_expression'0
    | RIGHT't => Reduce_act Prod'additive_expression'0
    | RBRACK't => Reduce_act Prod'additive_expression'0
    | RBRACE't => Reduce_act Prod'additive_expression'0
    | QUESTION't => Reduce_act Prod'additive_expression'0
    | PLUS't => Reduce_act Prod'additive_expression'0
    | PERCENT't => Shift_act Nis'147 (eq_refl _)
    | NEQ't => Reduce_act Prod'additive_expression'0
    | MINUS't => Reduce_act Prod'additive_expression'0
    | LT't => Reduce_act Prod'additive_expression'0
    | LEQ't => Reduce_act Prod'additive_expression'0
    | LEFT't => Reduce_act Prod'additive_expression'0
    | HAT't => Reduce_act Prod'additive_expression'0
    | GT't => Reduce_act Prod'additive_expression'0
    | GEQ't => Reduce_act Prod'additive_expression'0
    | EQEQ't => Reduce_act Prod'additive_expression'0
    | COMMA't => Reduce_act Prod'additive_expression'0
    | COLON't => Reduce_act Prod'additive_expression'0
    | BARBAR't => Reduce_act Prod'additive_expression'0
    | BAR't => Reduce_act Prod'additive_expression'0
    | ANDAND't => Reduce_act Prod'additive_expression'0
    | AND't => Reduce_act Prod'additive_expression'0
    | _ => Fail_act
    end)
  | Ninit Nis'143 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'144 => Default_reduce_act Prod'multiplicative_expression'1
  | Ninit Nis'145 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'146 => Default_reduce_act Prod'multiplicative_expression'2
  | Ninit Nis'147 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'148 => Default_reduce_act Prod'multiplicative_expression'3
  | Ninit Nis'149 => Default_reduce_act Prod'multiplicative_expression'0
  | Ninit Nis'150 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'shift_expression'2
    | RPAREN't => Reduce_act Prod'shift_expression'2
    | RIGHT't => Reduce_act Prod'shift_expression'2
    | RBRACK't => Reduce_act Prod'shift_expression'2
    | RBRACE't => Reduce_act Prod'shift_expression'2
    | QUESTION't => Reduce_act Prod'shift_expression'2
    | PLUS't => Shift_act Nis'151 (eq_refl _)
    | NEQ't => Reduce_act Prod'shift_expression'2
    | MINUS't => Shift_act Nis'153 (eq_refl _)
    | LT't => Reduce_act Prod'shift_expression'2
    | LEQ't => Reduce_act Prod'shift_expression'2
    | LEFT't => Reduce_act Prod'shift_expression'2
    | HAT't => Reduce_act Prod'shift_expression'2
    | GT't => Reduce_act Prod'shift_expression'2
    | GEQ't => Reduce_act Prod'shift_expression'2
    | EQEQ't => Reduce_act Prod'shift_expression'2
    | COMMA't => Reduce_act Prod'shift_expression'2
    | COLON't => Reduce_act Prod'shift_expression'2
    | BARBAR't => Reduce_act Prod'shift_expression'2
    | BAR't => Reduce_act Prod'shift_expression'2
    | ANDAND't => Reduce_act Prod'shift_expression'2
    | AND't => Reduce_act Prod'shift_expression'2
    | _ => Fail_act
    end)
  | Ninit Nis'151 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'152 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | STAR't => Shift_act Nis'143 (eq_refl _)
    | SLASH't => Shift_act Nis'145 (eq_refl _)
    | SEMICOLON't => Reduce_act Prod'additive_expression'1
    | RPAREN't => Reduce_act Prod'additive_expression'1
    | RIGHT't => Reduce_act Prod'additive_expression'1
    | RBRACK't => Reduce_act Prod'additive_expression'1
    | RBRACE't => Reduce_act Prod'additive_expression'1
    | QUESTION't => Reduce_act Prod'additive_expression'1
    | PLUS't => Reduce_act Prod'additive_expression'1
    | PERCENT't => Shift_act Nis'147 (eq_refl _)
    | NEQ't => Reduce_act Prod'additive_expression'1
    | MINUS't => Reduce_act Prod'additive_expression'1
    | LT't => Reduce_act Prod'additive_expression'1
    | LEQ't => Reduce_act Prod'additive_expression'1
    | LEFT't => Reduce_act Prod'additive_expression'1
    | HAT't => Reduce_act Prod'additive_expression'1
    | GT't => Reduce_act Prod'additive_expression'1
    | GEQ't => Reduce_act Prod'additive_expression'1
    | EQEQ't => Reduce_act Prod'additive_expression'1
    | COMMA't => Reduce_act Prod'additive_expression'1
    | COLON't => Reduce_act Prod'additive_expression'1
    | BARBAR't => Reduce_act Prod'additive_expression'1
    | BAR't => Reduce_act Prod'additive_expression'1
    | ANDAND't => Reduce_act Prod'additive_expression'1
    | AND't => Reduce_act Prod'additive_expression'1
    | _ => Fail_act
    end)
  | Ninit Nis'153 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'154 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | STAR't => Shift_act Nis'143 (eq_refl _)
    | SLASH't => Shift_act Nis'145 (eq_refl _)
    | SEMICOLON't => Reduce_act Prod'additive_expression'2
    | RPAREN't => Reduce_act Prod'additive_expression'2
    | RIGHT't => Reduce_act Prod'additive_expression'2
    | RBRACK't => Reduce_act Prod'additive_expression'2
    | RBRACE't => Reduce_act Prod'additive_expression'2
    | QUESTION't => Reduce_act Prod'additive_expression'2
    | PLUS't => Reduce_act Prod'additive_expression'2
    | PERCENT't => Shift_act Nis'147 (eq_refl _)
    | NEQ't => Reduce_act Prod'additive_expression'2
    | MINUS't => Reduce_act Prod'additive_expression'2
    | LT't => Reduce_act Prod'additive_expression'2
    | LEQ't => Reduce_act Prod'additive_expression'2
    | LEFT't => Reduce_act Prod'additive_expression'2
    | HAT't => Reduce_act Prod'additive_expression'2
    | GT't => Reduce_act Prod'additive_expression'2
    | GEQ't => Reduce_act Prod'additive_expression'2
    | EQEQ't => Reduce_act Prod'additive_expression'2
    | COMMA't => Reduce_act Prod'additive_expression'2
    | COLON't => Reduce_act Prod'additive_expression'2
    | BARBAR't => Reduce_act Prod'additive_expression'2
    | BAR't => Reduce_act Prod'additive_expression'2
    | ANDAND't => Reduce_act Prod'additive_expression'2
    | AND't => Reduce_act Prod'additive_expression'2
    | _ => Fail_act
    end)
  | Ninit Nis'155 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'156 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'shift_expression'1
    | RPAREN't => Reduce_act Prod'shift_expression'1
    | RIGHT't => Reduce_act Prod'shift_expression'1
    | RBRACK't => Reduce_act Prod'shift_expression'1
    | RBRACE't => Reduce_act Prod'shift_expression'1
    | QUESTION't => Reduce_act Prod'shift_expression'1
    | PLUS't => Shift_act Nis'151 (eq_refl _)
    | NEQ't => Reduce_act Prod'shift_expression'1
    | MINUS't => Shift_act Nis'153 (eq_refl _)
    | LT't => Reduce_act Prod'shift_expression'1
    | LEQ't => Reduce_act Prod'shift_expression'1
    | LEFT't => Reduce_act Prod'shift_expression'1
    | HAT't => Reduce_act Prod'shift_expression'1
    | GT't => Reduce_act Prod'shift_expression'1
    | GEQ't => Reduce_act Prod'shift_expression'1
    | EQEQ't => Reduce_act Prod'shift_expression'1
    | COMMA't => Reduce_act Prod'shift_expression'1
    | COLON't => Reduce_act Prod'shift_expression'1
    | BARBAR't => Reduce_act Prod'shift_expression'1
    | BAR't => Reduce_act Prod'shift_expression'1
    | ANDAND't => Reduce_act Prod'shift_expression'1
    | AND't => Reduce_act Prod'shift_expression'1
    | _ => Fail_act
    end)
  | Ninit Nis'157 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'equality_expression'0
    | RPAREN't => Reduce_act Prod'equality_expression'0
    | RBRACK't => Reduce_act Prod'equality_expression'0
    | RBRACE't => Reduce_act Prod'equality_expression'0
    | QUESTION't => Reduce_act Prod'equality_expression'0
    | NEQ't => Reduce_act Prod'equality_expression'0
    | LT't => Shift_act Nis'158 (eq_refl _)
    | LEQ't => Shift_act Nis'161 (eq_refl _)
    | HAT't => Reduce_act Prod'equality_expression'0
    | GT't => Shift_act Nis'163 (eq_refl _)
    | GEQ't => Shift_act Nis'165 (eq_refl _)
    | EQEQ't => Reduce_act Prod'equality_expression'0
    | COMMA't => Reduce_act Prod'equality_expression'0
    | COLON't => Reduce_act Prod'equality_expression'0
    | BARBAR't => Reduce_act Prod'equality_expression'0
    | BAR't => Reduce_act Prod'equality_expression'0
    | ANDAND't => Reduce_act Prod'equality_expression'0
    | AND't => Reduce_act Prod'equality_expression'0
    | _ => Fail_act
    end)
  | Ninit Nis'158 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'159 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'relational_expression'1
    | RPAREN't => Reduce_act Prod'relational_expression'1
    | RIGHT't => Shift_act Nis'141 (eq_refl _)
    | RBRACK't => Reduce_act Prod'relational_expression'1
    | RBRACE't => Reduce_act Prod'relational_expression'1
    | QUESTION't => Reduce_act Prod'relational_expression'1
    | NEQ't => Reduce_act Prod'relational_expression'1
    | LT't => Reduce_act Prod'relational_expression'1
    | LEQ't => Reduce_act Prod'relational_expression'1
    | LEFT't => Shift_act Nis'155 (eq_refl _)
    | HAT't => Reduce_act Prod'relational_expression'1
    | GT't => Reduce_act Prod'relational_expression'1
    | GEQ't => Reduce_act Prod'relational_expression'1
    | EQEQ't => Reduce_act Prod'relational_expression'1
    | COMMA't => Reduce_act Prod'relational_expression'1
    | COLON't => Reduce_act Prod'relational_expression'1
    | BARBAR't => Reduce_act Prod'relational_expression'1
    | BAR't => Reduce_act Prod'relational_expression'1
    | ANDAND't => Reduce_act Prod'relational_expression'1
    | AND't => Reduce_act Prod'relational_expression'1
    | _ => Fail_act
    end)
  | Ninit Nis'160 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'shift_expression'0
    | RPAREN't => Reduce_act Prod'shift_expression'0
    | RIGHT't => Reduce_act Prod'shift_expression'0
    | RBRACK't => Reduce_act Prod'shift_expression'0
    | RBRACE't => Reduce_act Prod'shift_expression'0
    | QUESTION't => Reduce_act Prod'shift_expression'0
    | PLUS't => Shift_act Nis'151 (eq_refl _)
    | NEQ't => Reduce_act Prod'shift_expression'0
    | MINUS't => Shift_act Nis'153 (eq_refl _)
    | LT't => Reduce_act Prod'shift_expression'0
    | LEQ't => Reduce_act Prod'shift_expression'0
    | LEFT't => Reduce_act Prod'shift_expression'0
    | HAT't => Reduce_act Prod'shift_expression'0
    | GT't => Reduce_act Prod'shift_expression'0
    | GEQ't => Reduce_act Prod'shift_expression'0
    | EQEQ't => Reduce_act Prod'shift_expression'0
    | COMMA't => Reduce_act Prod'shift_expression'0
    | COLON't => Reduce_act Prod'shift_expression'0
    | BARBAR't => Reduce_act Prod'shift_expression'0
    | BAR't => Reduce_act Prod'shift_expression'0
    | ANDAND't => Reduce_act Prod'shift_expression'0
    | AND't => Reduce_act Prod'shift_expression'0
    | _ => Fail_act
    end)
  | Ninit Nis'161 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'162 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'relational_expression'3
    | RPAREN't => Reduce_act Prod'relational_expression'3
    | RIGHT't => Shift_act Nis'141 (eq_refl _)
    | RBRACK't => Reduce_act Prod'relational_expression'3
    | RBRACE't => Reduce_act Prod'relational_expression'3
    | QUESTION't => Reduce_act Prod'relational_expression'3
    | NEQ't => Reduce_act Prod'relational_expression'3
    | LT't => Reduce_act Prod'relational_expression'3
    | LEQ't => Reduce_act Prod'relational_expression'3
    | LEFT't => Shift_act Nis'155 (eq_refl _)
    | HAT't => Reduce_act Prod'relational_expression'3
    | GT't => Reduce_act Prod'relational_expression'3
    | GEQ't => Reduce_act Prod'relational_expression'3
    | EQEQ't => Reduce_act Prod'relational_expression'3
    | COMMA't => Reduce_act Prod'relational_expression'3
    | COLON't => Reduce_act Prod'relational_expression'3
    | BARBAR't => Reduce_act Prod'relational_expression'3
    | BAR't => Reduce_act Prod'relational_expression'3
    | ANDAND't => Reduce_act Prod'relational_expression'3
    | AND't => Reduce_act Prod'relational_expression'3
    | _ => Fail_act
    end)
  | Ninit Nis'163 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'164 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'relational_expression'2
    | RPAREN't => Reduce_act Prod'relational_expression'2
    | RIGHT't => Shift_act Nis'141 (eq_refl _)
    | RBRACK't => Reduce_act Prod'relational_expression'2
    | RBRACE't => Reduce_act Prod'relational_expression'2
    | QUESTION't => Reduce_act Prod'relational_expression'2
    | NEQ't => Reduce_act Prod'relational_expression'2
    | LT't => Reduce_act Prod'relational_expression'2
    | LEQ't => Reduce_act Prod'relational_expression'2
    | LEFT't => Shift_act Nis'155 (eq_refl _)
    | HAT't => Reduce_act Prod'relational_expression'2
    | GT't => Reduce_act Prod'relational_expression'2
    | GEQ't => Reduce_act Prod'relational_expression'2
    | EQEQ't => Reduce_act Prod'relational_expression'2
    | COMMA't => Reduce_act Prod'relational_expression'2
    | COLON't => Reduce_act Prod'relational_expression'2
    | BARBAR't => Reduce_act Prod'relational_expression'2
    | BAR't => Reduce_act Prod'relational_expression'2
    | ANDAND't => Reduce_act Prod'relational_expression'2
    | AND't => Reduce_act Prod'relational_expression'2
    | _ => Fail_act
    end)
  | Ninit Nis'165 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'166 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'relational_expression'4
    | RPAREN't => Reduce_act Prod'relational_expression'4
    | RIGHT't => Shift_act Nis'141 (eq_refl _)
    | RBRACK't => Reduce_act Prod'relational_expression'4
    | RBRACE't => Reduce_act Prod'relational_expression'4
    | QUESTION't => Reduce_act Prod'relational_expression'4
    | NEQ't => Reduce_act Prod'relational_expression'4
    | LT't => Reduce_act Prod'relational_expression'4
    | LEQ't => Reduce_act Prod'relational_expression'4
    | LEFT't => Shift_act Nis'155 (eq_refl _)
    | HAT't => Reduce_act Prod'relational_expression'4
    | GT't => Reduce_act Prod'relational_expression'4
    | GEQ't => Reduce_act Prod'relational_expression'4
    | EQEQ't => Reduce_act Prod'relational_expression'4
    | COMMA't => Reduce_act Prod'relational_expression'4
    | COLON't => Reduce_act Prod'relational_expression'4
    | BARBAR't => Reduce_act Prod'relational_expression'4
    | BAR't => Reduce_act Prod'relational_expression'4
    | ANDAND't => Reduce_act Prod'relational_expression'4
    | AND't => Reduce_act Prod'relational_expression'4
    | _ => Fail_act
    end)
  | Ninit Nis'167 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'conditional_expression'0
    | RPAREN't => Reduce_act Prod'conditional_expression'0
    | RBRACK't => Reduce_act Prod'conditional_expression'0
    | RBRACE't => Reduce_act Prod'conditional_expression'0
    | QUESTION't => Shift_act Nis'168 (eq_refl _)
    | COMMA't => Reduce_act Prod'conditional_expression'0
    | COLON't => Reduce_act Prod'conditional_expression'0
    | BARBAR't => Shift_act Nis'193 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'168 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'169 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'logical_OR_expression'0
    | RPAREN't => Reduce_act Prod'logical_OR_expression'0
    | RBRACK't => Reduce_act Prod'logical_OR_expression'0
    | RBRACE't => Reduce_act Prod'logical_OR_expression'0
    | QUESTION't => Reduce_act Prod'logical_OR_expression'0
    | COMMA't => Reduce_act Prod'logical_OR_expression'0
    | COLON't => Reduce_act Prod'logical_OR_expression'0
    | BARBAR't => Reduce_act Prod'logical_OR_expression'0
    | ANDAND't => Shift_act Nis'170 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'170 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'171 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'logical_AND_expression'1
    | RPAREN't => Reduce_act Prod'logical_AND_expression'1
    | RBRACK't => Reduce_act Prod'logical_AND_expression'1
    | RBRACE't => Reduce_act Prod'logical_AND_expression'1
    | QUESTION't => Reduce_act Prod'logical_AND_expression'1
    | COMMA't => Reduce_act Prod'logical_AND_expression'1
    | COLON't => Reduce_act Prod'logical_AND_expression'1
    | BARBAR't => Reduce_act Prod'logical_AND_expression'1
    | BAR't => Shift_act Nis'172 (eq_refl _)
    | ANDAND't => Reduce_act Prod'logical_AND_expression'1
    | _ => Fail_act
    end)
  | Ninit Nis'172 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'173 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'inclusive_OR_expression'1
    | RPAREN't => Reduce_act Prod'inclusive_OR_expression'1
    | RBRACK't => Reduce_act Prod'inclusive_OR_expression'1
    | RBRACE't => Reduce_act Prod'inclusive_OR_expression'1
    | QUESTION't => Reduce_act Prod'inclusive_OR_expression'1
    | HAT't => Shift_act Nis'174 (eq_refl _)
    | COMMA't => Reduce_act Prod'inclusive_OR_expression'1
    | COLON't => Reduce_act Prod'inclusive_OR_expression'1
    | BARBAR't => Reduce_act Prod'inclusive_OR_expression'1
    | BAR't => Reduce_act Prod'inclusive_OR_expression'1
    | ANDAND't => Reduce_act Prod'inclusive_OR_expression'1
    | _ => Fail_act
    end)
  | Ninit Nis'174 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'175 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'AND_expression'0
    | RPAREN't => Reduce_act Prod'AND_expression'0
    | RBRACK't => Reduce_act Prod'AND_expression'0
    | RBRACE't => Reduce_act Prod'AND_expression'0
    | QUESTION't => Reduce_act Prod'AND_expression'0
    | NEQ't => Shift_act Nis'176 (eq_refl _)
    | HAT't => Reduce_act Prod'AND_expression'0
    | EQEQ't => Shift_act Nis'178 (eq_refl _)
    | COMMA't => Reduce_act Prod'AND_expression'0
    | COLON't => Reduce_act Prod'AND_expression'0
    | BARBAR't => Reduce_act Prod'AND_expression'0
    | BAR't => Reduce_act Prod'AND_expression'0
    | ANDAND't => Reduce_act Prod'AND_expression'0
    | AND't => Reduce_act Prod'AND_expression'0
    | _ => Fail_act
    end)
  | Ninit Nis'176 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'177 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'equality_expression'2
    | RPAREN't => Reduce_act Prod'equality_expression'2
    | RBRACK't => Reduce_act Prod'equality_expression'2
    | RBRACE't => Reduce_act Prod'equality_expression'2
    | QUESTION't => Reduce_act Prod'equality_expression'2
    | NEQ't => Reduce_act Prod'equality_expression'2
    | LT't => Shift_act Nis'158 (eq_refl _)
    | LEQ't => Shift_act Nis'161 (eq_refl _)
    | HAT't => Reduce_act Prod'equality_expression'2
    | GT't => Shift_act Nis'163 (eq_refl _)
    | GEQ't => Shift_act Nis'165 (eq_refl _)
    | EQEQ't => Reduce_act Prod'equality_expression'2
    | COMMA't => Reduce_act Prod'equality_expression'2
    | COLON't => Reduce_act Prod'equality_expression'2
    | BARBAR't => Reduce_act Prod'equality_expression'2
    | BAR't => Reduce_act Prod'equality_expression'2
    | ANDAND't => Reduce_act Prod'equality_expression'2
    | AND't => Reduce_act Prod'equality_expression'2
    | _ => Fail_act
    end)
  | Ninit Nis'178 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'179 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'equality_expression'1
    | RPAREN't => Reduce_act Prod'equality_expression'1
    | RBRACK't => Reduce_act Prod'equality_expression'1
    | RBRACE't => Reduce_act Prod'equality_expression'1
    | QUESTION't => Reduce_act Prod'equality_expression'1
    | NEQ't => Reduce_act Prod'equality_expression'1
    | LT't => Shift_act Nis'158 (eq_refl _)
    | LEQ't => Shift_act Nis'161 (eq_refl _)
    | HAT't => Reduce_act Prod'equality_expression'1
    | GT't => Shift_act Nis'163 (eq_refl _)
    | GEQ't => Shift_act Nis'165 (eq_refl _)
    | EQEQ't => Reduce_act Prod'equality_expression'1
    | COMMA't => Reduce_act Prod'equality_expression'1
    | COLON't => Reduce_act Prod'equality_expression'1
    | BARBAR't => Reduce_act Prod'equality_expression'1
    | BAR't => Reduce_act Prod'equality_expression'1
    | ANDAND't => Reduce_act Prod'equality_expression'1
    | AND't => Reduce_act Prod'equality_expression'1
    | _ => Fail_act
    end)
  | Ninit Nis'180 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'exclusive_OR_expression'1
    | RPAREN't => Reduce_act Prod'exclusive_OR_expression'1
    | RBRACK't => Reduce_act Prod'exclusive_OR_expression'1
    | RBRACE't => Reduce_act Prod'exclusive_OR_expression'1
    | QUESTION't => Reduce_act Prod'exclusive_OR_expression'1
    | HAT't => Reduce_act Prod'exclusive_OR_expression'1
    | COMMA't => Reduce_act Prod'exclusive_OR_expression'1
    | COLON't => Reduce_act Prod'exclusive_OR_expression'1
    | BARBAR't => Reduce_act Prod'exclusive_OR_expression'1
    | BAR't => Reduce_act Prod'exclusive_OR_expression'1
    | ANDAND't => Reduce_act Prod'exclusive_OR_expression'1
    | AND't => Shift_act Nis'181 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'181 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'182 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'AND_expression'1
    | RPAREN't => Reduce_act Prod'AND_expression'1
    | RBRACK't => Reduce_act Prod'AND_expression'1
    | RBRACE't => Reduce_act Prod'AND_expression'1
    | QUESTION't => Reduce_act Prod'AND_expression'1
    | NEQ't => Shift_act Nis'176 (eq_refl _)
    | HAT't => Reduce_act Prod'AND_expression'1
    | EQEQ't => Shift_act Nis'178 (eq_refl _)
    | COMMA't => Reduce_act Prod'AND_expression'1
    | COLON't => Reduce_act Prod'AND_expression'1
    | BARBAR't => Reduce_act Prod'AND_expression'1
    | BAR't => Reduce_act Prod'AND_expression'1
    | ANDAND't => Reduce_act Prod'AND_expression'1
    | AND't => Reduce_act Prod'AND_expression'1
    | _ => Fail_act
    end)
  | Ninit Nis'183 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'exclusive_OR_expression'0
    | RPAREN't => Reduce_act Prod'exclusive_OR_expression'0
    | RBRACK't => Reduce_act Prod'exclusive_OR_expression'0
    | RBRACE't => Reduce_act Prod'exclusive_OR_expression'0
    | QUESTION't => Reduce_act Prod'exclusive_OR_expression'0
    | HAT't => Reduce_act Prod'exclusive_OR_expression'0
    | COMMA't => Reduce_act Prod'exclusive_OR_expression'0
    | COLON't => Reduce_act Prod'exclusive_OR_expression'0
    | BARBAR't => Reduce_act Prod'exclusive_OR_expression'0
    | BAR't => Reduce_act Prod'exclusive_OR_expression'0
    | ANDAND't => Reduce_act Prod'exclusive_OR_expression'0
    | AND't => Shift_act Nis'181 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'184 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'inclusive_OR_expression'0
    | RPAREN't => Reduce_act Prod'inclusive_OR_expression'0
    | RBRACK't => Reduce_act Prod'inclusive_OR_expression'0
    | RBRACE't => Reduce_act Prod'inclusive_OR_expression'0
    | QUESTION't => Reduce_act Prod'inclusive_OR_expression'0
    | HAT't => Shift_act Nis'174 (eq_refl _)
    | COMMA't => Reduce_act Prod'inclusive_OR_expression'0
    | COLON't => Reduce_act Prod'inclusive_OR_expression'0
    | BARBAR't => Reduce_act Prod'inclusive_OR_expression'0
    | BAR't => Reduce_act Prod'inclusive_OR_expression'0
    | ANDAND't => Reduce_act Prod'inclusive_OR_expression'0
    | _ => Fail_act
    end)
  | Ninit Nis'185 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'logical_AND_expression'0
    | RPAREN't => Reduce_act Prod'logical_AND_expression'0
    | RBRACK't => Reduce_act Prod'logical_AND_expression'0
    | RBRACE't => Reduce_act Prod'logical_AND_expression'0
    | QUESTION't => Reduce_act Prod'logical_AND_expression'0
    | COMMA't => Reduce_act Prod'logical_AND_expression'0
    | COLON't => Reduce_act Prod'logical_AND_expression'0
    | BARBAR't => Reduce_act Prod'logical_AND_expression'0
    | BAR't => Shift_act Nis'172 (eq_refl _)
    | ANDAND't => Reduce_act Prod'logical_AND_expression'0
    | _ => Fail_act
    end)
  | Ninit Nis'186 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | COLON't => Shift_act Nis'190 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'187 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'188 => Default_reduce_act Prod'assignment_expression'0
  | Ninit Nis'189 => Default_reduce_act Prod'expression'1
  | Ninit Nis'190 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'191 => Default_reduce_act Prod'conditional_expression'1
  | Ninit Nis'192 => Default_reduce_act Prod'expression'0
  | Ninit Nis'193 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'194 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'logical_OR_expression'1
    | RPAREN't => Reduce_act Prod'logical_OR_expression'1
    | RBRACK't => Reduce_act Prod'logical_OR_expression'1
    | RBRACE't => Reduce_act Prod'logical_OR_expression'1
    | QUESTION't => Reduce_act Prod'logical_OR_expression'1
    | COMMA't => Reduce_act Prod'logical_OR_expression'1
    | COLON't => Reduce_act Prod'logical_OR_expression'1
    | BARBAR't => Reduce_act Prod'logical_OR_expression'1
    | ANDAND't => Shift_act Nis'170 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'195 => Default_reduce_act Prod'assignment_expression'1
  | Ninit Nis'196 => Default_reduce_act Prod'argument_expression_list'0
  | Ninit Nis'197 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'198 (eq_refl _)
    | COMMA't => Shift_act Nis'199 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'198 => Default_reduce_act Prod'postfix_expression'2
  | Ninit Nis'199 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'200 => Default_reduce_act Prod'argument_expression_list'1
  | Ninit Nis'201 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'202 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RBRACK't => Shift_act Nis'203 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'203 => Default_reduce_act Prod'postfix_expression'1
  | Ninit Nis'204 => Default_reduce_act Prod'postfix_expression'7
  | Ninit Nis'205 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | OTHER_NAME't => Shift_act Nis'206 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'206 => Default_reduce_act Prod'postfix_expression'5
  | Ninit Nis'207 => Default_reduce_act Prod'postfix_expression'8
  | Ninit Nis'208 => Default_reduce_act Prod'unary_expression'3
  | Ninit Nis'209 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | RBRACK't => Shift_act Nis'210 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'210 => Default_reduce_act Prod'direct_abstract_declarator'6
  | Ninit Nis'211 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RBRACK't => Shift_act Nis'212 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'212 => Default_reduce_act Prod'direct_abstract_declarator'2
  | Ninit Nis'213 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RBRACK't => Shift_act Nis'214 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'214 => Default_reduce_act Prod'direct_abstract_declarator'4
  | Ninit Nis'215 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'68 (eq_refl _)
    | RPAREN't => Reduce_act Prod'abstract_declarator'0
    | LPAREN't => Shift_act Nis'115 (eq_refl _)
    | LBRACK't => Shift_act Nis'117 (eq_refl _)
    | COMMA't => Reduce_act Prod'abstract_declarator'0
    | _ => Fail_act
    end)
  | Ninit Nis'216 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Reduce_act Prod'abstract_declarator'1
    | LPAREN't => Shift_act Nis'217 (eq_refl _)
    | LBRACK't => Shift_act Nis'222 (eq_refl _)
    | COMMA't => Reduce_act Prod'abstract_declarator'1
    | _ => Fail_act
    end)
  | Ninit Nis'217 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RPAREN't => Shift_act Nis'218 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'218 => Default_reduce_act Prod'direct_abstract_declarator'11
  | Ninit Nis'219 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'220 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'220 => Default_reduce_act Prod'direct_abstract_declarator'9
  | Ninit Nis'221 => Default_reduce_act Prod'parameter_list'0
  | Ninit Nis'222 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | RBRACK't => Shift_act Nis'223 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'223 => Default_reduce_act Prod'direct_abstract_declarator'7
  | Ninit Nis'224 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | RBRACK't => Shift_act Nis'225 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'225 => Default_reduce_act Prod'direct_abstract_declarator'5
  | Ninit Nis'226 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RBRACK't => Shift_act Nis'227 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'227 => Default_reduce_act Prod'direct_abstract_declarator'1
  | Ninit Nis'228 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RBRACK't => Shift_act Nis'229 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'229 => Default_reduce_act Prod'direct_abstract_declarator'3
  | Ninit Nis'230 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'231 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'231 => Default_reduce_act Prod'direct_abstract_declarator'10
  | Ninit Nis'232 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Reduce_act Prod'declarator_noattrend'0
    | VOID't => Reduce_act Prod'declarator_noattrend'0
    | UNSIGNED't => Reduce_act Prod'declarator_noattrend'0
    | UNION't => Reduce_act Prod'declarator_noattrend'0
    | UNDERSCORE_BOOL't => Reduce_act Prod'declarator_noattrend'0
    | TYPEDEF_NAME't => Reduce_act Prod'declarator_noattrend'0
    | TYPEDEF't => Reduce_act Prod'declarator_noattrend'0
    | STRUCT't => Reduce_act Prod'declarator_noattrend'0
    | STATIC_ASSERT't => Reduce_act Prod'declarator_noattrend'0
    | STATIC't => Reduce_act Prod'declarator_noattrend'0
    | SIGNED't => Reduce_act Prod'declarator_noattrend'0
    | SHORT't => Reduce_act Prod'declarator_noattrend'0
    | SEMICOLON't => Reduce_act Prod'declarator_noattrend'0
    | RPAREN't => Reduce_act Prod'declarator_noattrend'0
    | RESTRICT't => Reduce_act Prod'declarator_noattrend'0
    | REGISTER't => Reduce_act Prod'declarator_noattrend'0
    | PACKED't => Reduce_act Prod'declarator_noattrend'0
    | NORETURN't => Reduce_act Prod'declarator_noattrend'0
    | LPAREN't => Shift_act Nis'80 (eq_refl _)
    | LONG't => Reduce_act Prod'declarator_noattrend'0
    | LBRACK't => Shift_act Nis'233 (eq_refl _)
    | LBRACE't => Reduce_act Prod'declarator_noattrend'0
    | INT't => Reduce_act Prod'declarator_noattrend'0
    | INLINE't => Reduce_act Prod'declarator_noattrend'0
    | FLOAT't => Reduce_act Prod'declarator_noattrend'0
    | EXTERN't => Reduce_act Prod'declarator_noattrend'0
    | EQ't => Reduce_act Prod'declarator_noattrend'0
    | ENUM't => Reduce_act Prod'declarator_noattrend'0
    | DOUBLE't => Reduce_act Prod'declarator_noattrend'0
    | CONST't => Reduce_act Prod'declarator_noattrend'0
    | COMMA't => Reduce_act Prod'declarator_noattrend'0
    | COLON't => Reduce_act Prod'declarator_noattrend'0
    | CHAR't => Reduce_act Prod'declarator_noattrend'0
    | AUTO't => Reduce_act Prod'declarator_noattrend'0
    | ATTRIBUTE't => Reduce_act Prod'declarator_noattrend'0
    | ALIGNAS't => Reduce_act Prod'declarator_noattrend'0
    | _ => Fail_act
    end)
  | Ninit Nis'233 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | RBRACK't => Shift_act Nis'234 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'234 => Default_reduce_act Prod'direct_declarator'5
  | Ninit Nis'235 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | RBRACK't => Shift_act Nis'236 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'236 => Default_reduce_act Prod'direct_declarator'4
  | Ninit Nis'237 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RBRACK't => Shift_act Nis'238 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'238 => Default_reduce_act Prod'direct_declarator'2
  | Ninit Nis'239 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RBRACK't => Shift_act Nis'240 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'240 => Default_reduce_act Prod'direct_declarator'3
  | Ninit Nis'241 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Reduce_act Prod'abstract_declarator'2
    | LPAREN't => Shift_act Nis'217 (eq_refl _)
    | LBRACK't => Shift_act Nis'222 (eq_refl _)
    | COMMA't => Reduce_act Prod'abstract_declarator'2
    | _ => Fail_act
    end)
  | Ninit Nis'242 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'attribute_specifier_list'0
    | RPAREN't => Reduce_act Prod'attribute_specifier_list'0
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | EQ't => Reduce_act Prod'attribute_specifier_list'0
    | COMMA't => Reduce_act Prod'attribute_specifier_list'0
    | COLON't => Reduce_act Prod'attribute_specifier_list'0
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'243 => Default_reduce_act Prod'declarator'0
  | Ninit Nis'244 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'attribute_specifier_list'0
    | RPAREN't => Reduce_act Prod'attribute_specifier_list'0
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | OTHER_NAME't => Reduce_act Prod'attribute_specifier_list'0
    | LBRACE't => Reduce_act Prod'attribute_specifier_list'0
    | EQ't => Reduce_act Prod'attribute_specifier_list'0
    | COMMA't => Reduce_act Prod'attribute_specifier_list'0
    | COLON't => Reduce_act Prod'attribute_specifier_list'0
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'245 => Default_reduce_act Prod'attribute_specifier_list'1
  | Ninit Nis'246 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'247 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'247 => Default_reduce_act Prod'direct_declarator'1
  | Ninit Nis'248 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'249 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'249 => Default_reduce_act Prod'direct_abstract_declarator'0
  | Ninit Nis'250 => Default_reduce_act Prod'parameter_declaration'0
  | Ninit Nis'251 => Default_reduce_act Prod'parameter_declaration'1
  | Ninit Nis'252 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'253 (eq_refl _)
    | COMMA't => Shift_act Nis'254 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'253 => Default_reduce_act Prod'direct_declarator'8
  | Ninit Nis'254 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'255 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'255 => Default_reduce_act Prod'identifier_list'1
  | Ninit Nis'256 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'257 => Default_reduce_act Prod'struct_declarator'2
  | Ninit Nis'258 => Default_reduce_act Prod'constant_expression'0
  | Ninit Nis'259 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'260 (eq_refl _)
    | COMMA't => Shift_act Nis'261 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'260 => Default_reduce_act Prod'struct_declaration'0
  | Ninit Nis'261 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'68 (eq_refl _)
    | STAR't => Shift_act Nis'69 (eq_refl _)
    | LPAREN't => Shift_act Nis'77 (eq_refl _)
    | COLON't => Shift_act Nis'256 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'262 => Default_reduce_act Prod'struct_declarator_list'1
  | Ninit Nis'263 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'struct_declarator'0
    | COMMA't => Reduce_act Prod'struct_declarator'0
    | COLON't => Shift_act Nis'264 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'264 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'265 => Default_reduce_act Prod'struct_declarator'1
  | Ninit Nis'266 => Default_reduce_act Prod'struct_declarator_list'0
  | Ninit Nis'267 => Default_reduce_act Prod'struct_declaration_list'0
  | Ninit Nis'268 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC_ASSERT't => Shift_act Nis'9 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | RBRACE't => Shift_act Nis'269 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'269 => Default_reduce_act Prod'struct_or_union_specifier'1
  | Ninit Nis'270 => Default_reduce_act Prod'specifier_qualifier_list'2
  | Ninit Nis'271 => Default_reduce_act Prod'specifier_qualifier_list'0
  | Ninit Nis'272 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'273 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'273 => Default_reduce_act Prod'unary_expression'6
  | Ninit Nis'274 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | STAR't => Shift_act Nis'69 (eq_refl _)
    | RPAREN't => Reduce_act Prod'type_name'0
    | LPAREN't => Shift_act Nis'275 (eq_refl _)
    | LBRACK't => Shift_act Nis'117 (eq_refl _)
    | COMMA't => Reduce_act Prod'type_name'0
    | _ => Fail_act
    end)
  | Ninit Nis'275 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | STAR't => Shift_act Nis'69 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RPAREN't => Shift_act Nis'116 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LPAREN't => Shift_act Nis'275 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | LBRACK't => Shift_act Nis'117 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'276 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Reduce_act Prod'abstract_declarator'0
    | LPAREN't => Shift_act Nis'275 (eq_refl _)
    | LBRACK't => Shift_act Nis'117 (eq_refl _)
    | COMMA't => Reduce_act Prod'abstract_declarator'0
    | _ => Fail_act
    end)
  | Ninit Nis'277 => Default_reduce_act Prod'type_name'1
  | Ninit Nis'278 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'279 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'279 => Default_reduce_act Prod'attribute_specifier'3
  | Ninit Nis'280 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'281 (eq_refl _)
    | COMMA't => Shift_act Nis'199 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'281 => Default_reduce_act Prod'attribute_specifier'2
  | Ninit Nis'282 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | COMMA't => Shift_act Nis'283 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'283 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | OTHER_NAME't => Shift_act Nis'284 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'284 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'285 (eq_refl _)
    | LBRACK't => Shift_act Nis'286 (eq_refl _)
    | DOT't => Shift_act Nis'289 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'285 => Default_reduce_act Prod'postfix_expression'12
  | Ninit Nis'286 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'287 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RBRACK't => Shift_act Nis'288 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'288 => Default_reduce_act Prod'designator'0
  | Ninit Nis'289 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | OTHER_NAME't => Shift_act Nis'290 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'290 => Default_reduce_act Prod'designator'1
  | Ninit Nis'291 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'292 (eq_refl _)
    | LBRACK't => Shift_act Nis'286 (eq_refl _)
    | DOT't => Shift_act Nis'289 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'292 => Default_reduce_act Prod'postfix_expression'11
  | Ninit Nis'293 => Default_reduce_act Prod'designator_list'1
  | Ninit Nis'294 => Default_reduce_act Prod'designator_list'0
  | Ninit Nis'295 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | COMMA't => Shift_act Nis'296 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'296 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'297 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'298 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'298 => Default_reduce_act Prod'postfix_expression'4
  | Ninit Nis'299 => Default_reduce_act Prod'unary_expression'2
  | Ninit Nis'300 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'301 (eq_refl _)
    | COMMA't => Shift_act Nis'199 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'301 => Default_reduce_act Prod'gcc_attribute'3
  | Ninit Nis'302 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'303 (eq_refl _)
    | COMMA't => Shift_act Nis'305 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'303 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'304 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'304 => Default_reduce_act Prod'attribute_specifier'0
  | Ninit Nis'305 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Reduce_act Prod'gcc_attribute'0
    | PACKED't => Shift_act Nis'34 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'35 (eq_refl _)
    | CONST't => Shift_act Nis'36 (eq_refl _)
    | COMMA't => Reduce_act Prod'gcc_attribute'0
    | _ => Fail_act
    end)
  | Ninit Nis'306 => Default_reduce_act Prod'gcc_attribute_list'1
  | Ninit Nis'307 => Default_reduce_act Prod'gcc_attribute_list'0
  | Ninit Nis'308 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | OTHER_NAME't => Shift_act Nis'309 (eq_refl _)
    | LBRACE't => Shift_act Nis'321 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'309 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Reduce_act Prod'enum_specifier'4
    | VOID't => Reduce_act Prod'enum_specifier'4
    | VAR_NAME't => Reduce_act Prod'enum_specifier'4
    | UNSIGNED't => Reduce_act Prod'enum_specifier'4
    | UNION't => Reduce_act Prod'enum_specifier'4
    | UNDERSCORE_BOOL't => Reduce_act Prod'enum_specifier'4
    | TYPEDEF_NAME't => Reduce_act Prod'enum_specifier'4
    | TYPEDEF't => Reduce_act Prod'enum_specifier'4
    | STRUCT't => Reduce_act Prod'enum_specifier'4
    | STATIC't => Reduce_act Prod'enum_specifier'4
    | STAR't => Reduce_act Prod'enum_specifier'4
    | SIGNED't => Reduce_act Prod'enum_specifier'4
    | SHORT't => Reduce_act Prod'enum_specifier'4
    | SEMICOLON't => Reduce_act Prod'enum_specifier'4
    | RPAREN't => Reduce_act Prod'enum_specifier'4
    | RESTRICT't => Reduce_act Prod'enum_specifier'4
    | REGISTER't => Reduce_act Prod'enum_specifier'4
    | PACKED't => Reduce_act Prod'enum_specifier'4
    | NORETURN't => Reduce_act Prod'enum_specifier'4
    | LPAREN't => Reduce_act Prod'enum_specifier'4
    | LONG't => Reduce_act Prod'enum_specifier'4
    | LBRACK't => Reduce_act Prod'enum_specifier'4
    | LBRACE't => Shift_act Nis'310 (eq_refl _)
    | INT't => Reduce_act Prod'enum_specifier'4
    | INLINE't => Reduce_act Prod'enum_specifier'4
    | FLOAT't => Reduce_act Prod'enum_specifier'4
    | EXTERN't => Reduce_act Prod'enum_specifier'4
    | ENUM't => Reduce_act Prod'enum_specifier'4
    | DOUBLE't => Reduce_act Prod'enum_specifier'4
    | CONST't => Reduce_act Prod'enum_specifier'4
    | COMMA't => Reduce_act Prod'enum_specifier'4
    | COLON't => Reduce_act Prod'enum_specifier'4
    | CHAR't => Reduce_act Prod'enum_specifier'4
    | AUTO't => Reduce_act Prod'enum_specifier'4
    | ATTRIBUTE't => Reduce_act Prod'enum_specifier'4
    | ALIGNAS't => Reduce_act Prod'enum_specifier'4
    | _ => Fail_act
    end)
  | Ninit Nis'310 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'311 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'311 => Default_reduce_act Prod'enumeration_constant'0
  | Ninit Nis'312 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RBRACE't => Shift_act Nis'313 (eq_refl _)
    | COMMA't => Shift_act Nis'314 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'313 => Default_reduce_act Prod'enum_specifier'0
  | Ninit Nis'314 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'311 (eq_refl _)
    | RBRACE't => Shift_act Nis'315 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'315 => Default_reduce_act Prod'enum_specifier'2
  | Ninit Nis'316 => Default_reduce_act Prod'enumerator_list'1
  | Ninit Nis'317 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RBRACE't => Reduce_act Prod'enumerator'0
    | EQ't => Shift_act Nis'318 (eq_refl _)
    | COMMA't => Reduce_act Prod'enumerator'0
    | _ => Fail_act
    end)
  | Ninit Nis'318 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'319 => Default_reduce_act Prod'enumerator'1
  | Ninit Nis'320 => Default_reduce_act Prod'enumerator_list'0
  | Ninit Nis'321 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'311 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'322 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RBRACE't => Shift_act Nis'323 (eq_refl _)
    | COMMA't => Shift_act Nis'324 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'323 => Default_reduce_act Prod'enum_specifier'1
  | Ninit Nis'324 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'311 (eq_refl _)
    | RBRACE't => Shift_act Nis'325 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'325 => Default_reduce_act Prod'enum_specifier'3
  | Ninit Nis'326 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'327 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'327 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LBRACE't => Shift_act Nis'328 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'328 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACK't => Shift_act Nis'286 (eq_refl _)
    | LBRACE't => Shift_act Nis'329 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DOT't => Shift_act Nis'289 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'329 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACK't => Shift_act Nis'286 (eq_refl _)
    | LBRACE't => Shift_act Nis'329 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DOT't => Shift_act Nis'289 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'330 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RBRACE't => Shift_act Nis'331 (eq_refl _)
    | COMMA't => Shift_act Nis'332 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'331 => Default_reduce_act Prod'c_initializer'1
  | Ninit Nis'332 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RBRACE't => Shift_act Nis'333 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACK't => Shift_act Nis'286 (eq_refl _)
    | LBRACE't => Shift_act Nis'329 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DOT't => Shift_act Nis'289 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'333 => Default_reduce_act Prod'c_initializer'2
  | Ninit Nis'334 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LBRACK't => Shift_act Nis'286 (eq_refl _)
    | EQ't => Shift_act Nis'335 (eq_refl _)
    | DOT't => Shift_act Nis'289 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'335 => Default_reduce_act Prod'designation'0
  | Ninit Nis'336 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'329 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'337 => Default_reduce_act Prod'initializer_list'2
  | Ninit Nis'338 => Default_reduce_act Prod'c_initializer'0
  | Ninit Nis'339 => Default_reduce_act Prod'initializer_list'3
  | Ninit Nis'340 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'329 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'341 => Default_reduce_act Prod'initializer_list'0
  | Ninit Nis'342 => Default_reduce_act Prod'initializer_list'1
  | Ninit Nis'343 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RBRACE't => Shift_act Nis'344 (eq_refl _)
    | COMMA't => Shift_act Nis'345 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'344 => Default_reduce_act Prod'postfix_expression'9
  | Ninit Nis'345 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RBRACE't => Shift_act Nis'346 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACK't => Shift_act Nis'286 (eq_refl _)
    | LBRACE't => Shift_act Nis'329 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DOT't => Shift_act Nis'289 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'346 => Default_reduce_act Prod'postfix_expression'10
  | Ninit Nis'347 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'348 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'348 => Default_reduce_act Prod'primary_expression'3
  | Ninit Nis'349 => Default_reduce_act Prod'unary_expression'1
  | Ninit Nis'350 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'351 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'351 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'328 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'352 => Default_reduce_act Prod'cast_expression'1
  | Ninit Nis'353 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'354 (eq_refl _)
    | COMMA't => Shift_act Nis'199 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'354 => Default_reduce_act Prod'attribute_specifier'1
  | Ninit Nis'355 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'356 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'356 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | XOR_ASSIGN't => Reduce_act Prod'unary_expression'5
    | SUB_ASSIGN't => Reduce_act Prod'unary_expression'5
    | STAR't => Reduce_act Prod'unary_expression'5
    | SLASH't => Reduce_act Prod'unary_expression'5
    | SEMICOLON't => Reduce_act Prod'unary_expression'5
    | RPAREN't => Reduce_act Prod'unary_expression'5
    | RIGHT_ASSIGN't => Reduce_act Prod'unary_expression'5
    | RIGHT't => Reduce_act Prod'unary_expression'5
    | RBRACK't => Reduce_act Prod'unary_expression'5
    | RBRACE't => Reduce_act Prod'unary_expression'5
    | QUESTION't => Reduce_act Prod'unary_expression'5
    | PLUS't => Reduce_act Prod'unary_expression'5
    | PERCENT't => Reduce_act Prod'unary_expression'5
    | OR_ASSIGN't => Reduce_act Prod'unary_expression'5
    | NEQ't => Reduce_act Prod'unary_expression'5
    | MUL_ASSIGN't => Reduce_act Prod'unary_expression'5
    | MOD_ASSIGN't => Reduce_act Prod'unary_expression'5
    | MINUS't => Reduce_act Prod'unary_expression'5
    | LT't => Reduce_act Prod'unary_expression'5
    | LEQ't => Reduce_act Prod'unary_expression'5
    | LEFT_ASSIGN't => Reduce_act Prod'unary_expression'5
    | LEFT't => Reduce_act Prod'unary_expression'5
    | LBRACE't => Shift_act Nis'328 (eq_refl _)
    | HAT't => Reduce_act Prod'unary_expression'5
    | GT't => Reduce_act Prod'unary_expression'5
    | GEQ't => Reduce_act Prod'unary_expression'5
    | EQEQ't => Reduce_act Prod'unary_expression'5
    | EQ't => Reduce_act Prod'unary_expression'5
    | DIV_ASSIGN't => Reduce_act Prod'unary_expression'5
    | COMMA't => Reduce_act Prod'unary_expression'5
    | COLON't => Reduce_act Prod'unary_expression'5
    | BARBAR't => Reduce_act Prod'unary_expression'5
    | BAR't => Reduce_act Prod'unary_expression'5
    | AND_ASSIGN't => Reduce_act Prod'unary_expression'5
    | ANDAND't => Reduce_act Prod'unary_expression'5
    | AND't => Reduce_act Prod'unary_expression'5
    | ADD_ASSIGN't => Reduce_act Prod'unary_expression'5
    | _ => Fail_act
    end)
  | Ninit Nis'357 => Default_reduce_act Prod'unary_expression'4
  | Ninit Nis'358 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | COMMA't => Shift_act Nis'359 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'359 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | STRING_LITERAL't => Shift_act Nis'360 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'360 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'361 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'361 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'362 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'362 => Default_reduce_act Prod'static_assert_declaration'0
  | Ninit Nis'363 => Default_reduce_act Prod'translation_unit'3
  | Ninit Nis'364 => Default_reduce_act Prod'external_declaration'2
  | Ninit Nis'365 => Default_reduce_act Prod'translation_unit_file'1
  | Ninit Nis'367 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC_ASSERT't => Shift_act Nis'9 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'368 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PRAGMA't => Shift_act Nis'364 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | EOF't => Shift_act Nis'369 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'368 => Default_reduce_act Prod'translation_unit'2
  | Ninit Nis'369 => Default_reduce_act Prod'translation_unit_file'0
  | Ninit Nis'370 => Default_reduce_act Prod'declaration'2
  | Ninit Nis'371 => Default_reduce_act Prod'external_declaration'0
  | Ninit Nis'372 => Default_reduce_act Prod'translation_unit'1
  | Ninit Nis'373 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'68 (eq_refl _)
    | STAR't => Shift_act Nis'69 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'374 (eq_refl _)
    | LPAREN't => Shift_act Nis'77 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'374 => Default_reduce_act Prod'declaration'1
  | Ninit Nis'375 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'376 (eq_refl _)
    | COMMA't => Shift_act Nis'377 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'376 => Default_reduce_act Prod'declaration'0
  | Ninit Nis'377 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'68 (eq_refl _)
    | STAR't => Shift_act Nis'69 (eq_refl _)
    | LPAREN't => Shift_act Nis'77 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'378 => Default_reduce_act Prod'init_declarator_list'1
  | Ninit Nis'379 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'init_declarator'0
    | EQ't => Shift_act Nis'380 (eq_refl _)
    | COMMA't => Reduce_act Prod'init_declarator'0
    | _ => Fail_act
    end)
  | Ninit Nis'380 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'329 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'381 => Default_reduce_act Prod'init_declarator'1
  | Ninit Nis'382 => Default_reduce_act Prod'init_declarator_list'0
  | Ninit Nis'383 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC_ASSERT't => Shift_act Nis'9 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | SEMICOLON't => Reduce_act Prod'attribute_specifier_list'0
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | LBRACE't => Reduce_act Prod'attribute_specifier_list'0
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | EQ't => Reduce_act Prod'attribute_specifier_list'0
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | COMMA't => Reduce_act Prod'attribute_specifier_list'0
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'384 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'68 (eq_refl _)
    | STAR't => Shift_act Nis'69 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'374 (eq_refl _)
    | LPAREN't => Shift_act Nis'77 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'385 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC_ASSERT't => Shift_act Nis'9 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'386 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STATIC_ASSERT't => Shift_act Nis'9 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | RBRACE't => Shift_act Nis'606 (eq_refl _)
    | PRAGMA't => Shift_act Nis'607 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'387 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'388 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'388 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'389 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'390 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'390 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'391 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'392 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'392 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'393 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'394 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'394 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'395 => Default_reduce_act Prod'expression_statement'1
  | Ninit Nis'396 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'397 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'397 => Default_reduce_act Prod'jump_statement'4
  | Ninit Nis'398 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'399 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'399 => Default_reduce_act Prod'jump_statement'3
  | Ninit Nis'400 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | COLON't => Shift_act Nis'401 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'401 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'402 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'403 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'403 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'404 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'405 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'405 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'406 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'407 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'407 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'408 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'409 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'409 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'410 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'411 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'411 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'412 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'413 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'413 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'414 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | COLON't => Shift_act Nis'415 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'415 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'416 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'417 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'417 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'418 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'419 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'419 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'420 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | OTHER_NAME't => Shift_act Nis'421 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'421 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'422 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'422 => Default_reduce_act Prod'jump_statement'0
  | Ninit Nis'423 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'424 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'424 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STATIC_ASSERT't => Shift_act Nis'9 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'425 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'425 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'426 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'426 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RPAREN't => Shift_act Nis'427 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'427 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'428 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'429 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'430 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'430 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STATIC_ASSERT't => Shift_act Nis'9 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'431 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'431 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'432 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'432 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RPAREN't => Shift_act Nis'433 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'433 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'434 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'435 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | COLON't => Shift_act Nis'436 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'436 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'437 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'438 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'438 => Default_reduce_act Prod'jump_statement'1
  | Ninit Nis'439 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'440 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | COLON't => Shift_act Nis'441 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'441 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'442 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'443 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'443 => Default_reduce_act Prod'jump_statement'2
  | Ninit Nis'444 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'445 (eq_refl _)
    | LPAREN't => Reduce_act Prod'asm_attributes'0
    | CONST't => Shift_act Nis'446 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'445 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'445 (eq_refl _)
    | LPAREN't => Reduce_act Prod'asm_attributes'0
    | CONST't => Shift_act Nis'446 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'446 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'445 (eq_refl _)
    | LPAREN't => Reduce_act Prod'asm_attributes'0
    | CONST't => Shift_act Nis'446 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'447 => Default_reduce_act Prod'asm_attributes'1
  | Ninit Nis'448 => Default_reduce_act Prod'asm_attributes'2
  | Ninit Nis'449 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'450 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'450 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | STRING_LITERAL't => Shift_act Nis'451 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'451 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Reduce_act Prod'asm_arguments'0
    | COLON't => Shift_act Nis'452 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'452 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | STRING_LITERAL't => Reduce_act Prod'asm_op_name'0
    | RPAREN't => Reduce_act Prod'asm_operands'0
    | LBRACK't => Shift_act Nis'453 (eq_refl _)
    | COLON't => Reduce_act Prod'asm_operands'0
    | _ => Fail_act
    end)
  | Ninit Nis'453 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | OTHER_NAME't => Shift_act Nis'454 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'454 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RBRACK't => Shift_act Nis'455 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'455 => Default_reduce_act Prod'asm_op_name'1
  | Ninit Nis'456 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Reduce_act Prod'asm_operands'1
    | COMMA't => Shift_act Nis'457 (eq_refl _)
    | COLON't => Reduce_act Prod'asm_operands'1
    | _ => Fail_act
    end)
  | Ninit Nis'457 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | STRING_LITERAL't => Reduce_act Prod'asm_op_name'0
    | LBRACK't => Shift_act Nis'453 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'458 => Default_reduce_act Prod'asm_operands_ne'0
  | Ninit Nis'459 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | STRING_LITERAL't => Shift_act Nis'460 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'460 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'461 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'461 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'462 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'463 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'463 => Default_reduce_act Prod'asm_operand'0
  | Ninit Nis'464 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Reduce_act Prod'asm_arguments'1
    | COLON't => Shift_act Nis'465 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'465 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | STRING_LITERAL't => Reduce_act Prod'asm_op_name'0
    | RPAREN't => Reduce_act Prod'asm_operands'0
    | LBRACK't => Shift_act Nis'453 (eq_refl _)
    | COLON't => Reduce_act Prod'asm_operands'0
    | _ => Fail_act
    end)
  | Ninit Nis'466 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Reduce_act Prod'asm_arguments'2
    | COLON't => Shift_act Nis'467 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'467 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | STRING_LITERAL't => Shift_act Nis'468 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'468 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Reduce_act Prod'asm_flags'0
    | COMMA't => Shift_act Nis'469 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'469 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | STRING_LITERAL't => Shift_act Nis'468 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'470 => Default_reduce_act Prod'asm_flags'1
  | Ninit Nis'471 => Default_reduce_act Prod'asm_arguments'3
  | Ninit Nis'472 => Default_reduce_act Prod'asm_operands_ne'1
  | Ninit Nis'473 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'474 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'474 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'475 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'475 => Default_reduce_act Prod'asm_statement'0
  | Ninit Nis'476 => Default_reduce_act Prod'labeled_statement_statement_dangerous_'1
  | Ninit Nis'477 => Default_reduce_act Prod'statement_dangerous'3
  | Ninit Nis'478 => Default_reduce_act Prod'statement_dangerous'0
  | Ninit Nis'479 => Default_reduce_act Prod'statement_dangerous'5
  | Ninit Nis'480 => Default_reduce_act Prod'statement_dangerous'4
  | Ninit Nis'481 => Default_reduce_act Prod'statement_dangerous'2
  | Ninit Nis'482 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'483 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'483 => Default_reduce_act Prod'expression_statement'0
  | Ninit Nis'484 => Default_reduce_act Prod'statement_dangerous'1
  | Ninit Nis'485 => Default_reduce_act Prod'statement_dangerous'6
  | Ninit Nis'486 => Default_reduce_act Prod'labeled_statement_statement_dangerous_'2
  | Ninit Nis'487 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'488 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'488 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'489 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'489 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'490 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'491 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'491 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'492 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'492 => Default_reduce_act Prod'iteration_statement_statement_dangerous_'1
  | Ninit Nis'493 => Default_reduce_act Prod'iteration_statement_statement_dangerous_'13
  | Ninit Nis'494 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'495 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'495 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'496 => Default_reduce_act Prod'iteration_statement_statement_dangerous_'7
  | Ninit Nis'497 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'498 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'498 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RPAREN't => Shift_act Nis'499 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'499 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'500 => Default_reduce_act Prod'iteration_statement_statement_dangerous_'10
  | Ninit Nis'501 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'502 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'502 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'503 => Default_reduce_act Prod'iteration_statement_statement_dangerous_'4
  | Ninit Nis'504 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'505 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'505 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'506 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'506 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RPAREN't => Shift_act Nis'507 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'507 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'508 => Default_reduce_act Prod'iteration_statement_statement_dangerous_'11
  | Ninit Nis'509 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'510 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'510 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'511 => Default_reduce_act Prod'iteration_statement_statement_dangerous_'5
  | Ninit Nis'512 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'513 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'513 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RPAREN't => Shift_act Nis'514 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'514 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'515 => Default_reduce_act Prod'iteration_statement_statement_dangerous_'8
  | Ninit Nis'516 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'517 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'517 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'518 => Default_reduce_act Prod'iteration_statement_statement_dangerous_'2
  | Ninit Nis'519 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'520 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'520 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RPAREN't => Shift_act Nis'521 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'521 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'522 => Default_reduce_act Prod'iteration_statement_statement_dangerous_'12
  | Ninit Nis'523 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'524 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'524 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'525 => Default_reduce_act Prod'iteration_statement_statement_dangerous_'6
  | Ninit Nis'526 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'527 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'527 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RPAREN't => Shift_act Nis'528 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'528 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'529 => Default_reduce_act Prod'iteration_statement_statement_dangerous_'9
  | Ninit Nis'530 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'531 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'531 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'532 => Default_reduce_act Prod'iteration_statement_statement_dangerous_'3
  | Ninit Nis'533 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'534 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'534 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | LPAREN't => Shift_act Nis'535 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'535 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'536 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'537 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'537 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'538 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'538 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | VOLATILE't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | VOID't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | VAR_NAME't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | UNSIGNED't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | UNION't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | UNDERSCORE_BOOL't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | TYPEDEF_NAME't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | TYPEDEF't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | TILDE't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | SWITCH't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | STRUCT't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | STRING_LITERAL't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | STATIC_ASSERT't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | STATIC't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | STAR't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | SIZEOF't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | SIGNED't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | SHORT't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | SEMICOLON't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | RETURN't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | RESTRICT't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | REGISTER't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | RBRACE't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | PRAGMA't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | PLUS't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | PACKED't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | OTHER_NAME't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | NORETURN't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | MINUS't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | LPAREN't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | LONG't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | LBRACE't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | INT't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | INLINE't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | INC't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | IF_'t => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | GOTO't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | FOR't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | FLOAT't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | EXTERN't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | ENUM't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | ELSE't => Reduce_act Prod'iteration_statement_statement_safe_'1
    | DOUBLE't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | DO't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | DEFAULT't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | DEC't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | CONTINUE't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | CONSTANT't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | CONST't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | CHAR't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | CASE't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | BUILTIN_VA_ARG't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | BUILTIN_OFFSETOF't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | BREAK't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | BANG't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | AUTO't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | ATTRIBUTE't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | ASM't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | AND't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | ALIGNOF't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | ALIGNAS't => Reduce_act Prod'iteration_statement_statement_dangerous_'1
    | _ => Fail_act
    end)
  | Ninit Nis'539 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | COLON't => Shift_act Nis'540 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'540 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'541 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'542 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | COLON't => Shift_act Nis'543 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'543 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'544 => Default_reduce_act Prod'labeled_statement_statement_safe_'1
  | Ninit Nis'545 => Default_reduce_act Prod'statement_safe'3
  | Ninit Nis'546 => Default_reduce_act Prod'statement_safe'0
  | Ninit Nis'547 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Reduce_act Prod'statement_dangerous'5
    | VOLATILE't => Reduce_act Prod'statement_dangerous'5
    | VOID't => Reduce_act Prod'statement_dangerous'5
    | VAR_NAME't => Reduce_act Prod'statement_dangerous'5
    | UNSIGNED't => Reduce_act Prod'statement_dangerous'5
    | UNION't => Reduce_act Prod'statement_dangerous'5
    | UNDERSCORE_BOOL't => Reduce_act Prod'statement_dangerous'5
    | TYPEDEF_NAME't => Reduce_act Prod'statement_dangerous'5
    | TYPEDEF't => Reduce_act Prod'statement_dangerous'5
    | TILDE't => Reduce_act Prod'statement_dangerous'5
    | SWITCH't => Reduce_act Prod'statement_dangerous'5
    | STRUCT't => Reduce_act Prod'statement_dangerous'5
    | STRING_LITERAL't => Reduce_act Prod'statement_dangerous'5
    | STATIC_ASSERT't => Reduce_act Prod'statement_dangerous'5
    | STATIC't => Reduce_act Prod'statement_dangerous'5
    | STAR't => Reduce_act Prod'statement_dangerous'5
    | SIZEOF't => Reduce_act Prod'statement_dangerous'5
    | SIGNED't => Reduce_act Prod'statement_dangerous'5
    | SHORT't => Reduce_act Prod'statement_dangerous'5
    | SEMICOLON't => Reduce_act Prod'statement_dangerous'5
    | RETURN't => Reduce_act Prod'statement_dangerous'5
    | RESTRICT't => Reduce_act Prod'statement_dangerous'5
    | REGISTER't => Reduce_act Prod'statement_dangerous'5
    | RBRACE't => Reduce_act Prod'statement_dangerous'5
    | PRAGMA't => Reduce_act Prod'statement_dangerous'5
    | PLUS't => Reduce_act Prod'statement_dangerous'5
    | PACKED't => Reduce_act Prod'statement_dangerous'5
    | OTHER_NAME't => Reduce_act Prod'statement_dangerous'5
    | NORETURN't => Reduce_act Prod'statement_dangerous'5
    | MINUS't => Reduce_act Prod'statement_dangerous'5
    | LPAREN't => Reduce_act Prod'statement_dangerous'5
    | LONG't => Reduce_act Prod'statement_dangerous'5
    | LBRACE't => Reduce_act Prod'statement_dangerous'5
    | INT't => Reduce_act Prod'statement_dangerous'5
    | INLINE't => Reduce_act Prod'statement_dangerous'5
    | INC't => Reduce_act Prod'statement_dangerous'5
    | IF_'t => Reduce_act Prod'statement_dangerous'5
    | GOTO't => Reduce_act Prod'statement_dangerous'5
    | FOR't => Reduce_act Prod'statement_dangerous'5
    | FLOAT't => Reduce_act Prod'statement_dangerous'5
    | EXTERN't => Reduce_act Prod'statement_dangerous'5
    | ENUM't => Reduce_act Prod'statement_dangerous'5
    | ELSE't => Reduce_act Prod'statement_safe'5
    | DOUBLE't => Reduce_act Prod'statement_dangerous'5
    | DO't => Reduce_act Prod'statement_dangerous'5
    | DEFAULT't => Reduce_act Prod'statement_dangerous'5
    | DEC't => Reduce_act Prod'statement_dangerous'5
    | CONTINUE't => Reduce_act Prod'statement_dangerous'5
    | CONSTANT't => Reduce_act Prod'statement_dangerous'5
    | CONST't => Reduce_act Prod'statement_dangerous'5
    | CHAR't => Reduce_act Prod'statement_dangerous'5
    | CASE't => Reduce_act Prod'statement_dangerous'5
    | BUILTIN_VA_ARG't => Reduce_act Prod'statement_dangerous'5
    | BUILTIN_OFFSETOF't => Reduce_act Prod'statement_dangerous'5
    | BREAK't => Reduce_act Prod'statement_dangerous'5
    | BANG't => Reduce_act Prod'statement_dangerous'5
    | AUTO't => Reduce_act Prod'statement_dangerous'5
    | ATTRIBUTE't => Reduce_act Prod'statement_dangerous'5
    | ASM't => Reduce_act Prod'statement_dangerous'5
    | AND't => Reduce_act Prod'statement_dangerous'5
    | ALIGNOF't => Reduce_act Prod'statement_dangerous'5
    | ALIGNAS't => Reduce_act Prod'statement_dangerous'5
    | _ => Fail_act
    end)
  | Ninit Nis'548 => Default_reduce_act Prod'statement_safe'4
  | Ninit Nis'549 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Reduce_act Prod'statement_dangerous'2
    | VOLATILE't => Reduce_act Prod'statement_dangerous'2
    | VOID't => Reduce_act Prod'statement_dangerous'2
    | VAR_NAME't => Reduce_act Prod'statement_dangerous'2
    | UNSIGNED't => Reduce_act Prod'statement_dangerous'2
    | UNION't => Reduce_act Prod'statement_dangerous'2
    | UNDERSCORE_BOOL't => Reduce_act Prod'statement_dangerous'2
    | TYPEDEF_NAME't => Reduce_act Prod'statement_dangerous'2
    | TYPEDEF't => Reduce_act Prod'statement_dangerous'2
    | TILDE't => Reduce_act Prod'statement_dangerous'2
    | SWITCH't => Reduce_act Prod'statement_dangerous'2
    | STRUCT't => Reduce_act Prod'statement_dangerous'2
    | STRING_LITERAL't => Reduce_act Prod'statement_dangerous'2
    | STATIC_ASSERT't => Reduce_act Prod'statement_dangerous'2
    | STATIC't => Reduce_act Prod'statement_dangerous'2
    | STAR't => Reduce_act Prod'statement_dangerous'2
    | SIZEOF't => Reduce_act Prod'statement_dangerous'2
    | SIGNED't => Reduce_act Prod'statement_dangerous'2
    | SHORT't => Reduce_act Prod'statement_dangerous'2
    | SEMICOLON't => Reduce_act Prod'statement_dangerous'2
    | RETURN't => Reduce_act Prod'statement_dangerous'2
    | RESTRICT't => Reduce_act Prod'statement_dangerous'2
    | REGISTER't => Reduce_act Prod'statement_dangerous'2
    | RBRACE't => Reduce_act Prod'statement_dangerous'2
    | PRAGMA't => Reduce_act Prod'statement_dangerous'2
    | PLUS't => Reduce_act Prod'statement_dangerous'2
    | PACKED't => Reduce_act Prod'statement_dangerous'2
    | OTHER_NAME't => Reduce_act Prod'statement_dangerous'2
    | NORETURN't => Reduce_act Prod'statement_dangerous'2
    | MINUS't => Reduce_act Prod'statement_dangerous'2
    | LPAREN't => Reduce_act Prod'statement_dangerous'2
    | LONG't => Reduce_act Prod'statement_dangerous'2
    | LBRACE't => Reduce_act Prod'statement_dangerous'2
    | INT't => Reduce_act Prod'statement_dangerous'2
    | INLINE't => Reduce_act Prod'statement_dangerous'2
    | INC't => Reduce_act Prod'statement_dangerous'2
    | IF_'t => Reduce_act Prod'statement_dangerous'2
    | GOTO't => Reduce_act Prod'statement_dangerous'2
    | FOR't => Reduce_act Prod'statement_dangerous'2
    | FLOAT't => Reduce_act Prod'statement_dangerous'2
    | EXTERN't => Reduce_act Prod'statement_dangerous'2
    | ENUM't => Reduce_act Prod'statement_dangerous'2
    | ELSE't => Reduce_act Prod'statement_safe'2
    | DOUBLE't => Reduce_act Prod'statement_dangerous'2
    | DO't => Reduce_act Prod'statement_dangerous'2
    | DEFAULT't => Reduce_act Prod'statement_dangerous'2
    | DEC't => Reduce_act Prod'statement_dangerous'2
    | CONTINUE't => Reduce_act Prod'statement_dangerous'2
    | CONSTANT't => Reduce_act Prod'statement_dangerous'2
    | CONST't => Reduce_act Prod'statement_dangerous'2
    | CHAR't => Reduce_act Prod'statement_dangerous'2
    | CASE't => Reduce_act Prod'statement_dangerous'2
    | BUILTIN_VA_ARG't => Reduce_act Prod'statement_dangerous'2
    | BUILTIN_OFFSETOF't => Reduce_act Prod'statement_dangerous'2
    | BREAK't => Reduce_act Prod'statement_dangerous'2
    | BANG't => Reduce_act Prod'statement_dangerous'2
    | AUTO't => Reduce_act Prod'statement_dangerous'2
    | ATTRIBUTE't => Reduce_act Prod'statement_dangerous'2
    | ASM't => Reduce_act Prod'statement_dangerous'2
    | AND't => Reduce_act Prod'statement_dangerous'2
    | ALIGNOF't => Reduce_act Prod'statement_dangerous'2
    | ALIGNAS't => Reduce_act Prod'statement_dangerous'2
    | _ => Fail_act
    end)
  | Ninit Nis'550 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Reduce_act Prod'statement_dangerous'1
    | VOLATILE't => Reduce_act Prod'statement_dangerous'1
    | VOID't => Reduce_act Prod'statement_dangerous'1
    | VAR_NAME't => Reduce_act Prod'statement_dangerous'1
    | UNSIGNED't => Reduce_act Prod'statement_dangerous'1
    | UNION't => Reduce_act Prod'statement_dangerous'1
    | UNDERSCORE_BOOL't => Reduce_act Prod'statement_dangerous'1
    | TYPEDEF_NAME't => Reduce_act Prod'statement_dangerous'1
    | TYPEDEF't => Reduce_act Prod'statement_dangerous'1
    | TILDE't => Reduce_act Prod'statement_dangerous'1
    | SWITCH't => Reduce_act Prod'statement_dangerous'1
    | STRUCT't => Reduce_act Prod'statement_dangerous'1
    | STRING_LITERAL't => Reduce_act Prod'statement_dangerous'1
    | STATIC_ASSERT't => Reduce_act Prod'statement_dangerous'1
    | STATIC't => Reduce_act Prod'statement_dangerous'1
    | STAR't => Reduce_act Prod'statement_dangerous'1
    | SIZEOF't => Reduce_act Prod'statement_dangerous'1
    | SIGNED't => Reduce_act Prod'statement_dangerous'1
    | SHORT't => Reduce_act Prod'statement_dangerous'1
    | SEMICOLON't => Reduce_act Prod'statement_dangerous'1
    | RETURN't => Reduce_act Prod'statement_dangerous'1
    | RESTRICT't => Reduce_act Prod'statement_dangerous'1
    | REGISTER't => Reduce_act Prod'statement_dangerous'1
    | RBRACE't => Reduce_act Prod'statement_dangerous'1
    | PRAGMA't => Reduce_act Prod'statement_dangerous'1
    | PLUS't => Reduce_act Prod'statement_dangerous'1
    | PACKED't => Reduce_act Prod'statement_dangerous'1
    | OTHER_NAME't => Reduce_act Prod'statement_dangerous'1
    | NORETURN't => Reduce_act Prod'statement_dangerous'1
    | MINUS't => Reduce_act Prod'statement_dangerous'1
    | LPAREN't => Reduce_act Prod'statement_dangerous'1
    | LONG't => Reduce_act Prod'statement_dangerous'1
    | LBRACE't => Reduce_act Prod'statement_dangerous'1
    | INT't => Reduce_act Prod'statement_dangerous'1
    | INLINE't => Reduce_act Prod'statement_dangerous'1
    | INC't => Reduce_act Prod'statement_dangerous'1
    | IF_'t => Reduce_act Prod'statement_dangerous'1
    | GOTO't => Reduce_act Prod'statement_dangerous'1
    | FOR't => Reduce_act Prod'statement_dangerous'1
    | FLOAT't => Reduce_act Prod'statement_dangerous'1
    | EXTERN't => Reduce_act Prod'statement_dangerous'1
    | ENUM't => Reduce_act Prod'statement_dangerous'1
    | ELSE't => Reduce_act Prod'statement_safe'1
    | DOUBLE't => Reduce_act Prod'statement_dangerous'1
    | DO't => Reduce_act Prod'statement_dangerous'1
    | DEFAULT't => Reduce_act Prod'statement_dangerous'1
    | DEC't => Reduce_act Prod'statement_dangerous'1
    | CONTINUE't => Reduce_act Prod'statement_dangerous'1
    | CONSTANT't => Reduce_act Prod'statement_dangerous'1
    | CONST't => Reduce_act Prod'statement_dangerous'1
    | CHAR't => Reduce_act Prod'statement_dangerous'1
    | CASE't => Reduce_act Prod'statement_dangerous'1
    | BUILTIN_VA_ARG't => Reduce_act Prod'statement_dangerous'1
    | BUILTIN_OFFSETOF't => Reduce_act Prod'statement_dangerous'1
    | BREAK't => Reduce_act Prod'statement_dangerous'1
    | BANG't => Reduce_act Prod'statement_dangerous'1
    | AUTO't => Reduce_act Prod'statement_dangerous'1
    | ATTRIBUTE't => Reduce_act Prod'statement_dangerous'1
    | ASM't => Reduce_act Prod'statement_dangerous'1
    | AND't => Reduce_act Prod'statement_dangerous'1
    | ALIGNOF't => Reduce_act Prod'statement_dangerous'1
    | ALIGNAS't => Reduce_act Prod'statement_dangerous'1
    | _ => Fail_act
    end)
  | Ninit Nis'551 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Reduce_act Prod'statement_dangerous'6
    | VOLATILE't => Reduce_act Prod'statement_dangerous'6
    | VOID't => Reduce_act Prod'statement_dangerous'6
    | VAR_NAME't => Reduce_act Prod'statement_dangerous'6
    | UNSIGNED't => Reduce_act Prod'statement_dangerous'6
    | UNION't => Reduce_act Prod'statement_dangerous'6
    | UNDERSCORE_BOOL't => Reduce_act Prod'statement_dangerous'6
    | TYPEDEF_NAME't => Reduce_act Prod'statement_dangerous'6
    | TYPEDEF't => Reduce_act Prod'statement_dangerous'6
    | TILDE't => Reduce_act Prod'statement_dangerous'6
    | SWITCH't => Reduce_act Prod'statement_dangerous'6
    | STRUCT't => Reduce_act Prod'statement_dangerous'6
    | STRING_LITERAL't => Reduce_act Prod'statement_dangerous'6
    | STATIC_ASSERT't => Reduce_act Prod'statement_dangerous'6
    | STATIC't => Reduce_act Prod'statement_dangerous'6
    | STAR't => Reduce_act Prod'statement_dangerous'6
    | SIZEOF't => Reduce_act Prod'statement_dangerous'6
    | SIGNED't => Reduce_act Prod'statement_dangerous'6
    | SHORT't => Reduce_act Prod'statement_dangerous'6
    | SEMICOLON't => Reduce_act Prod'statement_dangerous'6
    | RETURN't => Reduce_act Prod'statement_dangerous'6
    | RESTRICT't => Reduce_act Prod'statement_dangerous'6
    | REGISTER't => Reduce_act Prod'statement_dangerous'6
    | RBRACE't => Reduce_act Prod'statement_dangerous'6
    | PRAGMA't => Reduce_act Prod'statement_dangerous'6
    | PLUS't => Reduce_act Prod'statement_dangerous'6
    | PACKED't => Reduce_act Prod'statement_dangerous'6
    | OTHER_NAME't => Reduce_act Prod'statement_dangerous'6
    | NORETURN't => Reduce_act Prod'statement_dangerous'6
    | MINUS't => Reduce_act Prod'statement_dangerous'6
    | LPAREN't => Reduce_act Prod'statement_dangerous'6
    | LONG't => Reduce_act Prod'statement_dangerous'6
    | LBRACE't => Reduce_act Prod'statement_dangerous'6
    | INT't => Reduce_act Prod'statement_dangerous'6
    | INLINE't => Reduce_act Prod'statement_dangerous'6
    | INC't => Reduce_act Prod'statement_dangerous'6
    | IF_'t => Reduce_act Prod'statement_dangerous'6
    | GOTO't => Reduce_act Prod'statement_dangerous'6
    | FOR't => Reduce_act Prod'statement_dangerous'6
    | FLOAT't => Reduce_act Prod'statement_dangerous'6
    | EXTERN't => Reduce_act Prod'statement_dangerous'6
    | ENUM't => Reduce_act Prod'statement_dangerous'6
    | ELSE't => Reduce_act Prod'statement_safe'6
    | DOUBLE't => Reduce_act Prod'statement_dangerous'6
    | DO't => Reduce_act Prod'statement_dangerous'6
    | DEFAULT't => Reduce_act Prod'statement_dangerous'6
    | DEC't => Reduce_act Prod'statement_dangerous'6
    | CONTINUE't => Reduce_act Prod'statement_dangerous'6
    | CONSTANT't => Reduce_act Prod'statement_dangerous'6
    | CONST't => Reduce_act Prod'statement_dangerous'6
    | CHAR't => Reduce_act Prod'statement_dangerous'6
    | CASE't => Reduce_act Prod'statement_dangerous'6
    | BUILTIN_VA_ARG't => Reduce_act Prod'statement_dangerous'6
    | BUILTIN_OFFSETOF't => Reduce_act Prod'statement_dangerous'6
    | BREAK't => Reduce_act Prod'statement_dangerous'6
    | BANG't => Reduce_act Prod'statement_dangerous'6
    | AUTO't => Reduce_act Prod'statement_dangerous'6
    | ATTRIBUTE't => Reduce_act Prod'statement_dangerous'6
    | ASM't => Reduce_act Prod'statement_dangerous'6
    | AND't => Reduce_act Prod'statement_dangerous'6
    | ALIGNOF't => Reduce_act Prod'statement_dangerous'6
    | ALIGNAS't => Reduce_act Prod'statement_dangerous'6
    | _ => Fail_act
    end)
  | Ninit Nis'552 => Default_reduce_act Prod'labeled_statement_statement_safe_'2
  | Ninit Nis'553 => Default_reduce_act Prod'iteration_statement_statement_safe_'13
  | Ninit Nis'554 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'555 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'555 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'556 => Default_reduce_act Prod'iteration_statement_statement_safe_'7
  | Ninit Nis'557 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'558 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'558 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RPAREN't => Shift_act Nis'559 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'559 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'560 => Default_reduce_act Prod'iteration_statement_statement_safe_'10
  | Ninit Nis'561 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'562 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'562 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'563 => Default_reduce_act Prod'iteration_statement_statement_safe_'4
  | Ninit Nis'564 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'565 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'565 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'566 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'566 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RPAREN't => Shift_act Nis'567 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'567 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'568 => Default_reduce_act Prod'iteration_statement_statement_safe_'11
  | Ninit Nis'569 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'570 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'570 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'571 => Default_reduce_act Prod'iteration_statement_statement_safe_'5
  | Ninit Nis'572 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'573 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'573 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RPAREN't => Shift_act Nis'574 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'574 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'575 => Default_reduce_act Prod'iteration_statement_statement_safe_'8
  | Ninit Nis'576 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'577 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'577 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'578 => Default_reduce_act Prod'iteration_statement_statement_safe_'2
  | Ninit Nis'579 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'580 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'580 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RPAREN't => Shift_act Nis'581 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'581 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'582 => Default_reduce_act Prod'iteration_statement_statement_safe_'12
  | Ninit Nis'583 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'584 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'584 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'585 => Default_reduce_act Prod'iteration_statement_statement_safe_'6
  | Ninit Nis'586 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Shift_act Nis'587 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'587 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | RPAREN't => Shift_act Nis'588 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'588 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'589 => Default_reduce_act Prod'iteration_statement_statement_safe_'9
  | Ninit Nis'590 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | RPAREN't => Shift_act Nis'591 (eq_refl _)
    | COMMA't => Shift_act Nis'187 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'591 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'592 => Default_reduce_act Prod'iteration_statement_statement_safe_'3
  | Ninit Nis'593 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | ELSE't => Shift_act Nis'594 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'594 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'406 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'410 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'414 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'416 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'423 (eq_refl _)
    | DO't => Shift_act Nis'428 (eq_refl _)
    | DEFAULT't => Shift_act Nis'539 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'541 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'595 => Default_reduce_act Prod'selection_statement_safe'0
  | Ninit Nis'596 => Default_reduce_act Prod'selection_statement_dangerous'1
  | Ninit Nis'597 => Default_reduce_act Prod'selection_statement_dangerous'0
  | Ninit Nis'598 => Default_reduce_act Prod'labeled_statement_statement_safe_'0
  | Ninit Nis'599 => Default_reduce_act Prod'labeled_statement_statement_dangerous_'0
  | Ninit Nis'600 => Default_reduce_act Prod'selection_statement_safe'1
  | Ninit Nis'601 => Default_reduce_act Prod'selection_statement_dangerous'2
  | Ninit Nis'602 => Default_reduce_act Prod'iteration_statement_statement_safe_'0
  | Ninit Nis'603 => Default_reduce_act Prod'iteration_statement_statement_dangerous_'0
  | Ninit Nis'604 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | ELSE't => Shift_act Nis'605 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'605 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'606 => Default_reduce_act Prod'compound_statement'1
  | Ninit Nis'607 => Default_reduce_act Prod'block_item'2
  | Ninit Nis'608 => Default_reduce_act Prod'block_item'1
  | Ninit Nis'609 => Default_reduce_act Prod'block_item'0
  | Ninit Nis'610 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | WHILE't => Shift_act Nis'387 (eq_refl _)
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | VAR_NAME't => Shift_act Nis'11 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | TILDE't => Shift_act Nis'12 (eq_refl _)
    | SWITCH't => Shift_act Nis'391 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STRING_LITERAL't => Shift_act Nis'13 (eq_refl _)
    | STATIC_ASSERT't => Shift_act Nis'9 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | STAR't => Shift_act Nis'14 (eq_refl _)
    | SIZEOF't => Shift_act Nis'15 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | SEMICOLON't => Shift_act Nis'395 (eq_refl _)
    | RETURN't => Shift_act Nis'396 (eq_refl _)
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | RBRACE't => Shift_act Nis'611 (eq_refl _)
    | PRAGMA't => Shift_act Nis'607 (eq_refl _)
    | PLUS't => Shift_act Nis'16 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | OTHER_NAME't => Shift_act Nis'400 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | MINUS't => Shift_act Nis'17 (eq_refl _)
    | LPAREN't => Shift_act Nis'24 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | INC't => Shift_act Nis'27 (eq_refl _)
    | IF_'t => Shift_act Nis'402 (eq_refl _)
    | GOTO't => Shift_act Nis'420 (eq_refl _)
    | FOR't => Shift_act Nis'429 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | DO't => Shift_act Nis'434 (eq_refl _)
    | DEFAULT't => Shift_act Nis'435 (eq_refl _)
    | DEC't => Shift_act Nis'40 (eq_refl _)
    | CONTINUE't => Shift_act Nis'437 (eq_refl _)
    | CONSTANT't => Shift_act Nis'41 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | CASE't => Shift_act Nis'439 (eq_refl _)
    | BUILTIN_VA_ARG't => Shift_act Nis'42 (eq_refl _)
    | BUILTIN_OFFSETOF't => Shift_act Nis'44 (eq_refl _)
    | BREAK't => Shift_act Nis'442 (eq_refl _)
    | BANG't => Shift_act Nis'51 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ASM't => Shift_act Nis'444 (eq_refl _)
    | AND't => Shift_act Nis'52 (eq_refl _)
    | ALIGNOF't => Shift_act Nis'53 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'611 => Default_reduce_act Prod'compound_statement'0
  | Ninit Nis'612 => Default_reduce_act Prod'block_item_list'1
  | Ninit Nis'613 => Default_reduce_act Prod'block_item_list'0
  | Ninit Nis'614 => Default_reduce_act Prod'declaration_list'1
  | Ninit Nis'615 => Default_reduce_act Prod'function_definition'0
  | Ninit Nis'616 => Default_reduce_act Prod'declaration_list'0
  | Ninit Nis'617 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | VOLATILE't => Shift_act Nis'1 (eq_refl _)
    | VOID't => Shift_act Nis'2 (eq_refl _)
    | UNSIGNED't => Shift_act Nis'3 (eq_refl _)
    | UNION't => Shift_act Nis'4 (eq_refl _)
    | UNDERSCORE_BOOL't => Shift_act Nis'5 (eq_refl _)
    | TYPEDEF_NAME't => Shift_act Nis'6 (eq_refl _)
    | TYPEDEF't => Shift_act Nis'7 (eq_refl _)
    | STRUCT't => Shift_act Nis'8 (eq_refl _)
    | STATIC't => Shift_act Nis'82 (eq_refl _)
    | SIGNED't => Shift_act Nis'19 (eq_refl _)
    | SHORT't => Shift_act Nis'20 (eq_refl _)
    | SEMICOLON't => Reduce_act Prod'attribute_specifier_list'0
    | RESTRICT't => Shift_act Nis'21 (eq_refl _)
    | REGISTER't => Shift_act Nis'84 (eq_refl _)
    | PACKED't => Shift_act Nis'22 (eq_refl _)
    | NORETURN't => Shift_act Nis'85 (eq_refl _)
    | LONG't => Shift_act Nis'25 (eq_refl _)
    | LBRACE't => Reduce_act Prod'attribute_specifier_list'0
    | INT't => Shift_act Nis'26 (eq_refl _)
    | INLINE't => Shift_act Nis'86 (eq_refl _)
    | FLOAT't => Shift_act Nis'29 (eq_refl _)
    | EXTERN't => Shift_act Nis'87 (eq_refl _)
    | EQ't => Reduce_act Prod'attribute_specifier_list'0
    | ENUM't => Shift_act Nis'30 (eq_refl _)
    | DOUBLE't => Shift_act Nis'46 (eq_refl _)
    | CONST't => Shift_act Nis'47 (eq_refl _)
    | COMMA't => Reduce_act Prod'attribute_specifier_list'0
    | CHAR't => Shift_act Nis'48 (eq_refl _)
    | AUTO't => Shift_act Nis'88 (eq_refl _)
    | ATTRIBUTE't => Shift_act Nis'31 (eq_refl _)
    | ALIGNAS't => Shift_act Nis'49 (eq_refl _)
    | _ => Fail_act
    end)
  | Ninit Nis'618 => Lookahead_act (fun terminal:terminal =>
    match terminal return lookahead_action terminal with
    | SEMICOLON't => Reduce_act Prod'init_declarator'0
    | LBRACE't => Shift_act Nis'386 (eq_refl _)
    | EQ't => Shift_act Nis'380 (eq_refl _)
    | COMMA't => Reduce_act Prod'init_declarator'0
    | _ => Fail_act
    end)
  | Ninit Nis'619 => Default_reduce_act Prod'function_definition'1
  | Ninit Nis'620 => Default_reduce_act Prod'external_declaration'1
  | Ninit Nis'621 => Default_reduce_act Prod'translation_unit'0
  end.

Definition goto_table (state:state) (nt:nonterminal) :=
  match state, nt return option { s:noninitstate | NT nt = last_symb_of_non_init_state s } with
  | Init Init'0, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Init Init'0, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Init Init'0, translation_unit_file'nt => None  | Init Init'0, translation_unit'nt => Some (exist _ Nis'367 (eq_refl _))
  | Init Init'0, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Init Init'0, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Init Init'0, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Init Init'0, static_assert_declaration'nt => Some (exist _ Nis'370 (eq_refl _))
  | Init Init'0, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Init Init'0, function_definition'nt => Some (exist _ Nis'371 (eq_refl _))
  | Init Init'0, external_declaration'nt => Some (exist _ Nis'621 (eq_refl _))
  | Init Init'0, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Init Init'0, declaration_specifiers'nt => Some (exist _ Nis'373 (eq_refl _))
  | Init Init'0, declaration'nt => Some (exist _ Nis'620 (eq_refl _))
  | Init Init'0, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'10, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'10, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'10, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'10, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'10, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'10, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'10, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'10, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'10, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'10, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'10, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'10, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'10, constant_expression'nt => Some (exist _ Nis'358 (eq_refl _))
  | Ninit Nis'10, conditional_expression'nt => Some (exist _ Nis'258 (eq_refl _))
  | Ninit Nis'10, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'10, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'10, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'15, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'15, unary_expression'nt => Some (exist _ Nis'357 (eq_refl _))
  | Ninit Nis'15, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'15, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'18, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'18, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'18, type_specifier'nt => Some (exist _ Nis'55 (eq_refl _))
  | Ninit Nis'18, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'18, type_qualifier'nt => Some (exist _ Nis'57 (eq_refl _))
  | Ninit Nis'18, type_name'nt => Some (exist _ Nis'355 (eq_refl _))
  | Ninit Nis'18, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'18, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'18, specifier_qualifier_list'nt => Some (exist _ Nis'274 (eq_refl _))
  | Ninit Nis'18, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'18, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'18, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'18, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'18, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'18, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'18, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'18, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'18, expression'nt => Some (exist _ Nis'347 (eq_refl _))
  | Ninit Nis'18, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'18, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'18, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'18, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'18, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'18, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'18, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'18, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'18, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'23, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'23, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'23, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'23, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'23, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'23, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'23, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'23, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'23, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'23, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'23, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'23, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'23, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'23, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'23, assignment_expression'nt => Some (exist _ Nis'196 (eq_refl _))
  | Ninit Nis'23, argument_expression_list'nt => Some (exist _ Nis'353 (eq_refl _))
  | Ninit Nis'23, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'23, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'24, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'24, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'24, type_specifier'nt => Some (exist _ Nis'55 (eq_refl _))
  | Ninit Nis'24, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'24, type_qualifier'nt => Some (exist _ Nis'57 (eq_refl _))
  | Ninit Nis'24, type_name'nt => Some (exist _ Nis'350 (eq_refl _))
  | Ninit Nis'24, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'24, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'24, specifier_qualifier_list'nt => Some (exist _ Nis'274 (eq_refl _))
  | Ninit Nis'24, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'24, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'24, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'24, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'24, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'24, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'24, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'24, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'24, expression'nt => Some (exist _ Nis'347 (eq_refl _))
  | Ninit Nis'24, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'24, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'24, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'24, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'24, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'24, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'24, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'24, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'24, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'27, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'27, unary_expression'nt => Some (exist _ Nis'349 (eq_refl _))
  | Ninit Nis'27, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'27, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'28, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'28, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'28, type_specifier'nt => Some (exist _ Nis'55 (eq_refl _))
  | Ninit Nis'28, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'28, type_qualifier'nt => Some (exist _ Nis'57 (eq_refl _))
  | Ninit Nis'28, type_name'nt => Some (exist _ Nis'326 (eq_refl _))
  | Ninit Nis'28, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'28, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'28, specifier_qualifier_list'nt => Some (exist _ Nis'274 (eq_refl _))
  | Ninit Nis'28, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'28, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'28, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'28, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'28, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'28, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'28, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'28, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'28, expression'nt => Some (exist _ Nis'347 (eq_refl _))
  | Ninit Nis'28, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'28, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'28, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'28, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'28, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'28, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'28, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'28, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'28, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'30, attribute_specifier_list'nt => Some (exist _ Nis'308 (eq_refl _))
  | Ninit Nis'30, attribute_specifier'nt => Some (exist _ Nis'244 (eq_refl _))
  | Ninit Nis'33, gcc_attribute_word'nt => Some (exist _ Nis'37 (eq_refl _))
  | Ninit Nis'33, gcc_attribute_list'nt => Some (exist _ Nis'302 (eq_refl _))
  | Ninit Nis'33, gcc_attribute'nt => Some (exist _ Nis'307 (eq_refl _))
  | Ninit Nis'38, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'38, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'38, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'38, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'38, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'38, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'38, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'38, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'38, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'38, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'38, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'38, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'38, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'38, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'38, assignment_expression'nt => Some (exist _ Nis'196 (eq_refl _))
  | Ninit Nis'38, argument_expression_list'nt => Some (exist _ Nis'300 (eq_refl _))
  | Ninit Nis'38, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'38, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'40, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'40, unary_expression'nt => Some (exist _ Nis'299 (eq_refl _))
  | Ninit Nis'40, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'40, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'43, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'43, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'43, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'43, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'43, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'43, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'43, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'43, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'43, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'43, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'43, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'43, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'43, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'43, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'43, assignment_expression'nt => Some (exist _ Nis'295 (eq_refl _))
  | Ninit Nis'43, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'43, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'45, type_specifier'nt => Some (exist _ Nis'55 (eq_refl _))
  | Ninit Nis'45, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'45, type_qualifier'nt => Some (exist _ Nis'57 (eq_refl _))
  | Ninit Nis'45, type_name'nt => Some (exist _ Nis'282 (eq_refl _))
  | Ninit Nis'45, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'45, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'45, specifier_qualifier_list'nt => Some (exist _ Nis'274 (eq_refl _))
  | Ninit Nis'45, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'45, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'50, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'50, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'50, type_specifier'nt => Some (exist _ Nis'55 (eq_refl _))
  | Ninit Nis'50, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'50, type_qualifier'nt => Some (exist _ Nis'57 (eq_refl _))
  | Ninit Nis'50, type_name'nt => Some (exist _ Nis'278 (eq_refl _))
  | Ninit Nis'50, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'50, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'50, specifier_qualifier_list'nt => Some (exist _ Nis'274 (eq_refl _))
  | Ninit Nis'50, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'50, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'50, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'50, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'50, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'50, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'50, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'50, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'50, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'50, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'50, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'50, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'50, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'50, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'50, assignment_expression'nt => Some (exist _ Nis'196 (eq_refl _))
  | Ninit Nis'50, argument_expression_list'nt => Some (exist _ Nis'280 (eq_refl _))
  | Ninit Nis'50, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'50, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'54, type_specifier'nt => Some (exist _ Nis'55 (eq_refl _))
  | Ninit Nis'54, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'54, type_qualifier'nt => Some (exist _ Nis'57 (eq_refl _))
  | Ninit Nis'54, type_name'nt => Some (exist _ Nis'272 (eq_refl _))
  | Ninit Nis'54, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'54, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'54, specifier_qualifier_list'nt => Some (exist _ Nis'274 (eq_refl _))
  | Ninit Nis'54, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'54, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'55, type_specifier'nt => Some (exist _ Nis'55 (eq_refl _))
  | Ninit Nis'55, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'55, type_qualifier'nt => Some (exist _ Nis'57 (eq_refl _))
  | Ninit Nis'55, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'55, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'55, specifier_qualifier_list'nt => Some (exist _ Nis'271 (eq_refl _))
  | Ninit Nis'55, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'55, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'57, type_specifier'nt => Some (exist _ Nis'55 (eq_refl _))
  | Ninit Nis'57, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'57, type_qualifier'nt => Some (exist _ Nis'57 (eq_refl _))
  | Ninit Nis'57, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'57, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'57, specifier_qualifier_list'nt => Some (exist _ Nis'270 (eq_refl _))
  | Ninit Nis'57, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'57, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'59, attribute_specifier_list'nt => Some (exist _ Nis'60 (eq_refl _))
  | Ninit Nis'59, attribute_specifier'nt => Some (exist _ Nis'244 (eq_refl _))
  | Ninit Nis'62, struct_declaration_list'nt => Some (exist _ Nis'63 (eq_refl _))
  | Ninit Nis'63, type_specifier'nt => Some (exist _ Nis'55 (eq_refl _))
  | Ninit Nis'63, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'63, type_qualifier'nt => Some (exist _ Nis'57 (eq_refl _))
  | Ninit Nis'63, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'63, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'63, struct_declaration'nt => Some (exist _ Nis'65 (eq_refl _))
  | Ninit Nis'63, static_assert_declaration'nt => Some (exist _ Nis'66 (eq_refl _))
  | Ninit Nis'63, specifier_qualifier_list'nt => Some (exist _ Nis'67 (eq_refl _))
  | Ninit Nis'63, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'63, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'67, struct_declarator_list'nt => Some (exist _ Nis'259 (eq_refl _))
  | Ninit Nis'67, struct_declarator'nt => Some (exist _ Nis'266 (eq_refl _))
  | Ninit Nis'67, pointer'nt => Some (exist _ Nis'78 (eq_refl _))
  | Ninit Nis'67, direct_declarator'nt => Some (exist _ Nis'232 (eq_refl _))
  | Ninit Nis'67, declarator_noattrend'nt => Some (exist _ Nis'242 (eq_refl _))
  | Ninit Nis'67, declarator'nt => Some (exist _ Nis'263 (eq_refl _))
  | Ninit Nis'69, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'69, type_qualifier_list'nt => Some (exist _ Nis'70 (eq_refl _))
  | Ninit Nis'69, type_qualifier'nt => Some (exist _ Nis'74 (eq_refl _))
  | Ninit Nis'69, pointer'nt => Some (exist _ Nis'75 (eq_refl _))
  | Ninit Nis'69, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'70, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'70, type_qualifier'nt => Some (exist _ Nis'71 (eq_refl _))
  | Ninit Nis'70, pointer'nt => Some (exist _ Nis'72 (eq_refl _))
  | Ninit Nis'70, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'77, pointer'nt => Some (exist _ Nis'78 (eq_refl _))
  | Ninit Nis'77, direct_declarator'nt => Some (exist _ Nis'232 (eq_refl _))
  | Ninit Nis'77, declarator_noattrend'nt => Some (exist _ Nis'242 (eq_refl _))
  | Ninit Nis'77, declarator'nt => Some (exist _ Nis'246 (eq_refl _))
  | Ninit Nis'78, direct_declarator'nt => Some (exist _ Nis'79 (eq_refl _))
  | Ninit Nis'80, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'80, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'80, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'80, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'80, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'80, parameter_type_list'nt => Some (exist _ Nis'108 (eq_refl _))
  | Ninit Nis'80, parameter_list'nt => Some (exist _ Nis'110 (eq_refl _))
  | Ninit Nis'80, parameter_declaration'nt => Some (exist _ Nis'221 (eq_refl _))
  | Ninit Nis'80, identifier_list'nt => Some (exist _ Nis'252 (eq_refl _))
  | Ninit Nis'80, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'80, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'80, declaration_specifiers'nt => Some (exist _ Nis'114 (eq_refl _))
  | Ninit Nis'80, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'89, type_specifier'nt => Some (exist _ Nis'90 (eq_refl _))
  | Ninit Nis'89, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'89, type_qualifier'nt => Some (exist _ Nis'91 (eq_refl _))
  | Ninit Nis'89, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'89, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'89, storage_class_specifier'nt => Some (exist _ Nis'92 (eq_refl _))
  | Ninit Nis'89, function_specifier'nt => Some (exist _ Nis'93 (eq_refl _))
  | Ninit Nis'89, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'89, declaration_specifiers_typespec_opt'nt => Some (exist _ Nis'99 (eq_refl _))
  | Ninit Nis'89, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'90, type_specifier'nt => Some (exist _ Nis'90 (eq_refl _))
  | Ninit Nis'90, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'90, type_qualifier'nt => Some (exist _ Nis'91 (eq_refl _))
  | Ninit Nis'90, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'90, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'90, storage_class_specifier'nt => Some (exist _ Nis'92 (eq_refl _))
  | Ninit Nis'90, function_specifier'nt => Some (exist _ Nis'93 (eq_refl _))
  | Ninit Nis'90, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'90, declaration_specifiers_typespec_opt'nt => Some (exist _ Nis'98 (eq_refl _))
  | Ninit Nis'90, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'91, type_specifier'nt => Some (exist _ Nis'90 (eq_refl _))
  | Ninit Nis'91, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'91, type_qualifier'nt => Some (exist _ Nis'91 (eq_refl _))
  | Ninit Nis'91, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'91, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'91, storage_class_specifier'nt => Some (exist _ Nis'92 (eq_refl _))
  | Ninit Nis'91, function_specifier'nt => Some (exist _ Nis'93 (eq_refl _))
  | Ninit Nis'91, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'91, declaration_specifiers_typespec_opt'nt => Some (exist _ Nis'97 (eq_refl _))
  | Ninit Nis'91, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'92, type_specifier'nt => Some (exist _ Nis'90 (eq_refl _))
  | Ninit Nis'92, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'92, type_qualifier'nt => Some (exist _ Nis'91 (eq_refl _))
  | Ninit Nis'92, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'92, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'92, storage_class_specifier'nt => Some (exist _ Nis'92 (eq_refl _))
  | Ninit Nis'92, function_specifier'nt => Some (exist _ Nis'93 (eq_refl _))
  | Ninit Nis'92, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'92, declaration_specifiers_typespec_opt'nt => Some (exist _ Nis'96 (eq_refl _))
  | Ninit Nis'92, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'93, type_specifier'nt => Some (exist _ Nis'90 (eq_refl _))
  | Ninit Nis'93, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'93, type_qualifier'nt => Some (exist _ Nis'91 (eq_refl _))
  | Ninit Nis'93, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'93, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'93, storage_class_specifier'nt => Some (exist _ Nis'92 (eq_refl _))
  | Ninit Nis'93, function_specifier'nt => Some (exist _ Nis'93 (eq_refl _))
  | Ninit Nis'93, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'93, declaration_specifiers_typespec_opt'nt => Some (exist _ Nis'95 (eq_refl _))
  | Ninit Nis'93, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'100, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'100, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'100, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'100, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'100, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'100, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'100, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'100, declaration_specifiers'nt => Some (exist _ Nis'107 (eq_refl _))
  | Ninit Nis'100, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'101, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'101, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'101, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'101, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'101, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'101, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'101, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'101, declaration_specifiers'nt => Some (exist _ Nis'106 (eq_refl _))
  | Ninit Nis'101, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'102, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'102, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'102, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'102, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'102, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'102, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'102, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'102, declaration_specifiers'nt => Some (exist _ Nis'103 (eq_refl _))
  | Ninit Nis'102, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'104, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'104, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'104, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'104, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'104, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'104, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'104, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'104, declaration_specifiers'nt => Some (exist _ Nis'105 (eq_refl _))
  | Ninit Nis'104, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'111, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'111, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'111, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'111, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'111, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'111, parameter_declaration'nt => Some (exist _ Nis'113 (eq_refl _))
  | Ninit Nis'111, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'111, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'111, declaration_specifiers'nt => Some (exist _ Nis'114 (eq_refl _))
  | Ninit Nis'111, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'114, pointer'nt => Some (exist _ Nis'215 (eq_refl _))
  | Ninit Nis'114, direct_declarator'nt => Some (exist _ Nis'232 (eq_refl _))
  | Ninit Nis'114, direct_abstract_declarator'nt => Some (exist _ Nis'241 (eq_refl _))
  | Ninit Nis'114, declarator_noattrend'nt => Some (exist _ Nis'242 (eq_refl _))
  | Ninit Nis'114, declarator'nt => Some (exist _ Nis'250 (eq_refl _))
  | Ninit Nis'114, abstract_declarator'nt => Some (exist _ Nis'251 (eq_refl _))
  | Ninit Nis'115, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'115, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'115, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'115, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'115, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'115, pointer'nt => Some (exist _ Nis'215 (eq_refl _))
  | Ninit Nis'115, parameter_type_list'nt => Some (exist _ Nis'230 (eq_refl _))
  | Ninit Nis'115, parameter_list'nt => Some (exist _ Nis'110 (eq_refl _))
  | Ninit Nis'115, parameter_declaration'nt => Some (exist _ Nis'221 (eq_refl _))
  | Ninit Nis'115, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'115, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'115, direct_declarator'nt => Some (exist _ Nis'232 (eq_refl _))
  | Ninit Nis'115, direct_abstract_declarator'nt => Some (exist _ Nis'241 (eq_refl _))
  | Ninit Nis'115, declarator_noattrend'nt => Some (exist _ Nis'242 (eq_refl _))
  | Ninit Nis'115, declarator'nt => Some (exist _ Nis'246 (eq_refl _))
  | Ninit Nis'115, declaration_specifiers'nt => Some (exist _ Nis'114 (eq_refl _))
  | Ninit Nis'115, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'115, abstract_declarator'nt => Some (exist _ Nis'248 (eq_refl _))
  | Ninit Nis'117, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'117, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'117, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'117, type_qualifier_list'nt => Some (exist _ Nis'209 (eq_refl _))
  | Ninit Nis'117, type_qualifier'nt => Some (exist _ Nis'74 (eq_refl _))
  | Ninit Nis'117, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'117, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'117, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'117, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'117, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'117, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'117, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'117, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'117, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'117, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'117, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'117, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'117, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'117, assignment_expression'nt => Some (exist _ Nis'213 (eq_refl _))
  | Ninit Nis'117, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'117, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'119, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'119, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'119, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'119, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'119, cast_expression'nt => Some (exist _ Nis'208 (eq_refl _))
  | Ninit Nis'125, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'125, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'125, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'125, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'125, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'125, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'125, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'125, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'125, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'125, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'125, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'125, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'125, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'125, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'125, assignment_expression'nt => Some (exist _ Nis'196 (eq_refl _))
  | Ninit Nis'125, argument_expression_list'nt => Some (exist _ Nis'197 (eq_refl _))
  | Ninit Nis'125, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'125, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'127, assignment_operator'nt => Some (exist _ Nis'139 (eq_refl _))
  | Ninit Nis'139, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'139, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'139, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'139, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'139, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'139, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'139, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'139, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'139, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'139, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'139, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'139, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'139, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'139, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'139, assignment_expression'nt => Some (exist _ Nis'195 (eq_refl _))
  | Ninit Nis'139, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'139, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'141, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'141, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'141, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'141, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'141, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'141, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'141, additive_expression'nt => Some (exist _ Nis'150 (eq_refl _))
  | Ninit Nis'143, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'143, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'143, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'143, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'143, cast_expression'nt => Some (exist _ Nis'144 (eq_refl _))
  | Ninit Nis'145, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'145, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'145, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'145, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'145, cast_expression'nt => Some (exist _ Nis'146 (eq_refl _))
  | Ninit Nis'147, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'147, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'147, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'147, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'147, cast_expression'nt => Some (exist _ Nis'148 (eq_refl _))
  | Ninit Nis'151, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'151, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'151, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'151, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'151, multiplicative_expression'nt => Some (exist _ Nis'152 (eq_refl _))
  | Ninit Nis'151, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'153, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'153, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'153, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'153, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'153, multiplicative_expression'nt => Some (exist _ Nis'154 (eq_refl _))
  | Ninit Nis'153, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'155, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'155, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'155, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'155, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'155, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'155, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'155, additive_expression'nt => Some (exist _ Nis'156 (eq_refl _))
  | Ninit Nis'158, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'158, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'158, shift_expression'nt => Some (exist _ Nis'159 (eq_refl _))
  | Ninit Nis'158, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'158, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'158, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'158, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'158, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'161, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'161, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'161, shift_expression'nt => Some (exist _ Nis'162 (eq_refl _))
  | Ninit Nis'161, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'161, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'161, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'161, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'161, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'163, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'163, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'163, shift_expression'nt => Some (exist _ Nis'164 (eq_refl _))
  | Ninit Nis'163, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'163, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'163, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'163, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'163, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'165, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'165, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'165, shift_expression'nt => Some (exist _ Nis'166 (eq_refl _))
  | Ninit Nis'165, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'165, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'165, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'165, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'165, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'168, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'168, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'168, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'168, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'168, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'168, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'168, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'168, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'168, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'168, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'168, expression'nt => Some (exist _ Nis'186 (eq_refl _))
  | Ninit Nis'168, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'168, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'168, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'168, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'168, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'168, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'168, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'170, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'170, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'170, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'170, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'170, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'170, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'170, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'170, inclusive_OR_expression'nt => Some (exist _ Nis'171 (eq_refl _))
  | Ninit Nis'170, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'170, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'170, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'170, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'170, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'172, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'172, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'172, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'172, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'172, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'172, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'172, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'172, exclusive_OR_expression'nt => Some (exist _ Nis'173 (eq_refl _))
  | Ninit Nis'172, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'172, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'172, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'172, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'174, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'174, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'174, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'174, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'174, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'174, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'174, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'174, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'174, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'174, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'174, AND_expression'nt => Some (exist _ Nis'180 (eq_refl _))
  | Ninit Nis'176, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'176, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'176, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'176, relational_expression'nt => Some (exist _ Nis'177 (eq_refl _))
  | Ninit Nis'176, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'176, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'176, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'176, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'176, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'178, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'178, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'178, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'178, relational_expression'nt => Some (exist _ Nis'179 (eq_refl _))
  | Ninit Nis'178, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'178, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'178, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'178, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'178, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'181, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'181, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'181, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'181, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'181, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'181, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'181, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'181, equality_expression'nt => Some (exist _ Nis'182 (eq_refl _))
  | Ninit Nis'181, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'181, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'187, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'187, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'187, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'187, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'187, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'187, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'187, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'187, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'187, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'187, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'187, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'187, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'187, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'187, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'187, assignment_expression'nt => Some (exist _ Nis'189 (eq_refl _))
  | Ninit Nis'187, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'187, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'190, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'190, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'190, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'190, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'190, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'190, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'190, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'190, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'190, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'190, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'190, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'190, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'190, conditional_expression'nt => Some (exist _ Nis'191 (eq_refl _))
  | Ninit Nis'190, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'190, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'190, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'193, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'193, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'193, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'193, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'193, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'193, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'193, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'193, logical_AND_expression'nt => Some (exist _ Nis'194 (eq_refl _))
  | Ninit Nis'193, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'193, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'193, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'193, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'193, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'193, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'199, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'199, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'199, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'199, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'199, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'199, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'199, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'199, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'199, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'199, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'199, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'199, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'199, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'199, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'199, assignment_expression'nt => Some (exist _ Nis'200 (eq_refl _))
  | Ninit Nis'199, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'199, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'201, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'201, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'201, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'201, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'201, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'201, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'201, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'201, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'201, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'201, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'201, expression'nt => Some (exist _ Nis'202 (eq_refl _))
  | Ninit Nis'201, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'201, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'201, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'201, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'201, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'201, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'201, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'209, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'209, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'209, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'209, type_qualifier'nt => Some (exist _ Nis'71 (eq_refl _))
  | Ninit Nis'209, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'209, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'209, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'209, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'209, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'209, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'209, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'209, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'209, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'209, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'209, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'209, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'209, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'209, assignment_expression'nt => Some (exist _ Nis'211 (eq_refl _))
  | Ninit Nis'209, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'209, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'215, direct_declarator'nt => Some (exist _ Nis'79 (eq_refl _))
  | Ninit Nis'215, direct_abstract_declarator'nt => Some (exist _ Nis'216 (eq_refl _))
  | Ninit Nis'217, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'217, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'217, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'217, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'217, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'217, parameter_type_list'nt => Some (exist _ Nis'219 (eq_refl _))
  | Ninit Nis'217, parameter_list'nt => Some (exist _ Nis'110 (eq_refl _))
  | Ninit Nis'217, parameter_declaration'nt => Some (exist _ Nis'221 (eq_refl _))
  | Ninit Nis'217, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'217, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'217, declaration_specifiers'nt => Some (exist _ Nis'114 (eq_refl _))
  | Ninit Nis'217, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'222, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'222, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'222, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'222, type_qualifier_list'nt => Some (exist _ Nis'224 (eq_refl _))
  | Ninit Nis'222, type_qualifier'nt => Some (exist _ Nis'74 (eq_refl _))
  | Ninit Nis'222, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'222, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'222, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'222, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'222, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'222, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'222, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'222, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'222, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'222, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'222, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'222, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'222, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'222, assignment_expression'nt => Some (exist _ Nis'228 (eq_refl _))
  | Ninit Nis'222, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'222, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'224, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'224, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'224, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'224, type_qualifier'nt => Some (exist _ Nis'71 (eq_refl _))
  | Ninit Nis'224, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'224, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'224, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'224, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'224, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'224, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'224, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'224, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'224, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'224, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'224, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'224, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'224, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'224, assignment_expression'nt => Some (exist _ Nis'226 (eq_refl _))
  | Ninit Nis'224, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'224, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'233, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'233, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'233, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'233, type_qualifier_list'nt => Some (exist _ Nis'235 (eq_refl _))
  | Ninit Nis'233, type_qualifier'nt => Some (exist _ Nis'74 (eq_refl _))
  | Ninit Nis'233, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'233, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'233, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'233, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'233, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'233, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'233, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'233, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'233, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'233, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'233, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'233, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'233, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'233, assignment_expression'nt => Some (exist _ Nis'239 (eq_refl _))
  | Ninit Nis'233, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'233, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'235, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'235, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'235, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'235, type_qualifier'nt => Some (exist _ Nis'71 (eq_refl _))
  | Ninit Nis'235, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'235, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'235, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'235, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'235, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'235, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'235, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'235, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'235, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'235, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'235, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'235, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'235, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'235, assignment_expression'nt => Some (exist _ Nis'237 (eq_refl _))
  | Ninit Nis'235, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'235, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'242, attribute_specifier_list'nt => Some (exist _ Nis'243 (eq_refl _))
  | Ninit Nis'242, attribute_specifier'nt => Some (exist _ Nis'244 (eq_refl _))
  | Ninit Nis'244, attribute_specifier_list'nt => Some (exist _ Nis'245 (eq_refl _))
  | Ninit Nis'244, attribute_specifier'nt => Some (exist _ Nis'244 (eq_refl _))
  | Ninit Nis'256, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'256, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'256, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'256, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'256, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'256, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'256, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'256, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'256, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'256, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'256, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'256, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'256, constant_expression'nt => Some (exist _ Nis'257 (eq_refl _))
  | Ninit Nis'256, conditional_expression'nt => Some (exist _ Nis'258 (eq_refl _))
  | Ninit Nis'256, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'256, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'256, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'261, struct_declarator'nt => Some (exist _ Nis'262 (eq_refl _))
  | Ninit Nis'261, pointer'nt => Some (exist _ Nis'78 (eq_refl _))
  | Ninit Nis'261, direct_declarator'nt => Some (exist _ Nis'232 (eq_refl _))
  | Ninit Nis'261, declarator_noattrend'nt => Some (exist _ Nis'242 (eq_refl _))
  | Ninit Nis'261, declarator'nt => Some (exist _ Nis'263 (eq_refl _))
  | Ninit Nis'264, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'264, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'264, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'264, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'264, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'264, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'264, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'264, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'264, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'264, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'264, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'264, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'264, constant_expression'nt => Some (exist _ Nis'265 (eq_refl _))
  | Ninit Nis'264, conditional_expression'nt => Some (exist _ Nis'258 (eq_refl _))
  | Ninit Nis'264, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'264, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'264, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'267, struct_declaration_list'nt => Some (exist _ Nis'268 (eq_refl _))
  | Ninit Nis'268, type_specifier'nt => Some (exist _ Nis'55 (eq_refl _))
  | Ninit Nis'268, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'268, type_qualifier'nt => Some (exist _ Nis'57 (eq_refl _))
  | Ninit Nis'268, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'268, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'268, struct_declaration'nt => Some (exist _ Nis'65 (eq_refl _))
  | Ninit Nis'268, static_assert_declaration'nt => Some (exist _ Nis'66 (eq_refl _))
  | Ninit Nis'268, specifier_qualifier_list'nt => Some (exist _ Nis'67 (eq_refl _))
  | Ninit Nis'268, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'268, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'274, pointer'nt => Some (exist _ Nis'276 (eq_refl _))
  | Ninit Nis'274, direct_abstract_declarator'nt => Some (exist _ Nis'241 (eq_refl _))
  | Ninit Nis'274, abstract_declarator'nt => Some (exist _ Nis'277 (eq_refl _))
  | Ninit Nis'275, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'275, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'275, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'275, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'275, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'275, pointer'nt => Some (exist _ Nis'276 (eq_refl _))
  | Ninit Nis'275, parameter_type_list'nt => Some (exist _ Nis'230 (eq_refl _))
  | Ninit Nis'275, parameter_list'nt => Some (exist _ Nis'110 (eq_refl _))
  | Ninit Nis'275, parameter_declaration'nt => Some (exist _ Nis'221 (eq_refl _))
  | Ninit Nis'275, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'275, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'275, direct_abstract_declarator'nt => Some (exist _ Nis'241 (eq_refl _))
  | Ninit Nis'275, declaration_specifiers'nt => Some (exist _ Nis'114 (eq_refl _))
  | Ninit Nis'275, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'275, abstract_declarator'nt => Some (exist _ Nis'248 (eq_refl _))
  | Ninit Nis'276, direct_abstract_declarator'nt => Some (exist _ Nis'216 (eq_refl _))
  | Ninit Nis'284, designator_list'nt => Some (exist _ Nis'291 (eq_refl _))
  | Ninit Nis'284, designator'nt => Some (exist _ Nis'294 (eq_refl _))
  | Ninit Nis'286, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'286, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'286, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'286, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'286, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'286, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'286, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'286, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'286, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'286, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'286, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'286, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'286, constant_expression'nt => Some (exist _ Nis'287 (eq_refl _))
  | Ninit Nis'286, conditional_expression'nt => Some (exist _ Nis'258 (eq_refl _))
  | Ninit Nis'286, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'286, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'286, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'291, designator'nt => Some (exist _ Nis'293 (eq_refl _))
  | Ninit Nis'296, type_specifier'nt => Some (exist _ Nis'55 (eq_refl _))
  | Ninit Nis'296, type_qualifier_noattr'nt => Some (exist _ Nis'56 (eq_refl _))
  | Ninit Nis'296, type_qualifier'nt => Some (exist _ Nis'57 (eq_refl _))
  | Ninit Nis'296, type_name'nt => Some (exist _ Nis'297 (eq_refl _))
  | Ninit Nis'296, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'296, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'296, specifier_qualifier_list'nt => Some (exist _ Nis'274 (eq_refl _))
  | Ninit Nis'296, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'296, attribute_specifier'nt => Some (exist _ Nis'73 (eq_refl _))
  | Ninit Nis'305, gcc_attribute_word'nt => Some (exist _ Nis'37 (eq_refl _))
  | Ninit Nis'305, gcc_attribute'nt => Some (exist _ Nis'306 (eq_refl _))
  | Ninit Nis'310, enumerator_list'nt => Some (exist _ Nis'312 (eq_refl _))
  | Ninit Nis'310, enumerator'nt => Some (exist _ Nis'320 (eq_refl _))
  | Ninit Nis'310, enumeration_constant'nt => Some (exist _ Nis'317 (eq_refl _))
  | Ninit Nis'314, enumerator'nt => Some (exist _ Nis'316 (eq_refl _))
  | Ninit Nis'314, enumeration_constant'nt => Some (exist _ Nis'317 (eq_refl _))
  | Ninit Nis'318, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'318, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'318, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'318, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'318, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'318, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'318, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'318, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'318, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'318, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'318, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'318, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'318, constant_expression'nt => Some (exist _ Nis'319 (eq_refl _))
  | Ninit Nis'318, conditional_expression'nt => Some (exist _ Nis'258 (eq_refl _))
  | Ninit Nis'318, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'318, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'318, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'321, enumerator_list'nt => Some (exist _ Nis'322 (eq_refl _))
  | Ninit Nis'321, enumerator'nt => Some (exist _ Nis'320 (eq_refl _))
  | Ninit Nis'321, enumeration_constant'nt => Some (exist _ Nis'317 (eq_refl _))
  | Ninit Nis'324, enumerator'nt => Some (exist _ Nis'316 (eq_refl _))
  | Ninit Nis'324, enumeration_constant'nt => Some (exist _ Nis'317 (eq_refl _))
  | Ninit Nis'328, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'328, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'328, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'328, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'328, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'328, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'328, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'328, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'328, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'328, initializer_list'nt => Some (exist _ Nis'343 (eq_refl _))
  | Ninit Nis'328, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'328, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'328, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'328, designator_list'nt => Some (exist _ Nis'334 (eq_refl _))
  | Ninit Nis'328, designator'nt => Some (exist _ Nis'294 (eq_refl _))
  | Ninit Nis'328, designation'nt => Some (exist _ Nis'340 (eq_refl _))
  | Ninit Nis'328, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'328, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'328, c_initializer'nt => Some (exist _ Nis'342 (eq_refl _))
  | Ninit Nis'328, assignment_expression'nt => Some (exist _ Nis'338 (eq_refl _))
  | Ninit Nis'328, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'328, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'329, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'329, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'329, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'329, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'329, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'329, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'329, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'329, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'329, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'329, initializer_list'nt => Some (exist _ Nis'330 (eq_refl _))
  | Ninit Nis'329, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'329, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'329, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'329, designator_list'nt => Some (exist _ Nis'334 (eq_refl _))
  | Ninit Nis'329, designator'nt => Some (exist _ Nis'294 (eq_refl _))
  | Ninit Nis'329, designation'nt => Some (exist _ Nis'340 (eq_refl _))
  | Ninit Nis'329, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'329, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'329, c_initializer'nt => Some (exist _ Nis'342 (eq_refl _))
  | Ninit Nis'329, assignment_expression'nt => Some (exist _ Nis'338 (eq_refl _))
  | Ninit Nis'329, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'329, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'332, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'332, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'332, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'332, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'332, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'332, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'332, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'332, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'332, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'332, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'332, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'332, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'332, designator_list'nt => Some (exist _ Nis'334 (eq_refl _))
  | Ninit Nis'332, designator'nt => Some (exist _ Nis'294 (eq_refl _))
  | Ninit Nis'332, designation'nt => Some (exist _ Nis'336 (eq_refl _))
  | Ninit Nis'332, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'332, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'332, c_initializer'nt => Some (exist _ Nis'339 (eq_refl _))
  | Ninit Nis'332, assignment_expression'nt => Some (exist _ Nis'338 (eq_refl _))
  | Ninit Nis'332, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'332, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'334, designator'nt => Some (exist _ Nis'293 (eq_refl _))
  | Ninit Nis'336, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'336, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'336, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'336, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'336, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'336, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'336, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'336, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'336, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'336, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'336, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'336, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'336, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'336, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'336, c_initializer'nt => Some (exist _ Nis'337 (eq_refl _))
  | Ninit Nis'336, assignment_expression'nt => Some (exist _ Nis'338 (eq_refl _))
  | Ninit Nis'336, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'336, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'340, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'340, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'340, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'340, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'340, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'340, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'340, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'340, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'340, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'340, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'340, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'340, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'340, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'340, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'340, c_initializer'nt => Some (exist _ Nis'341 (eq_refl _))
  | Ninit Nis'340, assignment_expression'nt => Some (exist _ Nis'338 (eq_refl _))
  | Ninit Nis'340, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'340, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'345, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'345, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'345, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'345, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'345, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'345, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'345, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'345, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'345, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'345, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'345, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'345, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'345, designator_list'nt => Some (exist _ Nis'334 (eq_refl _))
  | Ninit Nis'345, designator'nt => Some (exist _ Nis'294 (eq_refl _))
  | Ninit Nis'345, designation'nt => Some (exist _ Nis'336 (eq_refl _))
  | Ninit Nis'345, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'345, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'345, c_initializer'nt => Some (exist _ Nis'339 (eq_refl _))
  | Ninit Nis'345, assignment_expression'nt => Some (exist _ Nis'338 (eq_refl _))
  | Ninit Nis'345, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'345, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'351, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'351, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'351, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'351, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'351, cast_expression'nt => Some (exist _ Nis'352 (eq_refl _))
  | Ninit Nis'367, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'367, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'367, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'367, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'367, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'367, static_assert_declaration'nt => Some (exist _ Nis'370 (eq_refl _))
  | Ninit Nis'367, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'367, function_definition'nt => Some (exist _ Nis'371 (eq_refl _))
  | Ninit Nis'367, external_declaration'nt => Some (exist _ Nis'372 (eq_refl _))
  | Ninit Nis'367, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'367, declaration_specifiers'nt => Some (exist _ Nis'373 (eq_refl _))
  | Ninit Nis'367, declaration'nt => Some (exist _ Nis'620 (eq_refl _))
  | Ninit Nis'367, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'373, pointer'nt => Some (exist _ Nis'78 (eq_refl _))
  | Ninit Nis'373, init_declarator_list'nt => Some (exist _ Nis'375 (eq_refl _))
  | Ninit Nis'373, init_declarator'nt => Some (exist _ Nis'382 (eq_refl _))
  | Ninit Nis'373, direct_declarator'nt => Some (exist _ Nis'232 (eq_refl _))
  | Ninit Nis'373, declarator_noattrend'nt => Some (exist _ Nis'383 (eq_refl _))
  | Ninit Nis'373, declarator'nt => Some (exist _ Nis'618 (eq_refl _))
  | Ninit Nis'377, pointer'nt => Some (exist _ Nis'78 (eq_refl _))
  | Ninit Nis'377, init_declarator'nt => Some (exist _ Nis'378 (eq_refl _))
  | Ninit Nis'377, direct_declarator'nt => Some (exist _ Nis'232 (eq_refl _))
  | Ninit Nis'377, declarator_noattrend'nt => Some (exist _ Nis'242 (eq_refl _))
  | Ninit Nis'377, declarator'nt => Some (exist _ Nis'379 (eq_refl _))
  | Ninit Nis'380, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'380, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'380, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'380, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'380, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'380, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'380, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'380, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'380, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'380, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'380, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'380, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'380, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'380, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'380, c_initializer'nt => Some (exist _ Nis'381 (eq_refl _))
  | Ninit Nis'380, assignment_expression'nt => Some (exist _ Nis'338 (eq_refl _))
  | Ninit Nis'380, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'380, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'383, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'383, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'383, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'383, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'383, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'383, static_assert_declaration'nt => Some (exist _ Nis'370 (eq_refl _))
  | Ninit Nis'383, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'383, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'383, declaration_specifiers'nt => Some (exist _ Nis'384 (eq_refl _))
  | Ninit Nis'383, declaration_list'nt => Some (exist _ Nis'385 (eq_refl _))
  | Ninit Nis'383, declaration'nt => Some (exist _ Nis'616 (eq_refl _))
  | Ninit Nis'383, attribute_specifier_list'nt => Some (exist _ Nis'243 (eq_refl _))
  | Ninit Nis'383, attribute_specifier'nt => Some (exist _ Nis'617 (eq_refl _))
  | Ninit Nis'384, pointer'nt => Some (exist _ Nis'78 (eq_refl _))
  | Ninit Nis'384, init_declarator_list'nt => Some (exist _ Nis'375 (eq_refl _))
  | Ninit Nis'384, init_declarator'nt => Some (exist _ Nis'382 (eq_refl _))
  | Ninit Nis'384, direct_declarator'nt => Some (exist _ Nis'232 (eq_refl _))
  | Ninit Nis'384, declarator_noattrend'nt => Some (exist _ Nis'242 (eq_refl _))
  | Ninit Nis'384, declarator'nt => Some (exist _ Nis'379 (eq_refl _))
  | Ninit Nis'385, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'385, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'385, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'385, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'385, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'385, static_assert_declaration'nt => Some (exist _ Nis'370 (eq_refl _))
  | Ninit Nis'385, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'385, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'385, declaration_specifiers'nt => Some (exist _ Nis'384 (eq_refl _))
  | Ninit Nis'385, declaration'nt => Some (exist _ Nis'614 (eq_refl _))
  | Ninit Nis'385, compound_statement'nt => Some (exist _ Nis'615 (eq_refl _))
  | Ninit Nis'385, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'386, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'386, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'386, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'386, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'386, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'386, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'386, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'386, static_assert_declaration'nt => Some (exist _ Nis'370 (eq_refl _))
  | Ninit Nis'386, statement_dangerous'nt => Some (exist _ Nis'608 (eq_refl _))
  | Ninit Nis'386, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'386, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'386, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'386, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'386, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'386, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'386, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'386, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'386, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'386, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'386, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'386, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'386, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'386, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'386, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'386, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'386, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'386, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'386, declaration_specifiers'nt => Some (exist _ Nis'384 (eq_refl _))
  | Ninit Nis'386, declaration'nt => Some (exist _ Nis'609 (eq_refl _))
  | Ninit Nis'386, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'386, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'386, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'386, block_item_list'nt => Some (exist _ Nis'610 (eq_refl _))
  | Ninit Nis'386, block_item'nt => Some (exist _ Nis'613 (eq_refl _))
  | Ninit Nis'386, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'386, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'386, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'386, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'386, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'388, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'388, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'388, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'388, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'388, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'388, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'388, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'388, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'388, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'388, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'388, expression'nt => Some (exist _ Nis'389 (eq_refl _))
  | Ninit Nis'388, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'388, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'388, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'388, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'388, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'388, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'388, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'390, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'390, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'390, statement_dangerous'nt => Some (exist _ Nis'603 (eq_refl _))
  | Ninit Nis'390, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'390, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'390, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'390, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'390, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'390, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'390, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'390, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'390, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'390, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'390, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'390, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'390, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'390, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'390, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'390, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'390, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'390, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'390, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'390, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'390, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'390, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'390, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'392, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'392, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'392, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'392, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'392, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'392, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'392, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'392, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'392, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'392, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'392, expression'nt => Some (exist _ Nis'393 (eq_refl _))
  | Ninit Nis'392, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'392, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'392, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'392, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'392, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'392, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'392, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'394, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'394, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'394, statement_dangerous'nt => Some (exist _ Nis'601 (eq_refl _))
  | Ninit Nis'394, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'394, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'394, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'394, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'394, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'394, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'394, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'394, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'394, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'394, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'394, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'394, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'394, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'394, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'394, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'394, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'394, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'394, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'394, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'394, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'394, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'394, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'394, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'396, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'396, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'396, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'396, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'396, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'396, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'396, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'396, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'396, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'396, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'396, expression'nt => Some (exist _ Nis'398 (eq_refl _))
  | Ninit Nis'396, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'396, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'396, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'396, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'396, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'396, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'396, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'401, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'401, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'401, statement_dangerous'nt => Some (exist _ Nis'599 (eq_refl _))
  | Ninit Nis'401, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'401, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'401, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'401, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'401, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'401, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'401, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'401, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'401, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'401, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'401, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'401, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'401, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'401, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'401, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'401, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'401, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'401, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'401, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'401, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'401, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'401, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'401, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'403, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'403, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'403, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'403, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'403, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'403, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'403, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'403, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'403, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'403, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'403, expression'nt => Some (exist _ Nis'404 (eq_refl _))
  | Ninit Nis'403, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'403, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'403, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'403, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'403, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'403, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'403, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'405, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'405, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'405, statement_safe'nt => Some (exist _ Nis'604 (eq_refl _))
  | Ninit Nis'405, statement_dangerous'nt => Some (exist _ Nis'597 (eq_refl _))
  | Ninit Nis'405, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'405, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'405, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'405, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'405, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'405, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'405, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'405, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'405, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'405, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'405, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'405, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'405, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'405, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'405, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'405, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'405, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'405, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'405, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'405, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'405, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'405, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'405, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'405, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'405, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'405, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'407, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'407, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'407, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'407, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'407, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'407, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'407, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'407, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'407, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'407, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'407, expression'nt => Some (exist _ Nis'408 (eq_refl _))
  | Ninit Nis'407, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'407, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'407, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'407, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'407, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'407, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'407, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'409, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'409, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'409, statement_safe'nt => Some (exist _ Nis'602 (eq_refl _))
  | Ninit Nis'409, statement_dangerous'nt => Some (exist _ Nis'603 (eq_refl _))
  | Ninit Nis'409, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'409, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'409, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'409, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'409, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'409, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'409, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'409, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'409, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'409, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'409, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'409, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'409, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'409, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'409, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'409, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'409, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'409, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'409, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'409, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'409, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'409, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'409, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'409, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'409, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'409, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'411, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'411, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'411, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'411, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'411, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'411, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'411, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'411, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'411, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'411, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'411, expression'nt => Some (exist _ Nis'412 (eq_refl _))
  | Ninit Nis'411, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'411, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'411, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'411, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'411, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'411, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'411, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'413, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'413, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'413, statement_safe'nt => Some (exist _ Nis'600 (eq_refl _))
  | Ninit Nis'413, statement_dangerous'nt => Some (exist _ Nis'601 (eq_refl _))
  | Ninit Nis'413, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'413, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'413, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'413, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'413, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'413, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'413, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'413, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'413, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'413, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'413, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'413, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'413, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'413, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'413, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'413, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'413, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'413, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'413, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'413, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'413, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'413, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'413, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'413, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'413, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'413, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'415, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'415, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'415, statement_safe'nt => Some (exist _ Nis'598 (eq_refl _))
  | Ninit Nis'415, statement_dangerous'nt => Some (exist _ Nis'599 (eq_refl _))
  | Ninit Nis'415, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'415, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'415, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'415, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'415, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'415, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'415, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'415, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'415, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'415, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'415, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'415, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'415, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'415, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'415, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'415, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'415, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'415, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'415, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'415, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'415, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'415, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'415, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'415, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'415, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'415, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'417, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'417, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'417, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'417, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'417, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'417, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'417, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'417, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'417, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'417, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'417, expression'nt => Some (exist _ Nis'418 (eq_refl _))
  | Ninit Nis'417, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'417, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'417, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'417, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'417, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'417, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'417, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'419, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'419, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'419, statement_safe'nt => Some (exist _ Nis'593 (eq_refl _))
  | Ninit Nis'419, statement_dangerous'nt => Some (exist _ Nis'597 (eq_refl _))
  | Ninit Nis'419, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'419, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'419, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'419, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'419, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'419, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'419, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'419, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'419, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'419, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'419, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'419, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'419, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'419, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'419, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'419, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'419, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'419, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'419, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'419, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'419, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'419, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'419, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'419, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'419, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'419, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'424, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'424, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'424, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'424, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'424, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'424, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'424, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'424, static_assert_declaration'nt => Some (exist _ Nis'370 (eq_refl _))
  | Ninit Nis'424, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'424, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'424, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'424, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'424, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'424, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'424, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'424, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'424, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'424, expression'nt => Some (exist _ Nis'564 (eq_refl _))
  | Ninit Nis'424, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'424, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'424, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'424, declaration_specifiers'nt => Some (exist _ Nis'384 (eq_refl _))
  | Ninit Nis'424, declaration'nt => Some (exist _ Nis'579 (eq_refl _))
  | Ninit Nis'424, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'424, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'424, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'424, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'424, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'424, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'425, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'425, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'425, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'425, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'425, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'425, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'425, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'425, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'425, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'425, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'425, expression'nt => Some (exist _ Nis'557 (eq_refl _))
  | Ninit Nis'425, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'425, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'425, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'425, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'425, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'425, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'425, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'426, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'426, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'426, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'426, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'426, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'426, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'426, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'426, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'426, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'426, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'426, expression'nt => Some (exist _ Nis'554 (eq_refl _))
  | Ninit Nis'426, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'426, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'426, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'426, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'426, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'426, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'426, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'427, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'427, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'427, statement_safe'nt => Some (exist _ Nis'553 (eq_refl _))
  | Ninit Nis'427, statement_dangerous'nt => Some (exist _ Nis'493 (eq_refl _))
  | Ninit Nis'427, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'427, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'427, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'427, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'427, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'427, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'427, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'427, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'427, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'427, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'427, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'427, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'427, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'427, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'427, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'427, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'427, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'427, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'427, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'427, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'427, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'427, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'427, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'427, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'427, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'427, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'428, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'428, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'428, statement_dangerous'nt => Some (exist _ Nis'533 (eq_refl _))
  | Ninit Nis'428, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'428, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'428, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'428, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'428, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'428, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'428, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'428, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'428, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'428, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'428, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'428, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'428, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'428, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'428, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'428, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'428, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'428, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'428, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'428, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'428, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'428, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'428, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'430, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'430, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'430, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'430, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'430, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'430, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'430, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'430, static_assert_declaration'nt => Some (exist _ Nis'370 (eq_refl _))
  | Ninit Nis'430, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'430, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'430, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'430, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'430, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'430, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'430, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'430, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'430, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'430, expression'nt => Some (exist _ Nis'504 (eq_refl _))
  | Ninit Nis'430, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'430, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'430, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'430, declaration_specifiers'nt => Some (exist _ Nis'384 (eq_refl _))
  | Ninit Nis'430, declaration'nt => Some (exist _ Nis'519 (eq_refl _))
  | Ninit Nis'430, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'430, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'430, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'430, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'430, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'430, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'431, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'431, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'431, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'431, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'431, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'431, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'431, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'431, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'431, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'431, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'431, expression'nt => Some (exist _ Nis'497 (eq_refl _))
  | Ninit Nis'431, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'431, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'431, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'431, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'431, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'431, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'431, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'432, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'432, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'432, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'432, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'432, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'432, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'432, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'432, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'432, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'432, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'432, expression'nt => Some (exist _ Nis'494 (eq_refl _))
  | Ninit Nis'432, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'432, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'432, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'432, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'432, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'432, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'432, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'433, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'433, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'433, statement_dangerous'nt => Some (exist _ Nis'493 (eq_refl _))
  | Ninit Nis'433, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'433, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'433, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'433, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'433, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'433, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'433, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'433, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'433, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'433, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'433, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'433, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'433, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'433, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'433, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'433, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'433, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'433, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'433, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'433, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'433, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'433, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'433, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'434, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'434, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'434, statement_dangerous'nt => Some (exist _ Nis'487 (eq_refl _))
  | Ninit Nis'434, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'434, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'434, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'434, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'434, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'434, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'434, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'434, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'434, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'434, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'434, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'434, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'434, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'434, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'434, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'434, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'434, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'434, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'434, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'434, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'434, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'434, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'434, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'436, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'436, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'436, statement_dangerous'nt => Some (exist _ Nis'486 (eq_refl _))
  | Ninit Nis'436, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'436, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'436, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'436, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'436, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'436, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'436, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'436, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'436, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'436, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'436, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'436, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'436, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'436, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'436, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'436, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'436, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'436, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'436, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'436, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'436, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'436, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'436, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'439, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'439, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'439, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'439, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'439, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'439, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'439, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'439, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'439, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'439, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'439, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'439, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'439, constant_expression'nt => Some (exist _ Nis'440 (eq_refl _))
  | Ninit Nis'439, conditional_expression'nt => Some (exist _ Nis'258 (eq_refl _))
  | Ninit Nis'439, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'439, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'439, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'441, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'441, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'441, statement_dangerous'nt => Some (exist _ Nis'476 (eq_refl _))
  | Ninit Nis'441, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'441, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'441, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'441, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'441, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'441, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'441, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'441, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'441, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'441, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'441, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'441, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'441, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'441, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'441, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'441, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'441, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'441, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'441, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'441, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'441, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'441, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'441, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'444, asm_attributes'nt => Some (exist _ Nis'449 (eq_refl _))
  | Ninit Nis'445, asm_attributes'nt => Some (exist _ Nis'448 (eq_refl _))
  | Ninit Nis'446, asm_attributes'nt => Some (exist _ Nis'447 (eq_refl _))
  | Ninit Nis'451, asm_arguments'nt => Some (exist _ Nis'473 (eq_refl _))
  | Ninit Nis'452, asm_operands_ne'nt => Some (exist _ Nis'456 (eq_refl _))
  | Ninit Nis'452, asm_operands'nt => Some (exist _ Nis'464 (eq_refl _))
  | Ninit Nis'452, asm_operand'nt => Some (exist _ Nis'472 (eq_refl _))
  | Ninit Nis'452, asm_op_name'nt => Some (exist _ Nis'459 (eq_refl _))
  | Ninit Nis'457, asm_operand'nt => Some (exist _ Nis'458 (eq_refl _))
  | Ninit Nis'457, asm_op_name'nt => Some (exist _ Nis'459 (eq_refl _))
  | Ninit Nis'461, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'461, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'461, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'461, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'461, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'461, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'461, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'461, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'461, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'461, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'461, expression'nt => Some (exist _ Nis'462 (eq_refl _))
  | Ninit Nis'461, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'461, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'461, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'461, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'461, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'461, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'461, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'465, asm_operands_ne'nt => Some (exist _ Nis'456 (eq_refl _))
  | Ninit Nis'465, asm_operands'nt => Some (exist _ Nis'466 (eq_refl _))
  | Ninit Nis'465, asm_operand'nt => Some (exist _ Nis'472 (eq_refl _))
  | Ninit Nis'465, asm_op_name'nt => Some (exist _ Nis'459 (eq_refl _))
  | Ninit Nis'467, asm_flags'nt => Some (exist _ Nis'471 (eq_refl _))
  | Ninit Nis'469, asm_flags'nt => Some (exist _ Nis'470 (eq_refl _))
  | Ninit Nis'489, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'489, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'489, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'489, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'489, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'489, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'489, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'489, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'489, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'489, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'489, expression'nt => Some (exist _ Nis'490 (eq_refl _))
  | Ninit Nis'489, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'489, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'489, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'489, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'489, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'489, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'489, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'495, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'495, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'495, statement_dangerous'nt => Some (exist _ Nis'496 (eq_refl _))
  | Ninit Nis'495, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'495, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'495, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'495, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'495, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'495, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'495, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'495, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'495, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'495, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'495, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'495, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'495, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'495, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'495, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'495, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'495, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'495, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'495, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'495, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'495, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'495, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'495, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'498, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'498, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'498, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'498, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'498, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'498, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'498, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'498, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'498, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'498, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'498, expression'nt => Some (exist _ Nis'501 (eq_refl _))
  | Ninit Nis'498, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'498, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'498, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'498, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'498, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'498, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'498, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'499, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'499, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'499, statement_dangerous'nt => Some (exist _ Nis'500 (eq_refl _))
  | Ninit Nis'499, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'499, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'499, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'499, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'499, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'499, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'499, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'499, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'499, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'499, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'499, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'499, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'499, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'499, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'499, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'499, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'499, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'499, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'499, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'499, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'499, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'499, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'499, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'502, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'502, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'502, statement_dangerous'nt => Some (exist _ Nis'503 (eq_refl _))
  | Ninit Nis'502, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'502, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'502, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'502, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'502, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'502, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'502, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'502, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'502, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'502, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'502, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'502, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'502, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'502, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'502, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'502, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'502, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'502, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'502, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'502, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'502, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'502, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'502, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'505, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'505, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'505, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'505, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'505, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'505, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'505, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'505, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'505, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'505, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'505, expression'nt => Some (exist _ Nis'512 (eq_refl _))
  | Ninit Nis'505, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'505, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'505, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'505, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'505, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'505, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'505, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'506, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'506, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'506, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'506, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'506, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'506, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'506, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'506, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'506, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'506, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'506, expression'nt => Some (exist _ Nis'509 (eq_refl _))
  | Ninit Nis'506, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'506, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'506, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'506, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'506, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'506, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'506, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'507, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'507, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'507, statement_dangerous'nt => Some (exist _ Nis'508 (eq_refl _))
  | Ninit Nis'507, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'507, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'507, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'507, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'507, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'507, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'507, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'507, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'507, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'507, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'507, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'507, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'507, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'507, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'507, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'507, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'507, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'507, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'507, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'507, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'507, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'507, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'507, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'510, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'510, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'510, statement_dangerous'nt => Some (exist _ Nis'511 (eq_refl _))
  | Ninit Nis'510, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'510, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'510, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'510, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'510, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'510, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'510, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'510, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'510, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'510, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'510, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'510, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'510, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'510, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'510, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'510, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'510, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'510, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'510, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'510, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'510, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'510, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'510, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'513, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'513, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'513, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'513, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'513, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'513, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'513, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'513, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'513, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'513, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'513, expression'nt => Some (exist _ Nis'516 (eq_refl _))
  | Ninit Nis'513, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'513, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'513, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'513, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'513, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'513, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'513, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'514, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'514, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'514, statement_dangerous'nt => Some (exist _ Nis'515 (eq_refl _))
  | Ninit Nis'514, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'514, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'514, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'514, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'514, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'514, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'514, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'514, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'514, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'514, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'514, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'514, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'514, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'514, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'514, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'514, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'514, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'514, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'514, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'514, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'514, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'514, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'514, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'517, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'517, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'517, statement_dangerous'nt => Some (exist _ Nis'518 (eq_refl _))
  | Ninit Nis'517, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'517, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'517, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'517, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'517, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'517, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'517, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'517, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'517, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'517, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'517, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'517, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'517, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'517, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'517, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'517, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'517, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'517, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'517, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'517, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'517, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'517, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'517, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'519, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'519, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'519, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'519, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'519, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'519, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'519, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'519, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'519, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'519, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'519, expression'nt => Some (exist _ Nis'526 (eq_refl _))
  | Ninit Nis'519, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'519, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'519, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'519, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'519, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'519, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'519, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'520, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'520, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'520, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'520, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'520, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'520, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'520, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'520, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'520, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'520, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'520, expression'nt => Some (exist _ Nis'523 (eq_refl _))
  | Ninit Nis'520, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'520, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'520, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'520, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'520, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'520, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'520, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'521, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'521, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'521, statement_dangerous'nt => Some (exist _ Nis'522 (eq_refl _))
  | Ninit Nis'521, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'521, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'521, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'521, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'521, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'521, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'521, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'521, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'521, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'521, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'521, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'521, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'521, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'521, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'521, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'521, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'521, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'521, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'521, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'521, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'521, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'521, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'521, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'524, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'524, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'524, statement_dangerous'nt => Some (exist _ Nis'525 (eq_refl _))
  | Ninit Nis'524, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'524, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'524, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'524, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'524, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'524, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'524, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'524, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'524, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'524, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'524, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'524, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'524, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'524, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'524, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'524, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'524, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'524, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'524, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'524, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'524, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'524, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'524, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'527, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'527, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'527, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'527, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'527, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'527, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'527, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'527, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'527, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'527, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'527, expression'nt => Some (exist _ Nis'530 (eq_refl _))
  | Ninit Nis'527, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'527, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'527, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'527, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'527, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'527, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'527, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'528, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'528, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'528, statement_dangerous'nt => Some (exist _ Nis'529 (eq_refl _))
  | Ninit Nis'528, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'528, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'528, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'528, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'528, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'528, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'528, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'528, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'528, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'528, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'528, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'528, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'528, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'528, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'528, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'528, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'528, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'528, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'528, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'528, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'528, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'528, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'528, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'531, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'531, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'531, statement_dangerous'nt => Some (exist _ Nis'532 (eq_refl _))
  | Ninit Nis'531, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'531, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'531, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'531, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'531, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'531, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'531, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'531, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'531, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'531, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'531, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'531, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'531, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'531, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'531, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'531, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'531, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'531, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'531, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'531, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'531, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'531, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'531, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'535, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'535, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'535, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'535, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'535, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'535, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'535, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'535, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'535, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'535, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'535, expression'nt => Some (exist _ Nis'536 (eq_refl _))
  | Ninit Nis'535, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'535, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'535, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'535, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'535, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'535, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'535, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'540, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'540, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'540, statement_safe'nt => Some (exist _ Nis'552 (eq_refl _))
  | Ninit Nis'540, statement_dangerous'nt => Some (exist _ Nis'486 (eq_refl _))
  | Ninit Nis'540, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'540, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'540, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'540, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'540, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'540, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'540, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'540, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'540, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'540, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'540, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'540, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'540, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'540, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'540, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'540, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'540, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'540, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'540, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'540, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'540, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'540, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'540, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'540, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'540, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'540, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'541, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'541, unary_expression'nt => Some (exist _ Nis'120 (eq_refl _))
  | Ninit Nis'541, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'541, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'541, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'541, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'541, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'541, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'541, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'541, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'541, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'541, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'541, constant_expression'nt => Some (exist _ Nis'542 (eq_refl _))
  | Ninit Nis'541, conditional_expression'nt => Some (exist _ Nis'258 (eq_refl _))
  | Ninit Nis'541, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'541, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'541, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'543, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'543, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'543, statement_safe'nt => Some (exist _ Nis'544 (eq_refl _))
  | Ninit Nis'543, statement_dangerous'nt => Some (exist _ Nis'476 (eq_refl _))
  | Ninit Nis'543, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'543, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'543, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'543, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'543, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'543, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'543, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'543, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'543, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'543, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'543, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'543, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'543, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'543, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'543, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'543, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'543, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'543, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'543, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'543, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'543, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'543, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'543, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'543, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'543, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'543, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'555, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'555, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'555, statement_safe'nt => Some (exist _ Nis'556 (eq_refl _))
  | Ninit Nis'555, statement_dangerous'nt => Some (exist _ Nis'496 (eq_refl _))
  | Ninit Nis'555, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'555, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'555, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'555, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'555, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'555, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'555, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'555, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'555, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'555, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'555, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'555, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'555, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'555, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'555, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'555, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'555, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'555, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'555, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'555, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'555, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'555, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'555, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'555, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'555, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'555, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'558, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'558, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'558, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'558, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'558, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'558, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'558, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'558, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'558, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'558, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'558, expression'nt => Some (exist _ Nis'561 (eq_refl _))
  | Ninit Nis'558, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'558, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'558, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'558, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'558, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'558, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'558, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'559, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'559, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'559, statement_safe'nt => Some (exist _ Nis'560 (eq_refl _))
  | Ninit Nis'559, statement_dangerous'nt => Some (exist _ Nis'500 (eq_refl _))
  | Ninit Nis'559, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'559, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'559, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'559, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'559, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'559, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'559, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'559, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'559, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'559, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'559, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'559, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'559, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'559, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'559, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'559, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'559, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'559, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'559, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'559, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'559, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'559, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'559, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'559, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'559, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'559, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'562, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'562, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'562, statement_safe'nt => Some (exist _ Nis'563 (eq_refl _))
  | Ninit Nis'562, statement_dangerous'nt => Some (exist _ Nis'503 (eq_refl _))
  | Ninit Nis'562, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'562, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'562, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'562, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'562, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'562, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'562, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'562, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'562, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'562, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'562, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'562, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'562, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'562, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'562, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'562, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'562, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'562, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'562, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'562, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'562, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'562, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'562, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'562, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'562, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'562, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'565, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'565, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'565, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'565, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'565, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'565, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'565, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'565, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'565, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'565, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'565, expression'nt => Some (exist _ Nis'572 (eq_refl _))
  | Ninit Nis'565, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'565, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'565, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'565, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'565, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'565, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'565, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'566, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'566, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'566, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'566, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'566, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'566, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'566, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'566, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'566, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'566, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'566, expression'nt => Some (exist _ Nis'569 (eq_refl _))
  | Ninit Nis'566, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'566, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'566, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'566, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'566, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'566, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'566, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'567, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'567, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'567, statement_safe'nt => Some (exist _ Nis'568 (eq_refl _))
  | Ninit Nis'567, statement_dangerous'nt => Some (exist _ Nis'508 (eq_refl _))
  | Ninit Nis'567, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'567, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'567, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'567, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'567, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'567, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'567, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'567, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'567, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'567, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'567, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'567, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'567, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'567, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'567, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'567, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'567, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'567, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'567, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'567, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'567, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'567, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'567, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'567, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'567, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'567, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'570, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'570, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'570, statement_safe'nt => Some (exist _ Nis'571 (eq_refl _))
  | Ninit Nis'570, statement_dangerous'nt => Some (exist _ Nis'511 (eq_refl _))
  | Ninit Nis'570, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'570, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'570, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'570, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'570, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'570, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'570, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'570, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'570, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'570, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'570, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'570, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'570, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'570, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'570, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'570, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'570, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'570, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'570, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'570, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'570, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'570, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'570, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'570, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'570, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'570, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'573, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'573, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'573, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'573, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'573, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'573, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'573, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'573, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'573, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'573, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'573, expression'nt => Some (exist _ Nis'576 (eq_refl _))
  | Ninit Nis'573, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'573, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'573, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'573, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'573, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'573, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'573, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'574, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'574, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'574, statement_safe'nt => Some (exist _ Nis'575 (eq_refl _))
  | Ninit Nis'574, statement_dangerous'nt => Some (exist _ Nis'515 (eq_refl _))
  | Ninit Nis'574, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'574, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'574, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'574, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'574, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'574, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'574, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'574, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'574, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'574, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'574, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'574, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'574, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'574, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'574, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'574, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'574, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'574, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'574, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'574, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'574, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'574, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'574, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'574, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'574, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'574, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'577, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'577, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'577, statement_safe'nt => Some (exist _ Nis'578 (eq_refl _))
  | Ninit Nis'577, statement_dangerous'nt => Some (exist _ Nis'518 (eq_refl _))
  | Ninit Nis'577, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'577, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'577, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'577, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'577, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'577, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'577, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'577, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'577, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'577, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'577, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'577, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'577, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'577, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'577, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'577, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'577, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'577, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'577, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'577, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'577, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'577, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'577, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'577, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'577, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'577, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'579, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'579, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'579, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'579, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'579, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'579, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'579, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'579, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'579, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'579, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'579, expression'nt => Some (exist _ Nis'586 (eq_refl _))
  | Ninit Nis'579, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'579, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'579, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'579, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'579, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'579, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'579, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'580, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'580, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'580, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'580, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'580, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'580, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'580, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'580, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'580, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'580, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'580, expression'nt => Some (exist _ Nis'583 (eq_refl _))
  | Ninit Nis'580, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'580, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'580, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'580, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'580, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'580, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'580, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'581, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'581, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'581, statement_safe'nt => Some (exist _ Nis'582 (eq_refl _))
  | Ninit Nis'581, statement_dangerous'nt => Some (exist _ Nis'522 (eq_refl _))
  | Ninit Nis'581, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'581, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'581, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'581, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'581, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'581, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'581, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'581, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'581, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'581, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'581, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'581, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'581, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'581, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'581, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'581, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'581, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'581, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'581, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'581, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'581, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'581, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'581, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'581, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'581, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'581, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'584, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'584, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'584, statement_safe'nt => Some (exist _ Nis'585 (eq_refl _))
  | Ninit Nis'584, statement_dangerous'nt => Some (exist _ Nis'525 (eq_refl _))
  | Ninit Nis'584, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'584, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'584, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'584, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'584, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'584, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'584, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'584, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'584, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'584, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'584, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'584, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'584, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'584, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'584, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'584, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'584, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'584, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'584, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'584, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'584, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'584, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'584, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'584, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'584, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'584, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'587, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'587, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'587, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'587, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'587, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'587, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'587, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'587, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'587, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'587, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'587, expression'nt => Some (exist _ Nis'590 (eq_refl _))
  | Ninit Nis'587, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'587, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'587, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'587, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'587, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'587, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'587, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'588, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'588, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'588, statement_safe'nt => Some (exist _ Nis'589 (eq_refl _))
  | Ninit Nis'588, statement_dangerous'nt => Some (exist _ Nis'529 (eq_refl _))
  | Ninit Nis'588, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'588, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'588, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'588, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'588, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'588, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'588, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'588, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'588, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'588, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'588, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'588, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'588, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'588, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'588, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'588, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'588, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'588, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'588, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'588, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'588, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'588, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'588, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'588, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'588, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'588, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'591, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'591, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'591, statement_safe'nt => Some (exist _ Nis'592 (eq_refl _))
  | Ninit Nis'591, statement_dangerous'nt => Some (exist _ Nis'532 (eq_refl _))
  | Ninit Nis'591, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'591, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'591, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'591, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'591, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'591, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'591, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'591, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'591, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'591, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'591, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'591, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'591, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'591, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'591, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'591, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'591, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'591, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'591, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'591, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'591, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'591, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'591, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'591, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'591, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'591, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'594, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'594, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'594, statement_safe'nt => Some (exist _ Nis'595 (eq_refl _))
  | Ninit Nis'594, statement_dangerous'nt => Some (exist _ Nis'596 (eq_refl _))
  | Ninit Nis'594, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'594, selection_statement_safe'nt => Some (exist _ Nis'545 (eq_refl _))
  | Ninit Nis'594, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'594, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'594, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'594, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'594, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'594, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'594, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'594, labeled_statement_statement_safe_'nt => Some (exist _ Nis'546 (eq_refl _))
  | Ninit Nis'594, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'594, jump_statement'nt => Some (exist _ Nis'547 (eq_refl _))
  | Ninit Nis'594, iteration_statement_statement_safe_'nt => Some (exist _ Nis'548 (eq_refl _))
  | Ninit Nis'594, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'594, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'594, expression_statement'nt => Some (exist _ Nis'549 (eq_refl _))
  | Ninit Nis'594, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'594, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'594, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'594, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'594, compound_statement'nt => Some (exist _ Nis'550 (eq_refl _))
  | Ninit Nis'594, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'594, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'594, asm_statement'nt => Some (exist _ Nis'551 (eq_refl _))
  | Ninit Nis'594, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'594, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'605, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'605, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'605, statement_dangerous'nt => Some (exist _ Nis'596 (eq_refl _))
  | Ninit Nis'605, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'605, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'605, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'605, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'605, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'605, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'605, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'605, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'605, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'605, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'605, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'605, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'605, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'605, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'605, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'605, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'605, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'605, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'605, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'605, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'605, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'605, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'605, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'610, unary_operator'nt => Some (exist _ Nis'119 (eq_refl _))
  | Ninit Nis'610, unary_expression'nt => Some (exist _ Nis'127 (eq_refl _))
  | Ninit Nis'610, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'610, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'610, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'610, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'610, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'610, static_assert_declaration'nt => Some (exist _ Nis'370 (eq_refl _))
  | Ninit Nis'610, statement_dangerous'nt => Some (exist _ Nis'608 (eq_refl _))
  | Ninit Nis'610, shift_expression'nt => Some (exist _ Nis'140 (eq_refl _))
  | Ninit Nis'610, selection_statement_dangerous'nt => Some (exist _ Nis'477 (eq_refl _))
  | Ninit Nis'610, relational_expression'nt => Some (exist _ Nis'157 (eq_refl _))
  | Ninit Nis'610, primary_expression'nt => Some (exist _ Nis'121 (eq_refl _))
  | Ninit Nis'610, postfix_expression'nt => Some (exist _ Nis'122 (eq_refl _))
  | Ninit Nis'610, multiplicative_expression'nt => Some (exist _ Nis'142 (eq_refl _))
  | Ninit Nis'610, logical_OR_expression'nt => Some (exist _ Nis'167 (eq_refl _))
  | Ninit Nis'610, logical_AND_expression'nt => Some (exist _ Nis'169 (eq_refl _))
  | Ninit Nis'610, labeled_statement_statement_dangerous_'nt => Some (exist _ Nis'478 (eq_refl _))
  | Ninit Nis'610, jump_statement'nt => Some (exist _ Nis'479 (eq_refl _))
  | Ninit Nis'610, iteration_statement_statement_dangerous_'nt => Some (exist _ Nis'480 (eq_refl _))
  | Ninit Nis'610, inclusive_OR_expression'nt => Some (exist _ Nis'185 (eq_refl _))
  | Ninit Nis'610, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'610, expression_statement'nt => Some (exist _ Nis'481 (eq_refl _))
  | Ninit Nis'610, expression'nt => Some (exist _ Nis'482 (eq_refl _))
  | Ninit Nis'610, exclusive_OR_expression'nt => Some (exist _ Nis'184 (eq_refl _))
  | Ninit Nis'610, equality_expression'nt => Some (exist _ Nis'175 (eq_refl _))
  | Ninit Nis'610, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'610, declaration_specifiers'nt => Some (exist _ Nis'384 (eq_refl _))
  | Ninit Nis'610, declaration'nt => Some (exist _ Nis'609 (eq_refl _))
  | Ninit Nis'610, conditional_expression'nt => Some (exist _ Nis'188 (eq_refl _))
  | Ninit Nis'610, compound_statement'nt => Some (exist _ Nis'484 (eq_refl _))
  | Ninit Nis'610, cast_expression'nt => Some (exist _ Nis'149 (eq_refl _))
  | Ninit Nis'610, block_item'nt => Some (exist _ Nis'612 (eq_refl _))
  | Ninit Nis'610, attribute_specifier'nt => Some (exist _ Nis'104 (eq_refl _))
  | Ninit Nis'610, assignment_expression'nt => Some (exist _ Nis'192 (eq_refl _))
  | Ninit Nis'610, asm_statement'nt => Some (exist _ Nis'485 (eq_refl _))
  | Ninit Nis'610, additive_expression'nt => Some (exist _ Nis'160 (eq_refl _))
  | Ninit Nis'610, AND_expression'nt => Some (exist _ Nis'183 (eq_refl _))
  | Ninit Nis'617, type_specifier'nt => Some (exist _ Nis'89 (eq_refl _))
  | Ninit Nis'617, type_qualifier_noattr'nt => Some (exist _ Nis'100 (eq_refl _))
  | Ninit Nis'617, struct_or_union_specifier'nt => Some (exist _ Nis'58 (eq_refl _))
  | Ninit Nis'617, struct_or_union'nt => Some (exist _ Nis'59 (eq_refl _))
  | Ninit Nis'617, storage_class_specifier'nt => Some (exist _ Nis'101 (eq_refl _))
  | Ninit Nis'617, function_specifier'nt => Some (exist _ Nis'102 (eq_refl _))
  | Ninit Nis'617, enum_specifier'nt => Some (exist _ Nis'94 (eq_refl _))
  | Ninit Nis'617, declaration_specifiers'nt => Some (exist _ Nis'105 (eq_refl _))
  | Ninit Nis'617, attribute_specifier_list'nt => Some (exist _ Nis'245 (eq_refl _))
  | Ninit Nis'617, attribute_specifier'nt => Some (exist _ Nis'617 (eq_refl _))
  | Ninit Nis'618, compound_statement'nt => Some (exist _ Nis'619 (eq_refl _))
  | _, _ => None
  end.

Definition past_symb_of_non_init_state (noninitstate:noninitstate) : list symbol :=
  match noninitstate with
  | Nis'1 => []%list
  | Nis'2 => []%list
  | Nis'3 => []%list
  | Nis'4 => []%list
  | Nis'5 => []%list
  | Nis'6 => []%list
  | Nis'7 => []%list
  | Nis'8 => []%list
  | Nis'9 => []%list
  | Nis'10 => [T STATIC_ASSERT't]%list
  | Nis'11 => []%list
  | Nis'12 => []%list
  | Nis'13 => []%list
  | Nis'14 => []%list
  | Nis'15 => []%list
  | Nis'16 => []%list
  | Nis'17 => []%list
  | Nis'18 => [T SIZEOF't]%list
  | Nis'19 => []%list
  | Nis'20 => []%list
  | Nis'21 => []%list
  | Nis'22 => []%list
  | Nis'23 => [T PACKED't]%list
  | Nis'24 => []%list
  | Nis'25 => []%list
  | Nis'26 => []%list
  | Nis'27 => []%list
  | Nis'28 => []%list
  | Nis'29 => []%list
  | Nis'30 => []%list
  | Nis'31 => []%list
  | Nis'32 => [T ATTRIBUTE't]%list
  | Nis'33 => [T LPAREN't; T ATTRIBUTE't]%list
  | Nis'34 => []%list
  | Nis'35 => []%list
  | Nis'36 => []%list
  | Nis'37 => []%list
  | Nis'38 => [NT gcc_attribute_word'nt]%list
  | Nis'39 => [T LPAREN't; NT gcc_attribute_word'nt]%list
  | Nis'40 => []%list
  | Nis'41 => []%list
  | Nis'42 => []%list
  | Nis'43 => [T BUILTIN_VA_ARG't]%list
  | Nis'44 => []%list
  | Nis'45 => [T BUILTIN_OFFSETOF't]%list
  | Nis'46 => []%list
  | Nis'47 => []%list
  | Nis'48 => []%list
  | Nis'49 => []%list
  | Nis'50 => [T ALIGNAS't]%list
  | Nis'51 => []%list
  | Nis'52 => []%list
  | Nis'53 => []%list
  | Nis'54 => [T ALIGNOF't]%list
  | Nis'55 => []%list
  | Nis'56 => []%list
  | Nis'57 => []%list
  | Nis'58 => []%list
  | Nis'59 => []%list
  | Nis'60 => [NT struct_or_union'nt]%list
  | Nis'61 => [NT attribute_specifier_list'nt; NT struct_or_union'nt]%list
  | Nis'62 => [T OTHER_NAME't; NT attribute_specifier_list'nt; NT struct_or_union'nt]%list
  | Nis'63 => [T LBRACE't; T OTHER_NAME't; NT attribute_specifier_list'nt; NT struct_or_union'nt]%list
  | Nis'64 => [NT struct_declaration_list'nt; T LBRACE't; T OTHER_NAME't; NT attribute_specifier_list'nt; NT struct_or_union'nt]%list
  | Nis'65 => [NT struct_declaration_list'nt]%list
  | Nis'66 => []%list
  | Nis'67 => []%list
  | Nis'68 => []%list
  | Nis'69 => []%list
  | Nis'70 => [T STAR't]%list
  | Nis'71 => [NT type_qualifier_list'nt]%list
  | Nis'72 => [NT type_qualifier_list'nt; T STAR't]%list
  | Nis'73 => []%list
  | Nis'74 => []%list
  | Nis'75 => [T STAR't]%list
  | Nis'76 => [NT specifier_qualifier_list'nt]%list
  | Nis'77 => []%list
  | Nis'78 => []%list
  | Nis'79 => [NT pointer'nt]%list
  | Nis'80 => [NT direct_declarator'nt]%list
  | Nis'81 => []%list
  | Nis'82 => []%list
  | Nis'83 => [T LPAREN't; NT direct_declarator'nt]%list
  | Nis'84 => []%list
  | Nis'85 => []%list
  | Nis'86 => []%list
  | Nis'87 => []%list
  | Nis'88 => []%list
  | Nis'89 => []%list
  | Nis'90 => []%list
  | Nis'91 => []%list
  | Nis'92 => []%list
  | Nis'93 => []%list
  | Nis'94 => []%list
  | Nis'95 => [NT function_specifier'nt]%list
  | Nis'96 => [NT storage_class_specifier'nt]%list
  | Nis'97 => [NT type_qualifier'nt]%list
  | Nis'98 => [NT type_specifier'nt]%list
  | Nis'99 => [NT type_specifier'nt]%list
  | Nis'100 => []%list
  | Nis'101 => []%list
  | Nis'102 => []%list
  | Nis'103 => [NT function_specifier'nt]%list
  | Nis'104 => []%list
  | Nis'105 => [NT attribute_specifier'nt]%list
  | Nis'106 => [NT storage_class_specifier'nt]%list
  | Nis'107 => [NT type_qualifier_noattr'nt]%list
  | Nis'108 => [T LPAREN't; NT direct_declarator'nt]%list
  | Nis'109 => [NT parameter_type_list'nt; T LPAREN't; NT direct_declarator'nt]%list
  | Nis'110 => []%list
  | Nis'111 => [NT parameter_list'nt]%list
  | Nis'112 => [T COMMA't; NT parameter_list'nt]%list
  | Nis'113 => [T COMMA't; NT parameter_list'nt]%list
  | Nis'114 => []%list
  | Nis'115 => []%list
  | Nis'116 => [T LPAREN't]%list
  | Nis'117 => []%list
  | Nis'118 => [T LBRACK't]%list
  | Nis'119 => []%list
  | Nis'120 => []%list
  | Nis'121 => []%list
  | Nis'122 => []%list
  | Nis'123 => [NT postfix_expression'nt]%list
  | Nis'124 => [T PTR't; NT postfix_expression'nt]%list
  | Nis'125 => [NT postfix_expression'nt]%list
  | Nis'126 => [T LPAREN't; NT postfix_expression'nt]%list
  | Nis'127 => []%list
  | Nis'128 => []%list
  | Nis'129 => []%list
  | Nis'130 => []%list
  | Nis'131 => []%list
  | Nis'132 => []%list
  | Nis'133 => []%list
  | Nis'134 => []%list
  | Nis'135 => []%list
  | Nis'136 => []%list
  | Nis'137 => []%list
  | Nis'138 => []%list
  | Nis'139 => [NT unary_expression'nt]%list
  | Nis'140 => []%list
  | Nis'141 => [NT shift_expression'nt]%list
  | Nis'142 => []%list
  | Nis'143 => [NT multiplicative_expression'nt]%list
  | Nis'144 => [T STAR't; NT multiplicative_expression'nt]%list
  | Nis'145 => [NT multiplicative_expression'nt]%list
  | Nis'146 => [T SLASH't; NT multiplicative_expression'nt]%list
  | Nis'147 => [NT multiplicative_expression'nt]%list
  | Nis'148 => [T PERCENT't; NT multiplicative_expression'nt]%list
  | Nis'149 => []%list
  | Nis'150 => [T RIGHT't; NT shift_expression'nt]%list
  | Nis'151 => [NT additive_expression'nt]%list
  | Nis'152 => [T PLUS't; NT additive_expression'nt]%list
  | Nis'153 => [NT additive_expression'nt]%list
  | Nis'154 => [T MINUS't; NT additive_expression'nt]%list
  | Nis'155 => [NT shift_expression'nt]%list
  | Nis'156 => [T LEFT't; NT shift_expression'nt]%list
  | Nis'157 => []%list
  | Nis'158 => [NT relational_expression'nt]%list
  | Nis'159 => [T LT't; NT relational_expression'nt]%list
  | Nis'160 => []%list
  | Nis'161 => [NT relational_expression'nt]%list
  | Nis'162 => [T LEQ't; NT relational_expression'nt]%list
  | Nis'163 => [NT relational_expression'nt]%list
  | Nis'164 => [T GT't; NT relational_expression'nt]%list
  | Nis'165 => [NT relational_expression'nt]%list
  | Nis'166 => [T GEQ't; NT relational_expression'nt]%list
  | Nis'167 => []%list
  | Nis'168 => [NT logical_OR_expression'nt]%list
  | Nis'169 => []%list
  | Nis'170 => [NT logical_AND_expression'nt]%list
  | Nis'171 => [T ANDAND't; NT logical_AND_expression'nt]%list
  | Nis'172 => [NT inclusive_OR_expression'nt]%list
  | Nis'173 => [T BAR't; NT inclusive_OR_expression'nt]%list
  | Nis'174 => [NT exclusive_OR_expression'nt]%list
  | Nis'175 => []%list
  | Nis'176 => [NT equality_expression'nt]%list
  | Nis'177 => [T NEQ't; NT equality_expression'nt]%list
  | Nis'178 => [NT equality_expression'nt]%list
  | Nis'179 => [T EQEQ't; NT equality_expression'nt]%list
  | Nis'180 => [T HAT't; NT exclusive_OR_expression'nt]%list
  | Nis'181 => [NT AND_expression'nt]%list
  | Nis'182 => [T AND't; NT AND_expression'nt]%list
  | Nis'183 => []%list
  | Nis'184 => []%list
  | Nis'185 => []%list
  | Nis'186 => [T QUESTION't; NT logical_OR_expression'nt]%list
  | Nis'187 => [NT expression'nt]%list
  | Nis'188 => []%list
  | Nis'189 => [T COMMA't; NT expression'nt]%list
  | Nis'190 => [NT expression'nt; T QUESTION't; NT logical_OR_expression'nt]%list
  | Nis'191 => [T COLON't; NT expression'nt; T QUESTION't; NT logical_OR_expression'nt]%list
  | Nis'192 => []%list
  | Nis'193 => [NT logical_OR_expression'nt]%list
  | Nis'194 => [T BARBAR't; NT logical_OR_expression'nt]%list
  | Nis'195 => [NT assignment_operator'nt; NT unary_expression'nt]%list
  | Nis'196 => []%list
  | Nis'197 => [T LPAREN't; NT postfix_expression'nt]%list
  | Nis'198 => [NT argument_expression_list'nt; T LPAREN't; NT postfix_expression'nt]%list
  | Nis'199 => [NT argument_expression_list'nt]%list
  | Nis'200 => [T COMMA't; NT argument_expression_list'nt]%list
  | Nis'201 => [NT postfix_expression'nt]%list
  | Nis'202 => [T LBRACK't; NT postfix_expression'nt]%list
  | Nis'203 => [NT expression'nt; T LBRACK't; NT postfix_expression'nt]%list
  | Nis'204 => [NT postfix_expression'nt]%list
  | Nis'205 => [NT postfix_expression'nt]%list
  | Nis'206 => [T DOT't; NT postfix_expression'nt]%list
  | Nis'207 => [NT postfix_expression'nt]%list
  | Nis'208 => [NT unary_operator'nt]%list
  | Nis'209 => [T LBRACK't]%list
  | Nis'210 => [NT type_qualifier_list'nt; T LBRACK't]%list
  | Nis'211 => [NT type_qualifier_list'nt; T LBRACK't]%list
  | Nis'212 => [NT assignment_expression'nt; NT type_qualifier_list'nt; T LBRACK't]%list
  | Nis'213 => [T LBRACK't]%list
  | Nis'214 => [NT assignment_expression'nt; T LBRACK't]%list
  | Nis'215 => []%list
  | Nis'216 => [NT pointer'nt]%list
  | Nis'217 => [NT direct_abstract_declarator'nt]%list
  | Nis'218 => [T LPAREN't; NT direct_abstract_declarator'nt]%list
  | Nis'219 => [T LPAREN't; NT direct_abstract_declarator'nt]%list
  | Nis'220 => [NT parameter_type_list'nt; T LPAREN't; NT direct_abstract_declarator'nt]%list
  | Nis'221 => []%list
  | Nis'222 => [NT direct_abstract_declarator'nt]%list
  | Nis'223 => [T LBRACK't; NT direct_abstract_declarator'nt]%list
  | Nis'224 => [T LBRACK't; NT direct_abstract_declarator'nt]%list
  | Nis'225 => [NT type_qualifier_list'nt; T LBRACK't; NT direct_abstract_declarator'nt]%list
  | Nis'226 => [NT type_qualifier_list'nt; T LBRACK't; NT direct_abstract_declarator'nt]%list
  | Nis'227 => [NT assignment_expression'nt; NT type_qualifier_list'nt; T LBRACK't; NT direct_abstract_declarator'nt]%list
  | Nis'228 => [T LBRACK't; NT direct_abstract_declarator'nt]%list
  | Nis'229 => [NT assignment_expression'nt; T LBRACK't; NT direct_abstract_declarator'nt]%list
  | Nis'230 => [T LPAREN't]%list
  | Nis'231 => [NT parameter_type_list'nt; T LPAREN't]%list
  | Nis'232 => []%list
  | Nis'233 => [NT direct_declarator'nt]%list
  | Nis'234 => [T LBRACK't; NT direct_declarator'nt]%list
  | Nis'235 => [T LBRACK't; NT direct_declarator'nt]%list
  | Nis'236 => [NT type_qualifier_list'nt; T LBRACK't; NT direct_declarator'nt]%list
  | Nis'237 => [NT type_qualifier_list'nt; T LBRACK't; NT direct_declarator'nt]%list
  | Nis'238 => [NT assignment_expression'nt; NT type_qualifier_list'nt; T LBRACK't; NT direct_declarator'nt]%list
  | Nis'239 => [T LBRACK't; NT direct_declarator'nt]%list
  | Nis'240 => [NT assignment_expression'nt; T LBRACK't; NT direct_declarator'nt]%list
  | Nis'241 => []%list
  | Nis'242 => []%list
  | Nis'243 => [NT declarator_noattrend'nt]%list
  | Nis'244 => []%list
  | Nis'245 => [NT attribute_specifier'nt]%list
  | Nis'246 => [T LPAREN't]%list
  | Nis'247 => [NT declarator'nt; T LPAREN't]%list
  | Nis'248 => [T LPAREN't]%list
  | Nis'249 => [NT abstract_declarator'nt; T LPAREN't]%list
  | Nis'250 => [NT declaration_specifiers'nt]%list
  | Nis'251 => [NT declaration_specifiers'nt]%list
  | Nis'252 => [T LPAREN't; NT direct_declarator'nt]%list
  | Nis'253 => [NT identifier_list'nt; T LPAREN't; NT direct_declarator'nt]%list
  | Nis'254 => [NT identifier_list'nt]%list
  | Nis'255 => [T COMMA't; NT identifier_list'nt]%list
  | Nis'256 => []%list
  | Nis'257 => [T COLON't]%list
  | Nis'258 => []%list
  | Nis'259 => [NT specifier_qualifier_list'nt]%list
  | Nis'260 => [NT struct_declarator_list'nt; NT specifier_qualifier_list'nt]%list
  | Nis'261 => [NT struct_declarator_list'nt]%list
  | Nis'262 => [T COMMA't; NT struct_declarator_list'nt]%list
  | Nis'263 => []%list
  | Nis'264 => [NT declarator'nt]%list
  | Nis'265 => [T COLON't; NT declarator'nt]%list
  | Nis'266 => []%list
  | Nis'267 => [NT attribute_specifier_list'nt; NT struct_or_union'nt]%list
  | Nis'268 => [T LBRACE't; NT attribute_specifier_list'nt; NT struct_or_union'nt]%list
  | Nis'269 => [NT struct_declaration_list'nt; T LBRACE't; NT attribute_specifier_list'nt; NT struct_or_union'nt]%list
  | Nis'270 => [NT type_qualifier'nt]%list
  | Nis'271 => [NT type_specifier'nt]%list
  | Nis'272 => [T LPAREN't; T ALIGNOF't]%list
  | Nis'273 => [NT type_name'nt; T LPAREN't; T ALIGNOF't]%list
  | Nis'274 => []%list
  | Nis'275 => []%list
  | Nis'276 => []%list
  | Nis'277 => [NT specifier_qualifier_list'nt]%list
  | Nis'278 => [T LPAREN't; T ALIGNAS't]%list
  | Nis'279 => [NT type_name'nt; T LPAREN't; T ALIGNAS't]%list
  | Nis'280 => [T LPAREN't; T ALIGNAS't]%list
  | Nis'281 => [NT argument_expression_list'nt; T LPAREN't; T ALIGNAS't]%list
  | Nis'282 => [T LPAREN't; T BUILTIN_OFFSETOF't]%list
  | Nis'283 => [NT type_name'nt; T LPAREN't; T BUILTIN_OFFSETOF't]%list
  | Nis'284 => [T COMMA't; NT type_name'nt; T LPAREN't; T BUILTIN_OFFSETOF't]%list
  | Nis'285 => [T OTHER_NAME't; T COMMA't; NT type_name'nt; T LPAREN't; T BUILTIN_OFFSETOF't]%list
  | Nis'286 => []%list
  | Nis'287 => [T LBRACK't]%list
  | Nis'288 => [NT constant_expression'nt; T LBRACK't]%list
  | Nis'289 => []%list
  | Nis'290 => [T DOT't]%list
  | Nis'291 => [T OTHER_NAME't; T COMMA't; NT type_name'nt; T LPAREN't; T BUILTIN_OFFSETOF't]%list
  | Nis'292 => [NT designator_list'nt; T OTHER_NAME't; T COMMA't; NT type_name'nt; T LPAREN't; T BUILTIN_OFFSETOF't]%list
  | Nis'293 => [NT designator_list'nt]%list
  | Nis'294 => []%list
  | Nis'295 => [T LPAREN't; T BUILTIN_VA_ARG't]%list
  | Nis'296 => [NT assignment_expression'nt; T LPAREN't; T BUILTIN_VA_ARG't]%list
  | Nis'297 => [T COMMA't; NT assignment_expression'nt; T LPAREN't; T BUILTIN_VA_ARG't]%list
  | Nis'298 => [NT type_name'nt; T COMMA't; NT assignment_expression'nt; T LPAREN't; T BUILTIN_VA_ARG't]%list
  | Nis'299 => [T DEC't]%list
  | Nis'300 => [T LPAREN't; NT gcc_attribute_word'nt]%list
  | Nis'301 => [NT argument_expression_list'nt; T LPAREN't; NT gcc_attribute_word'nt]%list
  | Nis'302 => [T LPAREN't; T LPAREN't; T ATTRIBUTE't]%list
  | Nis'303 => [NT gcc_attribute_list'nt; T LPAREN't; T LPAREN't; T ATTRIBUTE't]%list
  | Nis'304 => [T RPAREN't; NT gcc_attribute_list'nt; T LPAREN't; T LPAREN't; T ATTRIBUTE't]%list
  | Nis'305 => [NT gcc_attribute_list'nt]%list
  | Nis'306 => [T COMMA't; NT gcc_attribute_list'nt]%list
  | Nis'307 => []%list
  | Nis'308 => [T ENUM't]%list
  | Nis'309 => [NT attribute_specifier_list'nt; T ENUM't]%list
  | Nis'310 => [T OTHER_NAME't; NT attribute_specifier_list'nt; T ENUM't]%list
  | Nis'311 => []%list
  | Nis'312 => [T LBRACE't; T OTHER_NAME't; NT attribute_specifier_list'nt; T ENUM't]%list
  | Nis'313 => [NT enumerator_list'nt; T LBRACE't; T OTHER_NAME't; NT attribute_specifier_list'nt; T ENUM't]%list
  | Nis'314 => [NT enumerator_list'nt; T LBRACE't; T OTHER_NAME't; NT attribute_specifier_list'nt; T ENUM't]%list
  | Nis'315 => [T COMMA't; NT enumerator_list'nt; T LBRACE't; T OTHER_NAME't; NT attribute_specifier_list'nt; T ENUM't]%list
  | Nis'316 => [T COMMA't; NT enumerator_list'nt]%list
  | Nis'317 => []%list
  | Nis'318 => [NT enumeration_constant'nt]%list
  | Nis'319 => [T EQ't; NT enumeration_constant'nt]%list
  | Nis'320 => []%list
  | Nis'321 => [NT attribute_specifier_list'nt; T ENUM't]%list
  | Nis'322 => [T LBRACE't; NT attribute_specifier_list'nt; T ENUM't]%list
  | Nis'323 => [NT enumerator_list'nt; T LBRACE't; NT attribute_specifier_list'nt; T ENUM't]%list
  | Nis'324 => [NT enumerator_list'nt; T LBRACE't; NT attribute_specifier_list'nt; T ENUM't]%list
  | Nis'325 => [T COMMA't; NT enumerator_list'nt; T LBRACE't; NT attribute_specifier_list'nt; T ENUM't]%list
  | Nis'326 => [T LPAREN't]%list
  | Nis'327 => [NT type_name'nt; T LPAREN't]%list
  | Nis'328 => [T RPAREN't; NT type_name'nt; T LPAREN't]%list
  | Nis'329 => []%list
  | Nis'330 => [T LBRACE't]%list
  | Nis'331 => [NT initializer_list'nt; T LBRACE't]%list
  | Nis'332 => [NT initializer_list'nt; T LBRACE't]%list
  | Nis'333 => [T COMMA't; NT initializer_list'nt; T LBRACE't]%list
  | Nis'334 => []%list
  | Nis'335 => [NT designator_list'nt]%list
  | Nis'336 => [T COMMA't; NT initializer_list'nt]%list
  | Nis'337 => [NT designation'nt; T COMMA't; NT initializer_list'nt]%list
  | Nis'338 => []%list
  | Nis'339 => [T COMMA't; NT initializer_list'nt]%list
  | Nis'340 => []%list
  | Nis'341 => [NT designation'nt]%list
  | Nis'342 => []%list
  | Nis'343 => [T LBRACE't; T RPAREN't; NT type_name'nt; T LPAREN't]%list
  | Nis'344 => [NT initializer_list'nt; T LBRACE't; T RPAREN't; NT type_name'nt; T LPAREN't]%list
  | Nis'345 => [NT initializer_list'nt; T LBRACE't; T RPAREN't; NT type_name'nt; T LPAREN't]%list
  | Nis'346 => [T COMMA't; NT initializer_list'nt; T LBRACE't; T RPAREN't; NT type_name'nt; T LPAREN't]%list
  | Nis'347 => [T LPAREN't]%list
  | Nis'348 => [NT expression'nt; T LPAREN't]%list
  | Nis'349 => [T INC't]%list
  | Nis'350 => [T LPAREN't]%list
  | Nis'351 => [NT type_name'nt; T LPAREN't]%list
  | Nis'352 => [T RPAREN't; NT type_name'nt; T LPAREN't]%list
  | Nis'353 => [T LPAREN't; T PACKED't]%list
  | Nis'354 => [NT argument_expression_list'nt; T LPAREN't; T PACKED't]%list
  | Nis'355 => [T LPAREN't; T SIZEOF't]%list
  | Nis'356 => [NT type_name'nt; T LPAREN't; T SIZEOF't]%list
  | Nis'357 => [T SIZEOF't]%list
  | Nis'358 => [T LPAREN't; T STATIC_ASSERT't]%list
  | Nis'359 => [NT constant_expression'nt; T LPAREN't; T STATIC_ASSERT't]%list
  | Nis'360 => [T COMMA't; NT constant_expression'nt; T LPAREN't; T STATIC_ASSERT't]%list
  | Nis'361 => [T STRING_LITERAL't; T COMMA't; NT constant_expression'nt; T LPAREN't; T STATIC_ASSERT't]%list
  | Nis'362 => [T RPAREN't; T STRING_LITERAL't; T COMMA't; NT constant_expression'nt; T LPAREN't; T STATIC_ASSERT't]%list
  | Nis'363 => []%list
  | Nis'364 => []%list
  | Nis'365 => []%list
  | Nis'367 => []%list
  | Nis'368 => [NT translation_unit'nt]%list
  | Nis'369 => [NT translation_unit'nt]%list
  | Nis'370 => []%list
  | Nis'371 => []%list
  | Nis'372 => [NT translation_unit'nt]%list
  | Nis'373 => []%list
  | Nis'374 => [NT declaration_specifiers'nt]%list
  | Nis'375 => [NT declaration_specifiers'nt]%list
  | Nis'376 => [NT init_declarator_list'nt; NT declaration_specifiers'nt]%list
  | Nis'377 => [NT init_declarator_list'nt]%list
  | Nis'378 => [T COMMA't; NT init_declarator_list'nt]%list
  | Nis'379 => []%list
  | Nis'380 => [NT declarator'nt]%list
  | Nis'381 => [T EQ't; NT declarator'nt]%list
  | Nis'382 => []%list
  | Nis'383 => [NT declaration_specifiers'nt]%list
  | Nis'384 => []%list
  | Nis'385 => [NT declarator_noattrend'nt; NT declaration_specifiers'nt]%list
  | Nis'386 => []%list
  | Nis'387 => []%list
  | Nis'388 => [T WHILE't]%list
  | Nis'389 => [T LPAREN't; T WHILE't]%list
  | Nis'390 => [NT expression'nt; T LPAREN't; T WHILE't]%list
  | Nis'391 => []%list
  | Nis'392 => [T SWITCH't]%list
  | Nis'393 => [T LPAREN't; T SWITCH't]%list
  | Nis'394 => [NT expression'nt; T LPAREN't; T SWITCH't]%list
  | Nis'395 => []%list
  | Nis'396 => []%list
  | Nis'397 => [T RETURN't]%list
  | Nis'398 => [T RETURN't]%list
  | Nis'399 => [NT expression'nt; T RETURN't]%list
  | Nis'400 => []%list
  | Nis'401 => [T OTHER_NAME't]%list
  | Nis'402 => []%list
  | Nis'403 => [T IF_'t]%list
  | Nis'404 => [T LPAREN't; T IF_'t]%list
  | Nis'405 => [NT expression'nt; T LPAREN't; T IF_'t]%list
  | Nis'406 => []%list
  | Nis'407 => [T WHILE't]%list
  | Nis'408 => [T LPAREN't; T WHILE't]%list
  | Nis'409 => [NT expression'nt; T LPAREN't; T WHILE't]%list
  | Nis'410 => []%list
  | Nis'411 => [T SWITCH't]%list
  | Nis'412 => [T LPAREN't; T SWITCH't]%list
  | Nis'413 => [NT expression'nt; T LPAREN't; T SWITCH't]%list
  | Nis'414 => []%list
  | Nis'415 => [T OTHER_NAME't]%list
  | Nis'416 => []%list
  | Nis'417 => [T IF_'t]%list
  | Nis'418 => [T LPAREN't; T IF_'t]%list
  | Nis'419 => [NT expression'nt; T LPAREN't; T IF_'t]%list
  | Nis'420 => []%list
  | Nis'421 => [T GOTO't]%list
  | Nis'422 => [T OTHER_NAME't; T GOTO't]%list
  | Nis'423 => []%list
  | Nis'424 => [T FOR't]%list
  | Nis'425 => [T LPAREN't; T FOR't]%list
  | Nis'426 => [T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'427 => [T SEMICOLON't; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'428 => []%list
  | Nis'429 => []%list
  | Nis'430 => [T FOR't]%list
  | Nis'431 => [T LPAREN't; T FOR't]%list
  | Nis'432 => [T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'433 => [T SEMICOLON't; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'434 => []%list
  | Nis'435 => []%list
  | Nis'436 => [T DEFAULT't]%list
  | Nis'437 => []%list
  | Nis'438 => [T CONTINUE't]%list
  | Nis'439 => []%list
  | Nis'440 => [T CASE't]%list
  | Nis'441 => [NT constant_expression'nt; T CASE't]%list
  | Nis'442 => []%list
  | Nis'443 => [T BREAK't]%list
  | Nis'444 => []%list
  | Nis'445 => []%list
  | Nis'446 => []%list
  | Nis'447 => [T CONST't]%list
  | Nis'448 => [T VOLATILE't]%list
  | Nis'449 => [T ASM't]%list
  | Nis'450 => [NT asm_attributes'nt; T ASM't]%list
  | Nis'451 => [T LPAREN't; NT asm_attributes'nt; T ASM't]%list
  | Nis'452 => []%list
  | Nis'453 => []%list
  | Nis'454 => [T LBRACK't]%list
  | Nis'455 => [T OTHER_NAME't; T LBRACK't]%list
  | Nis'456 => []%list
  | Nis'457 => [NT asm_operands_ne'nt]%list
  | Nis'458 => [T COMMA't; NT asm_operands_ne'nt]%list
  | Nis'459 => []%list
  | Nis'460 => [NT asm_op_name'nt]%list
  | Nis'461 => [T STRING_LITERAL't; NT asm_op_name'nt]%list
  | Nis'462 => [T LPAREN't; T STRING_LITERAL't; NT asm_op_name'nt]%list
  | Nis'463 => [NT expression'nt; T LPAREN't; T STRING_LITERAL't; NT asm_op_name'nt]%list
  | Nis'464 => [T COLON't]%list
  | Nis'465 => [NT asm_operands'nt; T COLON't]%list
  | Nis'466 => [T COLON't; NT asm_operands'nt; T COLON't]%list
  | Nis'467 => [NT asm_operands'nt; T COLON't; NT asm_operands'nt; T COLON't]%list
  | Nis'468 => []%list
  | Nis'469 => [T STRING_LITERAL't]%list
  | Nis'470 => [T COMMA't; T STRING_LITERAL't]%list
  | Nis'471 => [T COLON't; NT asm_operands'nt; T COLON't; NT asm_operands'nt; T COLON't]%list
  | Nis'472 => []%list
  | Nis'473 => [T STRING_LITERAL't; T LPAREN't; NT asm_attributes'nt; T ASM't]%list
  | Nis'474 => [NT asm_arguments'nt; T STRING_LITERAL't; T LPAREN't; NT asm_attributes'nt; T ASM't]%list
  | Nis'475 => [T RPAREN't; NT asm_arguments'nt; T STRING_LITERAL't; T LPAREN't; NT asm_attributes'nt; T ASM't]%list
  | Nis'476 => [T COLON't; NT constant_expression'nt; T CASE't]%list
  | Nis'477 => []%list
  | Nis'478 => []%list
  | Nis'479 => []%list
  | Nis'480 => []%list
  | Nis'481 => []%list
  | Nis'482 => []%list
  | Nis'483 => [NT expression'nt]%list
  | Nis'484 => []%list
  | Nis'485 => []%list
  | Nis'486 => [T COLON't; T DEFAULT't]%list
  | Nis'487 => [T DO't]%list
  | Nis'488 => [NT statement_dangerous'nt; T DO't]%list
  | Nis'489 => [T WHILE't; NT statement_dangerous'nt; T DO't]%list
  | Nis'490 => [T LPAREN't; T WHILE't; NT statement_dangerous'nt; T DO't]%list
  | Nis'491 => [NT expression'nt; T LPAREN't; T WHILE't; NT statement_dangerous'nt; T DO't]%list
  | Nis'492 => [T RPAREN't; NT expression'nt; T LPAREN't; T WHILE't; NT statement_dangerous'nt; T DO't]%list
  | Nis'493 => [T RPAREN't; T SEMICOLON't; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'494 => [T SEMICOLON't; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'495 => [NT expression'nt; T SEMICOLON't; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'496 => [T RPAREN't; NT expression'nt; T SEMICOLON't; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'497 => [T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'498 => [NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'499 => [T SEMICOLON't; NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'500 => [T RPAREN't; T SEMICOLON't; NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'501 => [T SEMICOLON't; NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'502 => [NT expression'nt; T SEMICOLON't; NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'503 => [T RPAREN't; NT expression'nt; T SEMICOLON't; NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'504 => [T LPAREN't; T FOR't]%list
  | Nis'505 => [NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'506 => [T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'507 => [T SEMICOLON't; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'508 => [T RPAREN't; T SEMICOLON't; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'509 => [T SEMICOLON't; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'510 => [NT expression'nt; T SEMICOLON't; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'511 => [T RPAREN't; NT expression'nt; T SEMICOLON't; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'512 => [T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'513 => [NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'514 => [T SEMICOLON't; NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'515 => [T RPAREN't; T SEMICOLON't; NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'516 => [T SEMICOLON't; NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'517 => [NT expression'nt; T SEMICOLON't; NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'518 => [T RPAREN't; NT expression'nt; T SEMICOLON't; NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'519 => [T LPAREN't; T FOR't]%list
  | Nis'520 => [NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'521 => [T SEMICOLON't; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'522 => [T RPAREN't; T SEMICOLON't; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'523 => [T SEMICOLON't; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'524 => [NT expression'nt; T SEMICOLON't; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'525 => [T RPAREN't; NT expression'nt; T SEMICOLON't; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'526 => [NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'527 => [NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'528 => [T SEMICOLON't; NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'529 => [T RPAREN't; T SEMICOLON't; NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'530 => [T SEMICOLON't; NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'531 => [NT expression'nt; T SEMICOLON't; NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'532 => [T RPAREN't; NT expression'nt; T SEMICOLON't; NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'533 => [T DO't]%list
  | Nis'534 => [NT statement_dangerous'nt; T DO't]%list
  | Nis'535 => [T WHILE't; NT statement_dangerous'nt; T DO't]%list
  | Nis'536 => [T LPAREN't; T WHILE't; NT statement_dangerous'nt; T DO't]%list
  | Nis'537 => [NT expression'nt; T LPAREN't; T WHILE't; NT statement_dangerous'nt; T DO't]%list
  | Nis'538 => [T RPAREN't; NT expression'nt; T LPAREN't; T WHILE't; NT statement_dangerous'nt; T DO't]%list
  | Nis'539 => []%list
  | Nis'540 => [T DEFAULT't]%list
  | Nis'541 => []%list
  | Nis'542 => [T CASE't]%list
  | Nis'543 => [NT constant_expression'nt; T CASE't]%list
  | Nis'544 => [T COLON't; NT constant_expression'nt; T CASE't]%list
  | Nis'545 => []%list
  | Nis'546 => []%list
  | Nis'547 => []%list
  | Nis'548 => []%list
  | Nis'549 => []%list
  | Nis'550 => []%list
  | Nis'551 => []%list
  | Nis'552 => [T COLON't; T DEFAULT't]%list
  | Nis'553 => [T RPAREN't; T SEMICOLON't; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'554 => [T SEMICOLON't; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'555 => [NT expression'nt; T SEMICOLON't; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'556 => [T RPAREN't; NT expression'nt; T SEMICOLON't; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'557 => [T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'558 => [NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'559 => [T SEMICOLON't; NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'560 => [T RPAREN't; T SEMICOLON't; NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'561 => [T SEMICOLON't; NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'562 => [NT expression'nt; T SEMICOLON't; NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'563 => [T RPAREN't; NT expression'nt; T SEMICOLON't; NT expression'nt; T SEMICOLON't; T LPAREN't; T FOR't]%list
  | Nis'564 => [T LPAREN't; T FOR't]%list
  | Nis'565 => [NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'566 => [T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'567 => [T SEMICOLON't; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'568 => [T RPAREN't; T SEMICOLON't; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'569 => [T SEMICOLON't; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'570 => [NT expression'nt; T SEMICOLON't; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'571 => [T RPAREN't; NT expression'nt; T SEMICOLON't; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'572 => [T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'573 => [NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'574 => [T SEMICOLON't; NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'575 => [T RPAREN't; T SEMICOLON't; NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'576 => [T SEMICOLON't; NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'577 => [NT expression'nt; T SEMICOLON't; NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'578 => [T RPAREN't; NT expression'nt; T SEMICOLON't; NT expression'nt; T SEMICOLON't; NT expression'nt; T LPAREN't; T FOR't]%list
  | Nis'579 => [T LPAREN't; T FOR't]%list
  | Nis'580 => [NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'581 => [T SEMICOLON't; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'582 => [T RPAREN't; T SEMICOLON't; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'583 => [T SEMICOLON't; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'584 => [NT expression'nt; T SEMICOLON't; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'585 => [T RPAREN't; NT expression'nt; T SEMICOLON't; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'586 => [NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'587 => [NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'588 => [T SEMICOLON't; NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'589 => [T RPAREN't; T SEMICOLON't; NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'590 => [T SEMICOLON't; NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'591 => [NT expression'nt; T SEMICOLON't; NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'592 => [T RPAREN't; NT expression'nt; T SEMICOLON't; NT expression'nt; NT declaration'nt; T LPAREN't; T FOR't]%list
  | Nis'593 => [T RPAREN't; NT expression'nt; T LPAREN't; T IF_'t]%list
  | Nis'594 => [NT statement_safe'nt; T RPAREN't; NT expression'nt; T LPAREN't; T IF_'t]%list
  | Nis'595 => [T ELSE't; NT statement_safe'nt; T RPAREN't; NT expression'nt; T LPAREN't; T IF_'t]%list
  | Nis'596 => [T ELSE't; NT statement_safe'nt; T RPAREN't; NT expression'nt; T LPAREN't; T IF_'t]%list
  | Nis'597 => [T RPAREN't; NT expression'nt; T LPAREN't; T IF_'t]%list
  | Nis'598 => [T COLON't; T OTHER_NAME't]%list
  | Nis'599 => [T COLON't; T OTHER_NAME't]%list
  | Nis'600 => [T RPAREN't; NT expression'nt; T LPAREN't; T SWITCH't]%list
  | Nis'601 => [T RPAREN't; NT expression'nt; T LPAREN't; T SWITCH't]%list
  | Nis'602 => [T RPAREN't; NT expression'nt; T LPAREN't; T WHILE't]%list
  | Nis'603 => [T RPAREN't; NT expression'nt; T LPAREN't; T WHILE't]%list
  | Nis'604 => [T RPAREN't; NT expression'nt; T LPAREN't; T IF_'t]%list
  | Nis'605 => [NT statement_safe'nt; T RPAREN't; NT expression'nt; T LPAREN't; T IF_'t]%list
  | Nis'606 => [T LBRACE't]%list
  | Nis'607 => []%list
  | Nis'608 => []%list
  | Nis'609 => []%list
  | Nis'610 => [T LBRACE't]%list
  | Nis'611 => [NT block_item_list'nt; T LBRACE't]%list
  | Nis'612 => [NT block_item_list'nt]%list
  | Nis'613 => []%list
  | Nis'614 => [NT declaration_list'nt]%list
  | Nis'615 => [NT declaration_list'nt; NT declarator_noattrend'nt; NT declaration_specifiers'nt]%list
  | Nis'616 => []%list
  | Nis'617 => []%list
  | Nis'618 => [NT declaration_specifiers'nt]%list
  | Nis'619 => [NT declarator'nt; NT declaration_specifiers'nt]%list
  | Nis'620 => []%list
  | Nis'621 => []%list
  end.
Extract Constant past_symb_of_non_init_state => "fun _ -> assert false".

Definition state_set_1 (s:state) : bool :=
  match s with
  | Init Init'0 | Ninit Nis'18 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'45 | Ninit Nis'50 | Ninit Nis'54 | Ninit Nis'55 | Ninit Nis'57 | Ninit Nis'63 | Ninit Nis'69 | Ninit Nis'70 | Ninit Nis'80 | Ninit Nis'89 | Ninit Nis'90 | Ninit Nis'91 | Ninit Nis'92 | Ninit Nis'93 | Ninit Nis'100 | Ninit Nis'101 | Ninit Nis'102 | Ninit Nis'104 | Ninit Nis'111 | Ninit Nis'115 | Ninit Nis'117 | Ninit Nis'209 | Ninit Nis'217 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'268 | Ninit Nis'275 | Ninit Nis'296 | Ninit Nis'367 | Ninit Nis'383 | Ninit Nis'385 | Ninit Nis'386 | Ninit Nis'424 | Ninit Nis'430 | Ninit Nis'610 | Ninit Nis'617 => true
  | _ => false
  end.
Extract Inlined Constant state_set_1 => "assert false".

Definition state_set_2 (s:state) : bool :=
  match s with
  | Init Init'0 | Ninit Nis'18 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'45 | Ninit Nis'50 | Ninit Nis'54 | Ninit Nis'55 | Ninit Nis'57 | Ninit Nis'63 | Ninit Nis'80 | Ninit Nis'89 | Ninit Nis'90 | Ninit Nis'91 | Ninit Nis'92 | Ninit Nis'93 | Ninit Nis'100 | Ninit Nis'101 | Ninit Nis'102 | Ninit Nis'104 | Ninit Nis'111 | Ninit Nis'115 | Ninit Nis'217 | Ninit Nis'268 | Ninit Nis'275 | Ninit Nis'296 | Ninit Nis'367 | Ninit Nis'383 | Ninit Nis'385 | Ninit Nis'386 | Ninit Nis'424 | Ninit Nis'430 | Ninit Nis'610 | Ninit Nis'617 => true
  | _ => false
  end.
Extract Inlined Constant state_set_2 => "assert false".

Definition state_set_3 (s:state) : bool :=
  match s with
  | Init Init'0 | Ninit Nis'80 | Ninit Nis'89 | Ninit Nis'90 | Ninit Nis'91 | Ninit Nis'92 | Ninit Nis'93 | Ninit Nis'100 | Ninit Nis'101 | Ninit Nis'102 | Ninit Nis'104 | Ninit Nis'111 | Ninit Nis'115 | Ninit Nis'217 | Ninit Nis'275 | Ninit Nis'367 | Ninit Nis'383 | Ninit Nis'385 | Ninit Nis'386 | Ninit Nis'424 | Ninit Nis'430 | Ninit Nis'610 | Ninit Nis'617 => true
  | _ => false
  end.
Extract Inlined Constant state_set_3 => "assert false".

Definition state_set_4 (s:state) : bool :=
  match s with
  | Init Init'0 | Ninit Nis'63 | Ninit Nis'268 | Ninit Nis'367 | Ninit Nis'383 | Ninit Nis'385 | Ninit Nis'386 | Ninit Nis'424 | Ninit Nis'430 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_4 => "assert false".

Definition state_set_5 (s:state) : bool :=
  match s with
  | Ninit Nis'9 => true
  | _ => false
  end.
Extract Inlined Constant state_set_5 => "assert false".

Definition state_set_6 (s:state) : bool :=
  match s with
  | Ninit Nis'10 | Ninit Nis'15 | Ninit Nis'18 | Ninit Nis'23 | Ninit Nis'24 | Ninit Nis'27 | Ninit Nis'28 | Ninit Nis'38 | Ninit Nis'40 | Ninit Nis'43 | Ninit Nis'50 | Ninit Nis'117 | Ninit Nis'119 | Ninit Nis'125 | Ninit Nis'139 | Ninit Nis'141 | Ninit Nis'143 | Ninit Nis'145 | Ninit Nis'147 | Ninit Nis'151 | Ninit Nis'153 | Ninit Nis'155 | Ninit Nis'158 | Ninit Nis'161 | Ninit Nis'163 | Ninit Nis'165 | Ninit Nis'168 | Ninit Nis'170 | Ninit Nis'172 | Ninit Nis'174 | Ninit Nis'176 | Ninit Nis'178 | Ninit Nis'181 | Ninit Nis'187 | Ninit Nis'190 | Ninit Nis'193 | Ninit Nis'199 | Ninit Nis'201 | Ninit Nis'209 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'256 | Ninit Nis'264 | Ninit Nis'286 | Ninit Nis'318 | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'336 | Ninit Nis'340 | Ninit Nis'345 | Ninit Nis'351 | Ninit Nis'380 | Ninit Nis'386 | Ninit Nis'388 | Ninit Nis'390 | Ninit Nis'392 | Ninit Nis'394 | Ninit Nis'396 | Ninit Nis'401 | Ninit Nis'403 | Ninit Nis'405 | Ninit Nis'407 | Ninit Nis'409 | Ninit Nis'411 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'417 | Ninit Nis'419 | Ninit Nis'424 | Ninit Nis'425 | Ninit Nis'426 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'430 | Ninit Nis'431 | Ninit Nis'432 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'439 | Ninit Nis'441 | Ninit Nis'461 | Ninit Nis'489 | Ninit Nis'495 | Ninit Nis'498 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'505 | Ninit Nis'506 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'513 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'519 | Ninit Nis'520 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'527 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'535 | Ninit Nis'540 | Ninit Nis'541 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'558 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'565 | Ninit Nis'566 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'573 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'579 | Ninit Nis'580 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'587 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_6 => "assert false".

Definition state_set_7 (s:state) : bool :=
  match s with
  | Ninit Nis'15 => true
  | _ => false
  end.
Extract Inlined Constant state_set_7 => "assert false".

Definition state_set_8 (s:state) : bool :=
  match s with
  | Init Init'0 | Ninit Nis'18 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'30 | Ninit Nis'45 | Ninit Nis'50 | Ninit Nis'54 | Ninit Nis'55 | Ninit Nis'57 | Ninit Nis'59 | Ninit Nis'63 | Ninit Nis'69 | Ninit Nis'70 | Ninit Nis'80 | Ninit Nis'89 | Ninit Nis'90 | Ninit Nis'91 | Ninit Nis'92 | Ninit Nis'93 | Ninit Nis'100 | Ninit Nis'101 | Ninit Nis'102 | Ninit Nis'104 | Ninit Nis'111 | Ninit Nis'115 | Ninit Nis'117 | Ninit Nis'209 | Ninit Nis'217 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'242 | Ninit Nis'244 | Ninit Nis'268 | Ninit Nis'275 | Ninit Nis'296 | Ninit Nis'367 | Ninit Nis'383 | Ninit Nis'385 | Ninit Nis'386 | Ninit Nis'424 | Ninit Nis'430 | Ninit Nis'610 | Ninit Nis'617 => true
  | _ => false
  end.
Extract Inlined Constant state_set_8 => "assert false".

Definition state_set_9 (s:state) : bool :=
  match s with
  | Ninit Nis'22 => true
  | _ => false
  end.
Extract Inlined Constant state_set_9 => "assert false".

Definition state_set_10 (s:state) : bool :=
  match s with
  | Ninit Nis'10 | Ninit Nis'18 | Ninit Nis'23 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'38 | Ninit Nis'43 | Ninit Nis'50 | Ninit Nis'117 | Ninit Nis'119 | Ninit Nis'125 | Ninit Nis'139 | Ninit Nis'141 | Ninit Nis'143 | Ninit Nis'145 | Ninit Nis'147 | Ninit Nis'151 | Ninit Nis'153 | Ninit Nis'155 | Ninit Nis'158 | Ninit Nis'161 | Ninit Nis'163 | Ninit Nis'165 | Ninit Nis'168 | Ninit Nis'170 | Ninit Nis'172 | Ninit Nis'174 | Ninit Nis'176 | Ninit Nis'178 | Ninit Nis'181 | Ninit Nis'187 | Ninit Nis'190 | Ninit Nis'193 | Ninit Nis'199 | Ninit Nis'201 | Ninit Nis'209 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'256 | Ninit Nis'264 | Ninit Nis'286 | Ninit Nis'318 | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'336 | Ninit Nis'340 | Ninit Nis'345 | Ninit Nis'351 | Ninit Nis'380 | Ninit Nis'386 | Ninit Nis'388 | Ninit Nis'390 | Ninit Nis'392 | Ninit Nis'394 | Ninit Nis'396 | Ninit Nis'401 | Ninit Nis'403 | Ninit Nis'405 | Ninit Nis'407 | Ninit Nis'409 | Ninit Nis'411 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'417 | Ninit Nis'419 | Ninit Nis'424 | Ninit Nis'425 | Ninit Nis'426 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'430 | Ninit Nis'431 | Ninit Nis'432 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'439 | Ninit Nis'441 | Ninit Nis'461 | Ninit Nis'489 | Ninit Nis'495 | Ninit Nis'498 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'505 | Ninit Nis'506 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'513 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'519 | Ninit Nis'520 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'527 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'535 | Ninit Nis'540 | Ninit Nis'541 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'558 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'565 | Ninit Nis'566 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'573 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'579 | Ninit Nis'580 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'587 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_10 => "assert false".

Definition state_set_11 (s:state) : bool :=
  match s with
  | Ninit Nis'27 | Ninit Nis'40 => true
  | _ => false
  end.
Extract Inlined Constant state_set_11 => "assert false".

Definition state_set_12 (s:state) : bool :=
  match s with
  | Ninit Nis'31 => true
  | _ => false
  end.
Extract Inlined Constant state_set_12 => "assert false".

Definition state_set_13 (s:state) : bool :=
  match s with
  | Ninit Nis'32 => true
  | _ => false
  end.
Extract Inlined Constant state_set_13 => "assert false".

Definition state_set_14 (s:state) : bool :=
  match s with
  | Ninit Nis'33 | Ninit Nis'305 => true
  | _ => false
  end.
Extract Inlined Constant state_set_14 => "assert false".

Definition state_set_15 (s:state) : bool :=
  match s with
  | Ninit Nis'37 => true
  | _ => false
  end.
Extract Inlined Constant state_set_15 => "assert false".

Definition state_set_16 (s:state) : bool :=
  match s with
  | Ninit Nis'38 => true
  | _ => false
  end.
Extract Inlined Constant state_set_16 => "assert false".

Definition state_set_17 (s:state) : bool :=
  match s with
  | Ninit Nis'42 => true
  | _ => false
  end.
Extract Inlined Constant state_set_17 => "assert false".

Definition state_set_18 (s:state) : bool :=
  match s with
  | Ninit Nis'44 => true
  | _ => false
  end.
Extract Inlined Constant state_set_18 => "assert false".

Definition state_set_19 (s:state) : bool :=
  match s with
  | Ninit Nis'49 => true
  | _ => false
  end.
Extract Inlined Constant state_set_19 => "assert false".

Definition state_set_20 (s:state) : bool :=
  match s with
  | Ninit Nis'53 => true
  | _ => false
  end.
Extract Inlined Constant state_set_20 => "assert false".

Definition state_set_21 (s:state) : bool :=
  match s with
  | Ninit Nis'18 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'45 | Ninit Nis'50 | Ninit Nis'54 | Ninit Nis'55 | Ninit Nis'57 | Ninit Nis'63 | Ninit Nis'268 | Ninit Nis'296 => true
  | _ => false
  end.
Extract Inlined Constant state_set_21 => "assert false".

Definition state_set_22 (s:state) : bool :=
  match s with
  | Ninit Nis'18 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'45 | Ninit Nis'50 | Ninit Nis'54 | Ninit Nis'55 | Ninit Nis'57 | Ninit Nis'63 | Ninit Nis'69 | Ninit Nis'70 | Ninit Nis'89 | Ninit Nis'90 | Ninit Nis'91 | Ninit Nis'92 | Ninit Nis'93 | Ninit Nis'117 | Ninit Nis'209 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'268 | Ninit Nis'296 => true
  | _ => false
  end.
Extract Inlined Constant state_set_22 => "assert false".

Definition state_set_23 (s:state) : bool :=
  match s with
  | Ninit Nis'59 => true
  | _ => false
  end.
Extract Inlined Constant state_set_23 => "assert false".

Definition state_set_24 (s:state) : bool :=
  match s with
  | Ninit Nis'60 => true
  | _ => false
  end.
Extract Inlined Constant state_set_24 => "assert false".

Definition state_set_25 (s:state) : bool :=
  match s with
  | Ninit Nis'61 => true
  | _ => false
  end.
Extract Inlined Constant state_set_25 => "assert false".

Definition state_set_26 (s:state) : bool :=
  match s with
  | Ninit Nis'62 => true
  | _ => false
  end.
Extract Inlined Constant state_set_26 => "assert false".

Definition state_set_27 (s:state) : bool :=
  match s with
  | Ninit Nis'63 => true
  | _ => false
  end.
Extract Inlined Constant state_set_27 => "assert false".

Definition state_set_28 (s:state) : bool :=
  match s with
  | Ninit Nis'62 | Ninit Nis'267 => true
  | _ => false
  end.
Extract Inlined Constant state_set_28 => "assert false".

Definition state_set_29 (s:state) : bool :=
  match s with
  | Ninit Nis'63 | Ninit Nis'268 => true
  | _ => false
  end.
Extract Inlined Constant state_set_29 => "assert false".

Definition state_set_30 (s:state) : bool :=
  match s with
  | Ninit Nis'67 | Ninit Nis'77 | Ninit Nis'78 | Ninit Nis'114 | Ninit Nis'115 | Ninit Nis'215 | Ninit Nis'261 | Ninit Nis'373 | Ninit Nis'377 | Ninit Nis'384 => true
  | _ => false
  end.
Extract Inlined Constant state_set_30 => "assert false".

Definition state_set_31 (s:state) : bool :=
  match s with
  | Ninit Nis'67 | Ninit Nis'69 | Ninit Nis'70 | Ninit Nis'77 | Ninit Nis'114 | Ninit Nis'115 | Ninit Nis'261 | Ninit Nis'274 | Ninit Nis'275 | Ninit Nis'373 | Ninit Nis'377 | Ninit Nis'384 => true
  | _ => false
  end.
Extract Inlined Constant state_set_31 => "assert false".

Definition state_set_32 (s:state) : bool :=
  match s with
  | Ninit Nis'69 => true
  | _ => false
  end.
Extract Inlined Constant state_set_32 => "assert false".

Definition state_set_33 (s:state) : bool :=
  match s with
  | Ninit Nis'69 | Ninit Nis'117 | Ninit Nis'222 | Ninit Nis'233 => true
  | _ => false
  end.
Extract Inlined Constant state_set_33 => "assert false".

Definition state_set_34 (s:state) : bool :=
  match s with
  | Ninit Nis'70 | Ninit Nis'209 | Ninit Nis'224 | Ninit Nis'235 => true
  | _ => false
  end.
Extract Inlined Constant state_set_34 => "assert false".

Definition state_set_35 (s:state) : bool :=
  match s with
  | Ninit Nis'70 => true
  | _ => false
  end.
Extract Inlined Constant state_set_35 => "assert false".

Definition state_set_36 (s:state) : bool :=
  match s with
  | Ninit Nis'67 => true
  | _ => false
  end.
Extract Inlined Constant state_set_36 => "assert false".

Definition state_set_37 (s:state) : bool :=
  match s with
  | Ninit Nis'67 | Ninit Nis'77 | Ninit Nis'78 | Ninit Nis'261 | Ninit Nis'373 | Ninit Nis'377 | Ninit Nis'384 => true
  | _ => false
  end.
Extract Inlined Constant state_set_37 => "assert false".

Definition state_set_38 (s:state) : bool :=
  match s with
  | Ninit Nis'67 | Ninit Nis'77 | Ninit Nis'261 | Ninit Nis'373 | Ninit Nis'377 | Ninit Nis'384 => true
  | _ => false
  end.
Extract Inlined Constant state_set_38 => "assert false".

Definition state_set_39 (s:state) : bool :=
  match s with
  | Ninit Nis'67 | Ninit Nis'77 | Ninit Nis'114 | Ninit Nis'115 | Ninit Nis'261 | Ninit Nis'373 | Ninit Nis'377 | Ninit Nis'384 => true
  | _ => false
  end.
Extract Inlined Constant state_set_39 => "assert false".

Definition state_set_40 (s:state) : bool :=
  match s with
  | Ninit Nis'78 | Ninit Nis'215 => true
  | _ => false
  end.
Extract Inlined Constant state_set_40 => "assert false".

Definition state_set_41 (s:state) : bool :=
  match s with
  | Ninit Nis'79 | Ninit Nis'232 => true
  | _ => false
  end.
Extract Inlined Constant state_set_41 => "assert false".

Definition state_set_42 (s:state) : bool :=
  match s with
  | Ninit Nis'80 => true
  | _ => false
  end.
Extract Inlined Constant state_set_42 => "assert false".

Definition state_set_43 (s:state) : bool :=
  match s with
  | Init Init'0 | Ninit Nis'80 | Ninit Nis'100 | Ninit Nis'101 | Ninit Nis'102 | Ninit Nis'104 | Ninit Nis'111 | Ninit Nis'115 | Ninit Nis'217 | Ninit Nis'275 | Ninit Nis'367 | Ninit Nis'383 | Ninit Nis'385 | Ninit Nis'386 | Ninit Nis'424 | Ninit Nis'430 | Ninit Nis'610 | Ninit Nis'617 => true
  | _ => false
  end.
Extract Inlined Constant state_set_43 => "assert false".

Definition state_set_44 (s:state) : bool :=
  match s with
  | Ninit Nis'89 | Ninit Nis'90 | Ninit Nis'91 | Ninit Nis'92 | Ninit Nis'93 => true
  | _ => false
  end.
Extract Inlined Constant state_set_44 => "assert false".

Definition state_set_45 (s:state) : bool :=
  match s with
  | Ninit Nis'93 => true
  | _ => false
  end.
Extract Inlined Constant state_set_45 => "assert false".

Definition state_set_46 (s:state) : bool :=
  match s with
  | Ninit Nis'92 => true
  | _ => false
  end.
Extract Inlined Constant state_set_46 => "assert false".

Definition state_set_47 (s:state) : bool :=
  match s with
  | Ninit Nis'91 => true
  | _ => false
  end.
Extract Inlined Constant state_set_47 => "assert false".

Definition state_set_48 (s:state) : bool :=
  match s with
  | Ninit Nis'90 => true
  | _ => false
  end.
Extract Inlined Constant state_set_48 => "assert false".

Definition state_set_49 (s:state) : bool :=
  match s with
  | Ninit Nis'89 => true
  | _ => false
  end.
Extract Inlined Constant state_set_49 => "assert false".

Definition state_set_50 (s:state) : bool :=
  match s with
  | Ninit Nis'102 => true
  | _ => false
  end.
Extract Inlined Constant state_set_50 => "assert false".

Definition state_set_51 (s:state) : bool :=
  match s with
  | Init Init'0 | Ninit Nis'80 | Ninit Nis'100 | Ninit Nis'101 | Ninit Nis'102 | Ninit Nis'104 | Ninit Nis'111 | Ninit Nis'115 | Ninit Nis'217 | Ninit Nis'275 | Ninit Nis'367 | Ninit Nis'385 | Ninit Nis'386 | Ninit Nis'424 | Ninit Nis'430 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_51 => "assert false".

Definition state_set_52 (s:state) : bool :=
  match s with
  | Ninit Nis'104 | Ninit Nis'617 => true
  | _ => false
  end.
Extract Inlined Constant state_set_52 => "assert false".

Definition state_set_53 (s:state) : bool :=
  match s with
  | Ninit Nis'101 => true
  | _ => false
  end.
Extract Inlined Constant state_set_53 => "assert false".

Definition state_set_54 (s:state) : bool :=
  match s with
  | Ninit Nis'100 => true
  | _ => false
  end.
Extract Inlined Constant state_set_54 => "assert false".

Definition state_set_55 (s:state) : bool :=
  match s with
  | Ninit Nis'108 => true
  | _ => false
  end.
Extract Inlined Constant state_set_55 => "assert false".

Definition state_set_56 (s:state) : bool :=
  match s with
  | Ninit Nis'80 | Ninit Nis'115 | Ninit Nis'217 | Ninit Nis'275 => true
  | _ => false
  end.
Extract Inlined Constant state_set_56 => "assert false".

Definition state_set_57 (s:state) : bool :=
  match s with
  | Ninit Nis'110 => true
  | _ => false
  end.
Extract Inlined Constant state_set_57 => "assert false".

Definition state_set_58 (s:state) : bool :=
  match s with
  | Ninit Nis'111 => true
  | _ => false
  end.
Extract Inlined Constant state_set_58 => "assert false".

Definition state_set_59 (s:state) : bool :=
  match s with
  | Ninit Nis'80 | Ninit Nis'111 | Ninit Nis'115 | Ninit Nis'217 | Ninit Nis'275 => true
  | _ => false
  end.
Extract Inlined Constant state_set_59 => "assert false".

Definition state_set_60 (s:state) : bool :=
  match s with
  | Ninit Nis'114 | Ninit Nis'115 | Ninit Nis'215 => true
  | _ => false
  end.
Extract Inlined Constant state_set_60 => "assert false".

Definition state_set_61 (s:state) : bool :=
  match s with
  | Ninit Nis'114 | Ninit Nis'115 | Ninit Nis'215 | Ninit Nis'274 | Ninit Nis'275 | Ninit Nis'276 => true
  | _ => false
  end.
Extract Inlined Constant state_set_61 => "assert false".

Definition state_set_62 (s:state) : bool :=
  match s with
  | Ninit Nis'115 | Ninit Nis'275 => true
  | _ => false
  end.
Extract Inlined Constant state_set_62 => "assert false".

Definition state_set_63 (s:state) : bool :=
  match s with
  | Ninit Nis'117 => true
  | _ => false
  end.
Extract Inlined Constant state_set_63 => "assert false".

Definition state_set_64 (s:state) : bool :=
  match s with
  | Ninit Nis'10 | Ninit Nis'119 | Ninit Nis'141 | Ninit Nis'143 | Ninit Nis'145 | Ninit Nis'147 | Ninit Nis'151 | Ninit Nis'153 | Ninit Nis'155 | Ninit Nis'158 | Ninit Nis'161 | Ninit Nis'163 | Ninit Nis'165 | Ninit Nis'170 | Ninit Nis'172 | Ninit Nis'174 | Ninit Nis'176 | Ninit Nis'178 | Ninit Nis'181 | Ninit Nis'190 | Ninit Nis'193 | Ninit Nis'256 | Ninit Nis'264 | Ninit Nis'286 | Ninit Nis'318 | Ninit Nis'351 | Ninit Nis'439 | Ninit Nis'541 => true
  | _ => false
  end.
Extract Inlined Constant state_set_64 => "assert false".

Definition state_set_65 (s:state) : bool :=
  match s with
  | Ninit Nis'122 => true
  | _ => false
  end.
Extract Inlined Constant state_set_65 => "assert false".

Definition state_set_66 (s:state) : bool :=
  match s with
  | Ninit Nis'123 => true
  | _ => false
  end.
Extract Inlined Constant state_set_66 => "assert false".

Definition state_set_67 (s:state) : bool :=
  match s with
  | Ninit Nis'125 => true
  | _ => false
  end.
Extract Inlined Constant state_set_67 => "assert false".

Definition state_set_68 (s:state) : bool :=
  match s with
  | Ninit Nis'18 | Ninit Nis'23 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'38 | Ninit Nis'43 | Ninit Nis'50 | Ninit Nis'117 | Ninit Nis'125 | Ninit Nis'139 | Ninit Nis'168 | Ninit Nis'187 | Ninit Nis'199 | Ninit Nis'201 | Ninit Nis'209 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'336 | Ninit Nis'340 | Ninit Nis'345 | Ninit Nis'380 | Ninit Nis'386 | Ninit Nis'388 | Ninit Nis'390 | Ninit Nis'392 | Ninit Nis'394 | Ninit Nis'396 | Ninit Nis'401 | Ninit Nis'403 | Ninit Nis'405 | Ninit Nis'407 | Ninit Nis'409 | Ninit Nis'411 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'417 | Ninit Nis'419 | Ninit Nis'424 | Ninit Nis'425 | Ninit Nis'426 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'430 | Ninit Nis'431 | Ninit Nis'432 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'441 | Ninit Nis'461 | Ninit Nis'489 | Ninit Nis'495 | Ninit Nis'498 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'505 | Ninit Nis'506 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'513 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'519 | Ninit Nis'520 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'527 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'535 | Ninit Nis'540 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'558 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'565 | Ninit Nis'566 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'573 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'579 | Ninit Nis'580 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'587 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_68 => "assert false".

Definition state_set_69 (s:state) : bool :=
  match s with
  | Ninit Nis'127 => true
  | _ => false
  end.
Extract Inlined Constant state_set_69 => "assert false".

Definition state_set_70 (s:state) : bool :=
  match s with
  | Ninit Nis'10 | Ninit Nis'18 | Ninit Nis'23 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'38 | Ninit Nis'43 | Ninit Nis'50 | Ninit Nis'117 | Ninit Nis'125 | Ninit Nis'139 | Ninit Nis'168 | Ninit Nis'170 | Ninit Nis'172 | Ninit Nis'174 | Ninit Nis'176 | Ninit Nis'178 | Ninit Nis'181 | Ninit Nis'187 | Ninit Nis'190 | Ninit Nis'193 | Ninit Nis'199 | Ninit Nis'201 | Ninit Nis'209 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'256 | Ninit Nis'264 | Ninit Nis'286 | Ninit Nis'318 | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'336 | Ninit Nis'340 | Ninit Nis'345 | Ninit Nis'380 | Ninit Nis'386 | Ninit Nis'388 | Ninit Nis'390 | Ninit Nis'392 | Ninit Nis'394 | Ninit Nis'396 | Ninit Nis'401 | Ninit Nis'403 | Ninit Nis'405 | Ninit Nis'407 | Ninit Nis'409 | Ninit Nis'411 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'417 | Ninit Nis'419 | Ninit Nis'424 | Ninit Nis'425 | Ninit Nis'426 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'430 | Ninit Nis'431 | Ninit Nis'432 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'439 | Ninit Nis'441 | Ninit Nis'461 | Ninit Nis'489 | Ninit Nis'495 | Ninit Nis'498 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'505 | Ninit Nis'506 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'513 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'519 | Ninit Nis'520 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'527 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'535 | Ninit Nis'540 | Ninit Nis'541 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'558 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'565 | Ninit Nis'566 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'573 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'579 | Ninit Nis'580 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'587 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_70 => "assert false".

Definition state_set_71 (s:state) : bool :=
  match s with
  | Ninit Nis'10 | Ninit Nis'18 | Ninit Nis'23 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'38 | Ninit Nis'43 | Ninit Nis'50 | Ninit Nis'117 | Ninit Nis'125 | Ninit Nis'139 | Ninit Nis'158 | Ninit Nis'161 | Ninit Nis'163 | Ninit Nis'165 | Ninit Nis'168 | Ninit Nis'170 | Ninit Nis'172 | Ninit Nis'174 | Ninit Nis'176 | Ninit Nis'178 | Ninit Nis'181 | Ninit Nis'187 | Ninit Nis'190 | Ninit Nis'193 | Ninit Nis'199 | Ninit Nis'201 | Ninit Nis'209 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'256 | Ninit Nis'264 | Ninit Nis'286 | Ninit Nis'318 | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'336 | Ninit Nis'340 | Ninit Nis'345 | Ninit Nis'380 | Ninit Nis'386 | Ninit Nis'388 | Ninit Nis'390 | Ninit Nis'392 | Ninit Nis'394 | Ninit Nis'396 | Ninit Nis'401 | Ninit Nis'403 | Ninit Nis'405 | Ninit Nis'407 | Ninit Nis'409 | Ninit Nis'411 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'417 | Ninit Nis'419 | Ninit Nis'424 | Ninit Nis'425 | Ninit Nis'426 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'430 | Ninit Nis'431 | Ninit Nis'432 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'439 | Ninit Nis'441 | Ninit Nis'461 | Ninit Nis'489 | Ninit Nis'495 | Ninit Nis'498 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'505 | Ninit Nis'506 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'513 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'519 | Ninit Nis'520 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'527 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'535 | Ninit Nis'540 | Ninit Nis'541 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'558 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'565 | Ninit Nis'566 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'573 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'579 | Ninit Nis'580 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'587 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_71 => "assert false".

Definition state_set_72 (s:state) : bool :=
  match s with
  | Ninit Nis'140 | Ninit Nis'159 | Ninit Nis'162 | Ninit Nis'164 | Ninit Nis'166 => true
  | _ => false
  end.
Extract Inlined Constant state_set_72 => "assert false".

Definition state_set_73 (s:state) : bool :=
  match s with
  | Ninit Nis'10 | Ninit Nis'18 | Ninit Nis'23 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'38 | Ninit Nis'43 | Ninit Nis'50 | Ninit Nis'117 | Ninit Nis'125 | Ninit Nis'139 | Ninit Nis'141 | Ninit Nis'155 | Ninit Nis'158 | Ninit Nis'161 | Ninit Nis'163 | Ninit Nis'165 | Ninit Nis'168 | Ninit Nis'170 | Ninit Nis'172 | Ninit Nis'174 | Ninit Nis'176 | Ninit Nis'178 | Ninit Nis'181 | Ninit Nis'187 | Ninit Nis'190 | Ninit Nis'193 | Ninit Nis'199 | Ninit Nis'201 | Ninit Nis'209 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'256 | Ninit Nis'264 | Ninit Nis'286 | Ninit Nis'318 | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'336 | Ninit Nis'340 | Ninit Nis'345 | Ninit Nis'380 | Ninit Nis'386 | Ninit Nis'388 | Ninit Nis'390 | Ninit Nis'392 | Ninit Nis'394 | Ninit Nis'396 | Ninit Nis'401 | Ninit Nis'403 | Ninit Nis'405 | Ninit Nis'407 | Ninit Nis'409 | Ninit Nis'411 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'417 | Ninit Nis'419 | Ninit Nis'424 | Ninit Nis'425 | Ninit Nis'426 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'430 | Ninit Nis'431 | Ninit Nis'432 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'439 | Ninit Nis'441 | Ninit Nis'461 | Ninit Nis'489 | Ninit Nis'495 | Ninit Nis'498 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'505 | Ninit Nis'506 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'513 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'519 | Ninit Nis'520 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'527 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'535 | Ninit Nis'540 | Ninit Nis'541 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'558 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'565 | Ninit Nis'566 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'573 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'579 | Ninit Nis'580 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'587 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_73 => "assert false".

Definition state_set_74 (s:state) : bool :=
  match s with
  | Ninit Nis'10 | Ninit Nis'18 | Ninit Nis'23 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'38 | Ninit Nis'43 | Ninit Nis'50 | Ninit Nis'117 | Ninit Nis'125 | Ninit Nis'139 | Ninit Nis'141 | Ninit Nis'151 | Ninit Nis'153 | Ninit Nis'155 | Ninit Nis'158 | Ninit Nis'161 | Ninit Nis'163 | Ninit Nis'165 | Ninit Nis'168 | Ninit Nis'170 | Ninit Nis'172 | Ninit Nis'174 | Ninit Nis'176 | Ninit Nis'178 | Ninit Nis'181 | Ninit Nis'187 | Ninit Nis'190 | Ninit Nis'193 | Ninit Nis'199 | Ninit Nis'201 | Ninit Nis'209 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'256 | Ninit Nis'264 | Ninit Nis'286 | Ninit Nis'318 | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'336 | Ninit Nis'340 | Ninit Nis'345 | Ninit Nis'380 | Ninit Nis'386 | Ninit Nis'388 | Ninit Nis'390 | Ninit Nis'392 | Ninit Nis'394 | Ninit Nis'396 | Ninit Nis'401 | Ninit Nis'403 | Ninit Nis'405 | Ninit Nis'407 | Ninit Nis'409 | Ninit Nis'411 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'417 | Ninit Nis'419 | Ninit Nis'424 | Ninit Nis'425 | Ninit Nis'426 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'430 | Ninit Nis'431 | Ninit Nis'432 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'439 | Ninit Nis'441 | Ninit Nis'461 | Ninit Nis'489 | Ninit Nis'495 | Ninit Nis'498 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'505 | Ninit Nis'506 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'513 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'519 | Ninit Nis'520 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'527 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'535 | Ninit Nis'540 | Ninit Nis'541 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'558 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'565 | Ninit Nis'566 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'573 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'579 | Ninit Nis'580 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'587 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_74 => "assert false".

Definition state_set_75 (s:state) : bool :=
  match s with
  | Ninit Nis'142 | Ninit Nis'152 | Ninit Nis'154 => true
  | _ => false
  end.
Extract Inlined Constant state_set_75 => "assert false".

Definition state_set_76 (s:state) : bool :=
  match s with
  | Ninit Nis'143 => true
  | _ => false
  end.
Extract Inlined Constant state_set_76 => "assert false".

Definition state_set_77 (s:state) : bool :=
  match s with
  | Ninit Nis'145 => true
  | _ => false
  end.
Extract Inlined Constant state_set_77 => "assert false".

Definition state_set_78 (s:state) : bool :=
  match s with
  | Ninit Nis'147 => true
  | _ => false
  end.
Extract Inlined Constant state_set_78 => "assert false".

Definition state_set_79 (s:state) : bool :=
  match s with
  | Ninit Nis'141 => true
  | _ => false
  end.
Extract Inlined Constant state_set_79 => "assert false".

Definition state_set_80 (s:state) : bool :=
  match s with
  | Ninit Nis'150 | Ninit Nis'156 | Ninit Nis'160 => true
  | _ => false
  end.
Extract Inlined Constant state_set_80 => "assert false".

Definition state_set_81 (s:state) : bool :=
  match s with
  | Ninit Nis'151 => true
  | _ => false
  end.
Extract Inlined Constant state_set_81 => "assert false".

Definition state_set_82 (s:state) : bool :=
  match s with
  | Ninit Nis'153 => true
  | _ => false
  end.
Extract Inlined Constant state_set_82 => "assert false".

Definition state_set_83 (s:state) : bool :=
  match s with
  | Ninit Nis'155 => true
  | _ => false
  end.
Extract Inlined Constant state_set_83 => "assert false".

Definition state_set_84 (s:state) : bool :=
  match s with
  | Ninit Nis'10 | Ninit Nis'18 | Ninit Nis'23 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'38 | Ninit Nis'43 | Ninit Nis'50 | Ninit Nis'117 | Ninit Nis'125 | Ninit Nis'139 | Ninit Nis'168 | Ninit Nis'170 | Ninit Nis'172 | Ninit Nis'174 | Ninit Nis'181 | Ninit Nis'187 | Ninit Nis'190 | Ninit Nis'193 | Ninit Nis'199 | Ninit Nis'201 | Ninit Nis'209 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'256 | Ninit Nis'264 | Ninit Nis'286 | Ninit Nis'318 | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'336 | Ninit Nis'340 | Ninit Nis'345 | Ninit Nis'380 | Ninit Nis'386 | Ninit Nis'388 | Ninit Nis'390 | Ninit Nis'392 | Ninit Nis'394 | Ninit Nis'396 | Ninit Nis'401 | Ninit Nis'403 | Ninit Nis'405 | Ninit Nis'407 | Ninit Nis'409 | Ninit Nis'411 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'417 | Ninit Nis'419 | Ninit Nis'424 | Ninit Nis'425 | Ninit Nis'426 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'430 | Ninit Nis'431 | Ninit Nis'432 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'439 | Ninit Nis'441 | Ninit Nis'461 | Ninit Nis'489 | Ninit Nis'495 | Ninit Nis'498 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'505 | Ninit Nis'506 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'513 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'519 | Ninit Nis'520 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'527 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'535 | Ninit Nis'540 | Ninit Nis'541 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'558 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'565 | Ninit Nis'566 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'573 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'579 | Ninit Nis'580 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'587 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_84 => "assert false".

Definition state_set_85 (s:state) : bool :=
  match s with
  | Ninit Nis'157 | Ninit Nis'177 | Ninit Nis'179 => true
  | _ => false
  end.
Extract Inlined Constant state_set_85 => "assert false".

Definition state_set_86 (s:state) : bool :=
  match s with
  | Ninit Nis'158 => true
  | _ => false
  end.
Extract Inlined Constant state_set_86 => "assert false".

Definition state_set_87 (s:state) : bool :=
  match s with
  | Ninit Nis'161 => true
  | _ => false
  end.
Extract Inlined Constant state_set_87 => "assert false".

Definition state_set_88 (s:state) : bool :=
  match s with
  | Ninit Nis'163 => true
  | _ => false
  end.
Extract Inlined Constant state_set_88 => "assert false".

Definition state_set_89 (s:state) : bool :=
  match s with
  | Ninit Nis'165 => true
  | _ => false
  end.
Extract Inlined Constant state_set_89 => "assert false".

Definition state_set_90 (s:state) : bool :=
  match s with
  | Ninit Nis'10 | Ninit Nis'18 | Ninit Nis'23 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'38 | Ninit Nis'43 | Ninit Nis'50 | Ninit Nis'117 | Ninit Nis'125 | Ninit Nis'139 | Ninit Nis'168 | Ninit Nis'187 | Ninit Nis'190 | Ninit Nis'199 | Ninit Nis'201 | Ninit Nis'209 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'256 | Ninit Nis'264 | Ninit Nis'286 | Ninit Nis'318 | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'336 | Ninit Nis'340 | Ninit Nis'345 | Ninit Nis'380 | Ninit Nis'386 | Ninit Nis'388 | Ninit Nis'390 | Ninit Nis'392 | Ninit Nis'394 | Ninit Nis'396 | Ninit Nis'401 | Ninit Nis'403 | Ninit Nis'405 | Ninit Nis'407 | Ninit Nis'409 | Ninit Nis'411 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'417 | Ninit Nis'419 | Ninit Nis'424 | Ninit Nis'425 | Ninit Nis'426 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'430 | Ninit Nis'431 | Ninit Nis'432 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'439 | Ninit Nis'441 | Ninit Nis'461 | Ninit Nis'489 | Ninit Nis'495 | Ninit Nis'498 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'505 | Ninit Nis'506 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'513 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'519 | Ninit Nis'520 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'527 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'535 | Ninit Nis'540 | Ninit Nis'541 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'558 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'565 | Ninit Nis'566 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'573 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'579 | Ninit Nis'580 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'587 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_90 => "assert false".

Definition state_set_91 (s:state) : bool :=
  match s with
  | Ninit Nis'167 => true
  | _ => false
  end.
Extract Inlined Constant state_set_91 => "assert false".

Definition state_set_92 (s:state) : bool :=
  match s with
  | Ninit Nis'10 | Ninit Nis'18 | Ninit Nis'23 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'38 | Ninit Nis'43 | Ninit Nis'50 | Ninit Nis'117 | Ninit Nis'125 | Ninit Nis'139 | Ninit Nis'168 | Ninit Nis'187 | Ninit Nis'190 | Ninit Nis'193 | Ninit Nis'199 | Ninit Nis'201 | Ninit Nis'209 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'256 | Ninit Nis'264 | Ninit Nis'286 | Ninit Nis'318 | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'336 | Ninit Nis'340 | Ninit Nis'345 | Ninit Nis'380 | Ninit Nis'386 | Ninit Nis'388 | Ninit Nis'390 | Ninit Nis'392 | Ninit Nis'394 | Ninit Nis'396 | Ninit Nis'401 | Ninit Nis'403 | Ninit Nis'405 | Ninit Nis'407 | Ninit Nis'409 | Ninit Nis'411 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'417 | Ninit Nis'419 | Ninit Nis'424 | Ninit Nis'425 | Ninit Nis'426 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'430 | Ninit Nis'431 | Ninit Nis'432 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'439 | Ninit Nis'441 | Ninit Nis'461 | Ninit Nis'489 | Ninit Nis'495 | Ninit Nis'498 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'505 | Ninit Nis'506 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'513 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'519 | Ninit Nis'520 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'527 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'535 | Ninit Nis'540 | Ninit Nis'541 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'558 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'565 | Ninit Nis'566 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'573 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'579 | Ninit Nis'580 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'587 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_92 => "assert false".

Definition state_set_93 (s:state) : bool :=
  match s with
  | Ninit Nis'169 | Ninit Nis'194 => true
  | _ => false
  end.
Extract Inlined Constant state_set_93 => "assert false".

Definition state_set_94 (s:state) : bool :=
  match s with
  | Ninit Nis'170 => true
  | _ => false
  end.
Extract Inlined Constant state_set_94 => "assert false".

Definition state_set_95 (s:state) : bool :=
  match s with
  | Ninit Nis'10 | Ninit Nis'18 | Ninit Nis'23 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'38 | Ninit Nis'43 | Ninit Nis'50 | Ninit Nis'117 | Ninit Nis'125 | Ninit Nis'139 | Ninit Nis'168 | Ninit Nis'170 | Ninit Nis'187 | Ninit Nis'190 | Ninit Nis'193 | Ninit Nis'199 | Ninit Nis'201 | Ninit Nis'209 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'256 | Ninit Nis'264 | Ninit Nis'286 | Ninit Nis'318 | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'336 | Ninit Nis'340 | Ninit Nis'345 | Ninit Nis'380 | Ninit Nis'386 | Ninit Nis'388 | Ninit Nis'390 | Ninit Nis'392 | Ninit Nis'394 | Ninit Nis'396 | Ninit Nis'401 | Ninit Nis'403 | Ninit Nis'405 | Ninit Nis'407 | Ninit Nis'409 | Ninit Nis'411 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'417 | Ninit Nis'419 | Ninit Nis'424 | Ninit Nis'425 | Ninit Nis'426 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'430 | Ninit Nis'431 | Ninit Nis'432 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'439 | Ninit Nis'441 | Ninit Nis'461 | Ninit Nis'489 | Ninit Nis'495 | Ninit Nis'498 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'505 | Ninit Nis'506 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'513 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'519 | Ninit Nis'520 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'527 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'535 | Ninit Nis'540 | Ninit Nis'541 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'558 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'565 | Ninit Nis'566 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'573 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'579 | Ninit Nis'580 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'587 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_95 => "assert false".

Definition state_set_96 (s:state) : bool :=
  match s with
  | Ninit Nis'171 | Ninit Nis'185 => true
  | _ => false
  end.
Extract Inlined Constant state_set_96 => "assert false".

Definition state_set_97 (s:state) : bool :=
  match s with
  | Ninit Nis'172 => true
  | _ => false
  end.
Extract Inlined Constant state_set_97 => "assert false".

Definition state_set_98 (s:state) : bool :=
  match s with
  | Ninit Nis'10 | Ninit Nis'18 | Ninit Nis'23 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'38 | Ninit Nis'43 | Ninit Nis'50 | Ninit Nis'117 | Ninit Nis'125 | Ninit Nis'139 | Ninit Nis'168 | Ninit Nis'170 | Ninit Nis'172 | Ninit Nis'187 | Ninit Nis'190 | Ninit Nis'193 | Ninit Nis'199 | Ninit Nis'201 | Ninit Nis'209 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'256 | Ninit Nis'264 | Ninit Nis'286 | Ninit Nis'318 | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'336 | Ninit Nis'340 | Ninit Nis'345 | Ninit Nis'380 | Ninit Nis'386 | Ninit Nis'388 | Ninit Nis'390 | Ninit Nis'392 | Ninit Nis'394 | Ninit Nis'396 | Ninit Nis'401 | Ninit Nis'403 | Ninit Nis'405 | Ninit Nis'407 | Ninit Nis'409 | Ninit Nis'411 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'417 | Ninit Nis'419 | Ninit Nis'424 | Ninit Nis'425 | Ninit Nis'426 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'430 | Ninit Nis'431 | Ninit Nis'432 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'439 | Ninit Nis'441 | Ninit Nis'461 | Ninit Nis'489 | Ninit Nis'495 | Ninit Nis'498 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'505 | Ninit Nis'506 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'513 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'519 | Ninit Nis'520 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'527 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'535 | Ninit Nis'540 | Ninit Nis'541 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'558 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'565 | Ninit Nis'566 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'573 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'579 | Ninit Nis'580 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'587 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_98 => "assert false".

Definition state_set_99 (s:state) : bool :=
  match s with
  | Ninit Nis'173 | Ninit Nis'184 => true
  | _ => false
  end.
Extract Inlined Constant state_set_99 => "assert false".

Definition state_set_100 (s:state) : bool :=
  match s with
  | Ninit Nis'10 | Ninit Nis'18 | Ninit Nis'23 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'38 | Ninit Nis'43 | Ninit Nis'50 | Ninit Nis'117 | Ninit Nis'125 | Ninit Nis'139 | Ninit Nis'168 | Ninit Nis'170 | Ninit Nis'172 | Ninit Nis'174 | Ninit Nis'187 | Ninit Nis'190 | Ninit Nis'193 | Ninit Nis'199 | Ninit Nis'201 | Ninit Nis'209 | Ninit Nis'222 | Ninit Nis'224 | Ninit Nis'233 | Ninit Nis'235 | Ninit Nis'256 | Ninit Nis'264 | Ninit Nis'286 | Ninit Nis'318 | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'336 | Ninit Nis'340 | Ninit Nis'345 | Ninit Nis'380 | Ninit Nis'386 | Ninit Nis'388 | Ninit Nis'390 | Ninit Nis'392 | Ninit Nis'394 | Ninit Nis'396 | Ninit Nis'401 | Ninit Nis'403 | Ninit Nis'405 | Ninit Nis'407 | Ninit Nis'409 | Ninit Nis'411 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'417 | Ninit Nis'419 | Ninit Nis'424 | Ninit Nis'425 | Ninit Nis'426 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'430 | Ninit Nis'431 | Ninit Nis'432 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'439 | Ninit Nis'441 | Ninit Nis'461 | Ninit Nis'489 | Ninit Nis'495 | Ninit Nis'498 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'505 | Ninit Nis'506 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'513 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'519 | Ninit Nis'520 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'527 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'535 | Ninit Nis'540 | Ninit Nis'541 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'558 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'565 | Ninit Nis'566 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'573 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'579 | Ninit Nis'580 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'587 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_100 => "assert false".

Definition state_set_101 (s:state) : bool :=
  match s with
  | Ninit Nis'175 | Ninit Nis'182 => true
  | _ => false
  end.
Extract Inlined Constant state_set_101 => "assert false".

Definition state_set_102 (s:state) : bool :=
  match s with
  | Ninit Nis'176 => true
  | _ => false
  end.
Extract Inlined Constant state_set_102 => "assert false".

Definition state_set_103 (s:state) : bool :=
  match s with
  | Ninit Nis'178 => true
  | _ => false
  end.
Extract Inlined Constant state_set_103 => "assert false".

Definition state_set_104 (s:state) : bool :=
  match s with
  | Ninit Nis'174 => true
  | _ => false
  end.
Extract Inlined Constant state_set_104 => "assert false".

Definition state_set_105 (s:state) : bool :=
  match s with
  | Ninit Nis'180 | Ninit Nis'183 => true
  | _ => false
  end.
Extract Inlined Constant state_set_105 => "assert false".

Definition state_set_106 (s:state) : bool :=
  match s with
  | Ninit Nis'181 => true
  | _ => false
  end.
Extract Inlined Constant state_set_106 => "assert false".

Definition state_set_107 (s:state) : bool :=
  match s with
  | Ninit Nis'168 => true
  | _ => false
  end.
Extract Inlined Constant state_set_107 => "assert false".

Definition state_set_108 (s:state) : bool :=
  match s with
  | Ninit Nis'18 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'168 | Ninit Nis'201 | Ninit Nis'386 | Ninit Nis'388 | Ninit Nis'390 | Ninit Nis'392 | Ninit Nis'394 | Ninit Nis'396 | Ninit Nis'401 | Ninit Nis'403 | Ninit Nis'405 | Ninit Nis'407 | Ninit Nis'409 | Ninit Nis'411 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'417 | Ninit Nis'419 | Ninit Nis'424 | Ninit Nis'425 | Ninit Nis'426 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'430 | Ninit Nis'431 | Ninit Nis'432 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'441 | Ninit Nis'461 | Ninit Nis'489 | Ninit Nis'495 | Ninit Nis'498 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'505 | Ninit Nis'506 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'513 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'519 | Ninit Nis'520 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'527 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'535 | Ninit Nis'540 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'558 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'565 | Ninit Nis'566 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'573 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'579 | Ninit Nis'580 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'587 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_108 => "assert false".

Definition state_set_109 (s:state) : bool :=
  match s with
  | Ninit Nis'186 | Ninit Nis'202 | Ninit Nis'347 | Ninit Nis'389 | Ninit Nis'393 | Ninit Nis'398 | Ninit Nis'404 | Ninit Nis'408 | Ninit Nis'412 | Ninit Nis'418 | Ninit Nis'462 | Ninit Nis'482 | Ninit Nis'490 | Ninit Nis'494 | Ninit Nis'497 | Ninit Nis'501 | Ninit Nis'504 | Ninit Nis'509 | Ninit Nis'512 | Ninit Nis'516 | Ninit Nis'523 | Ninit Nis'526 | Ninit Nis'530 | Ninit Nis'536 | Ninit Nis'554 | Ninit Nis'557 | Ninit Nis'561 | Ninit Nis'564 | Ninit Nis'569 | Ninit Nis'572 | Ninit Nis'576 | Ninit Nis'583 | Ninit Nis'586 | Ninit Nis'590 => true
  | _ => false
  end.
Extract Inlined Constant state_set_109 => "assert false".

Definition state_set_110 (s:state) : bool :=
  match s with
  | Ninit Nis'187 => true
  | _ => false
  end.
Extract Inlined Constant state_set_110 => "assert false".

Definition state_set_111 (s:state) : bool :=
  match s with
  | Ninit Nis'186 => true
  | _ => false
  end.
Extract Inlined Constant state_set_111 => "assert false".

Definition state_set_112 (s:state) : bool :=
  match s with
  | Ninit Nis'190 => true
  | _ => false
  end.
Extract Inlined Constant state_set_112 => "assert false".

Definition state_set_113 (s:state) : bool :=
  match s with
  | Ninit Nis'193 => true
  | _ => false
  end.
Extract Inlined Constant state_set_113 => "assert false".

Definition state_set_114 (s:state) : bool :=
  match s with
  | Ninit Nis'139 => true
  | _ => false
  end.
Extract Inlined Constant state_set_114 => "assert false".

Definition state_set_115 (s:state) : bool :=
  match s with
  | Ninit Nis'23 | Ninit Nis'38 | Ninit Nis'50 | Ninit Nis'125 => true
  | _ => false
  end.
Extract Inlined Constant state_set_115 => "assert false".

Definition state_set_116 (s:state) : bool :=
  match s with
  | Ninit Nis'197 => true
  | _ => false
  end.
Extract Inlined Constant state_set_116 => "assert false".

Definition state_set_117 (s:state) : bool :=
  match s with
  | Ninit Nis'197 | Ninit Nis'280 | Ninit Nis'300 | Ninit Nis'353 => true
  | _ => false
  end.
Extract Inlined Constant state_set_117 => "assert false".

Definition state_set_118 (s:state) : bool :=
  match s with
  | Ninit Nis'199 => true
  | _ => false
  end.
Extract Inlined Constant state_set_118 => "assert false".

Definition state_set_119 (s:state) : bool :=
  match s with
  | Ninit Nis'201 => true
  | _ => false
  end.
Extract Inlined Constant state_set_119 => "assert false".

Definition state_set_120 (s:state) : bool :=
  match s with
  | Ninit Nis'202 => true
  | _ => false
  end.
Extract Inlined Constant state_set_120 => "assert false".

Definition state_set_121 (s:state) : bool :=
  match s with
  | Ninit Nis'205 => true
  | _ => false
  end.
Extract Inlined Constant state_set_121 => "assert false".

Definition state_set_122 (s:state) : bool :=
  match s with
  | Ninit Nis'119 => true
  | _ => false
  end.
Extract Inlined Constant state_set_122 => "assert false".

Definition state_set_123 (s:state) : bool :=
  match s with
  | Ninit Nis'209 => true
  | _ => false
  end.
Extract Inlined Constant state_set_123 => "assert false".

Definition state_set_124 (s:state) : bool :=
  match s with
  | Ninit Nis'211 => true
  | _ => false
  end.
Extract Inlined Constant state_set_124 => "assert false".

Definition state_set_125 (s:state) : bool :=
  match s with
  | Ninit Nis'213 => true
  | _ => false
  end.
Extract Inlined Constant state_set_125 => "assert false".

Definition state_set_126 (s:state) : bool :=
  match s with
  | Ninit Nis'114 | Ninit Nis'115 => true
  | _ => false
  end.
Extract Inlined Constant state_set_126 => "assert false".

Definition state_set_127 (s:state) : bool :=
  match s with
  | Ninit Nis'114 | Ninit Nis'115 | Ninit Nis'274 | Ninit Nis'275 => true
  | _ => false
  end.
Extract Inlined Constant state_set_127 => "assert false".

Definition state_set_128 (s:state) : bool :=
  match s with
  | Ninit Nis'215 | Ninit Nis'276 => true
  | _ => false
  end.
Extract Inlined Constant state_set_128 => "assert false".

Definition state_set_129 (s:state) : bool :=
  match s with
  | Ninit Nis'216 | Ninit Nis'241 => true
  | _ => false
  end.
Extract Inlined Constant state_set_129 => "assert false".

Definition state_set_130 (s:state) : bool :=
  match s with
  | Ninit Nis'217 => true
  | _ => false
  end.
Extract Inlined Constant state_set_130 => "assert false".

Definition state_set_131 (s:state) : bool :=
  match s with
  | Ninit Nis'219 => true
  | _ => false
  end.
Extract Inlined Constant state_set_131 => "assert false".

Definition state_set_132 (s:state) : bool :=
  match s with
  | Ninit Nis'222 => true
  | _ => false
  end.
Extract Inlined Constant state_set_132 => "assert false".

Definition state_set_133 (s:state) : bool :=
  match s with
  | Ninit Nis'224 => true
  | _ => false
  end.
Extract Inlined Constant state_set_133 => "assert false".

Definition state_set_134 (s:state) : bool :=
  match s with
  | Ninit Nis'226 => true
  | _ => false
  end.
Extract Inlined Constant state_set_134 => "assert false".

Definition state_set_135 (s:state) : bool :=
  match s with
  | Ninit Nis'228 => true
  | _ => false
  end.
Extract Inlined Constant state_set_135 => "assert false".

Definition state_set_136 (s:state) : bool :=
  match s with
  | Ninit Nis'230 => true
  | _ => false
  end.
Extract Inlined Constant state_set_136 => "assert false".

Definition state_set_137 (s:state) : bool :=
  match s with
  | Ninit Nis'233 => true
  | _ => false
  end.
Extract Inlined Constant state_set_137 => "assert false".

Definition state_set_138 (s:state) : bool :=
  match s with
  | Ninit Nis'235 => true
  | _ => false
  end.
Extract Inlined Constant state_set_138 => "assert false".

Definition state_set_139 (s:state) : bool :=
  match s with
  | Ninit Nis'237 => true
  | _ => false
  end.
Extract Inlined Constant state_set_139 => "assert false".

Definition state_set_140 (s:state) : bool :=
  match s with
  | Ninit Nis'239 => true
  | _ => false
  end.
Extract Inlined Constant state_set_140 => "assert false".

Definition state_set_141 (s:state) : bool :=
  match s with
  | Ninit Nis'67 | Ninit Nis'77 | Ninit Nis'114 | Ninit Nis'115 | Ninit Nis'261 | Ninit Nis'377 | Ninit Nis'384 => true
  | _ => false
  end.
Extract Inlined Constant state_set_141 => "assert false".

Definition state_set_142 (s:state) : bool :=
  match s with
  | Ninit Nis'242 | Ninit Nis'383 => true
  | _ => false
  end.
Extract Inlined Constant state_set_142 => "assert false".

Definition state_set_143 (s:state) : bool :=
  match s with
  | Ninit Nis'30 | Ninit Nis'59 | Ninit Nis'242 | Ninit Nis'244 => true
  | _ => false
  end.
Extract Inlined Constant state_set_143 => "assert false".

Definition state_set_144 (s:state) : bool :=
  match s with
  | Ninit Nis'30 | Ninit Nis'59 | Ninit Nis'242 | Ninit Nis'244 | Ninit Nis'383 | Ninit Nis'617 => true
  | _ => false
  end.
Extract Inlined Constant state_set_144 => "assert false".

Definition state_set_145 (s:state) : bool :=
  match s with
  | Ninit Nis'244 | Ninit Nis'617 => true
  | _ => false
  end.
Extract Inlined Constant state_set_145 => "assert false".

Definition state_set_146 (s:state) : bool :=
  match s with
  | Ninit Nis'77 | Ninit Nis'115 => true
  | _ => false
  end.
Extract Inlined Constant state_set_146 => "assert false".

Definition state_set_147 (s:state) : bool :=
  match s with
  | Ninit Nis'246 => true
  | _ => false
  end.
Extract Inlined Constant state_set_147 => "assert false".

Definition state_set_148 (s:state) : bool :=
  match s with
  | Ninit Nis'248 => true
  | _ => false
  end.
Extract Inlined Constant state_set_148 => "assert false".

Definition state_set_149 (s:state) : bool :=
  match s with
  | Ninit Nis'114 => true
  | _ => false
  end.
Extract Inlined Constant state_set_149 => "assert false".

Definition state_set_150 (s:state) : bool :=
  match s with
  | Ninit Nis'252 => true
  | _ => false
  end.
Extract Inlined Constant state_set_150 => "assert false".

Definition state_set_151 (s:state) : bool :=
  match s with
  | Ninit Nis'254 => true
  | _ => false
  end.
Extract Inlined Constant state_set_151 => "assert false".

Definition state_set_152 (s:state) : bool :=
  match s with
  | Ninit Nis'67 | Ninit Nis'261 => true
  | _ => false
  end.
Extract Inlined Constant state_set_152 => "assert false".

Definition state_set_153 (s:state) : bool :=
  match s with
  | Ninit Nis'256 => true
  | _ => false
  end.
Extract Inlined Constant state_set_153 => "assert false".

Definition state_set_154 (s:state) : bool :=
  match s with
  | Ninit Nis'10 | Ninit Nis'256 | Ninit Nis'264 | Ninit Nis'286 | Ninit Nis'318 | Ninit Nis'439 | Ninit Nis'541 => true
  | _ => false
  end.
Extract Inlined Constant state_set_154 => "assert false".

Definition state_set_155 (s:state) : bool :=
  match s with
  | Ninit Nis'259 => true
  | _ => false
  end.
Extract Inlined Constant state_set_155 => "assert false".

Definition state_set_156 (s:state) : bool :=
  match s with
  | Ninit Nis'261 => true
  | _ => false
  end.
Extract Inlined Constant state_set_156 => "assert false".

Definition state_set_157 (s:state) : bool :=
  match s with
  | Ninit Nis'263 => true
  | _ => false
  end.
Extract Inlined Constant state_set_157 => "assert false".

Definition state_set_158 (s:state) : bool :=
  match s with
  | Ninit Nis'264 => true
  | _ => false
  end.
Extract Inlined Constant state_set_158 => "assert false".

Definition state_set_159 (s:state) : bool :=
  match s with
  | Ninit Nis'267 => true
  | _ => false
  end.
Extract Inlined Constant state_set_159 => "assert false".

Definition state_set_160 (s:state) : bool :=
  match s with
  | Ninit Nis'268 => true
  | _ => false
  end.
Extract Inlined Constant state_set_160 => "assert false".

Definition state_set_161 (s:state) : bool :=
  match s with
  | Ninit Nis'57 => true
  | _ => false
  end.
Extract Inlined Constant state_set_161 => "assert false".

Definition state_set_162 (s:state) : bool :=
  match s with
  | Ninit Nis'55 => true
  | _ => false
  end.
Extract Inlined Constant state_set_162 => "assert false".

Definition state_set_163 (s:state) : bool :=
  match s with
  | Ninit Nis'54 => true
  | _ => false
  end.
Extract Inlined Constant state_set_163 => "assert false".

Definition state_set_164 (s:state) : bool :=
  match s with
  | Ninit Nis'272 => true
  | _ => false
  end.
Extract Inlined Constant state_set_164 => "assert false".

Definition state_set_165 (s:state) : bool :=
  match s with
  | Ninit Nis'18 | Ninit Nis'24 | Ninit Nis'28 | Ninit Nis'45 | Ninit Nis'50 | Ninit Nis'54 | Ninit Nis'296 => true
  | _ => false
  end.
Extract Inlined Constant state_set_165 => "assert false".

Definition state_set_166 (s:state) : bool :=
  match s with
  | Ninit Nis'274 | Ninit Nis'275 | Ninit Nis'276 => true
  | _ => false
  end.
Extract Inlined Constant state_set_166 => "assert false".

Definition state_set_167 (s:state) : bool :=
  match s with
  | Ninit Nis'274 | Ninit Nis'275 => true
  | _ => false
  end.
Extract Inlined Constant state_set_167 => "assert false".

Definition state_set_168 (s:state) : bool :=
  match s with
  | Ninit Nis'274 => true
  | _ => false
  end.
Extract Inlined Constant state_set_168 => "assert false".

Definition state_set_169 (s:state) : bool :=
  match s with
  | Ninit Nis'50 => true
  | _ => false
  end.
Extract Inlined Constant state_set_169 => "assert false".

Definition state_set_170 (s:state) : bool :=
  match s with
  | Ninit Nis'278 => true
  | _ => false
  end.
Extract Inlined Constant state_set_170 => "assert false".

Definition state_set_171 (s:state) : bool :=
  match s with
  | Ninit Nis'280 => true
  | _ => false
  end.
Extract Inlined Constant state_set_171 => "assert false".

Definition state_set_172 (s:state) : bool :=
  match s with
  | Ninit Nis'45 => true
  | _ => false
  end.
Extract Inlined Constant state_set_172 => "assert false".

Definition state_set_173 (s:state) : bool :=
  match s with
  | Ninit Nis'282 => true
  | _ => false
  end.
Extract Inlined Constant state_set_173 => "assert false".

Definition state_set_174 (s:state) : bool :=
  match s with
  | Ninit Nis'283 => true
  | _ => false
  end.
Extract Inlined Constant state_set_174 => "assert false".

Definition state_set_175 (s:state) : bool :=
  match s with
  | Ninit Nis'284 => true
  | _ => false
  end.
Extract Inlined Constant state_set_175 => "assert false".

Definition state_set_176 (s:state) : bool :=
  match s with
  | Ninit Nis'284 | Ninit Nis'291 | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'334 | Ninit Nis'345 => true
  | _ => false
  end.
Extract Inlined Constant state_set_176 => "assert false".

Definition state_set_177 (s:state) : bool :=
  match s with
  | Ninit Nis'286 => true
  | _ => false
  end.
Extract Inlined Constant state_set_177 => "assert false".

Definition state_set_178 (s:state) : bool :=
  match s with
  | Ninit Nis'287 => true
  | _ => false
  end.
Extract Inlined Constant state_set_178 => "assert false".

Definition state_set_179 (s:state) : bool :=
  match s with
  | Ninit Nis'289 => true
  | _ => false
  end.
Extract Inlined Constant state_set_179 => "assert false".

Definition state_set_180 (s:state) : bool :=
  match s with
  | Ninit Nis'291 => true
  | _ => false
  end.
Extract Inlined Constant state_set_180 => "assert false".

Definition state_set_181 (s:state) : bool :=
  match s with
  | Ninit Nis'284 | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'345 => true
  | _ => false
  end.
Extract Inlined Constant state_set_181 => "assert false".

Definition state_set_182 (s:state) : bool :=
  match s with
  | Ninit Nis'291 | Ninit Nis'334 => true
  | _ => false
  end.
Extract Inlined Constant state_set_182 => "assert false".

Definition state_set_183 (s:state) : bool :=
  match s with
  | Ninit Nis'43 => true
  | _ => false
  end.
Extract Inlined Constant state_set_183 => "assert false".

Definition state_set_184 (s:state) : bool :=
  match s with
  | Ninit Nis'295 => true
  | _ => false
  end.
Extract Inlined Constant state_set_184 => "assert false".

Definition state_set_185 (s:state) : bool :=
  match s with
  | Ninit Nis'296 => true
  | _ => false
  end.
Extract Inlined Constant state_set_185 => "assert false".

Definition state_set_186 (s:state) : bool :=
  match s with
  | Ninit Nis'297 => true
  | _ => false
  end.
Extract Inlined Constant state_set_186 => "assert false".

Definition state_set_187 (s:state) : bool :=
  match s with
  | Ninit Nis'40 => true
  | _ => false
  end.
Extract Inlined Constant state_set_187 => "assert false".

Definition state_set_188 (s:state) : bool :=
  match s with
  | Ninit Nis'300 => true
  | _ => false
  end.
Extract Inlined Constant state_set_188 => "assert false".

Definition state_set_189 (s:state) : bool :=
  match s with
  | Ninit Nis'33 => true
  | _ => false
  end.
Extract Inlined Constant state_set_189 => "assert false".

Definition state_set_190 (s:state) : bool :=
  match s with
  | Ninit Nis'302 => true
  | _ => false
  end.
Extract Inlined Constant state_set_190 => "assert false".

Definition state_set_191 (s:state) : bool :=
  match s with
  | Ninit Nis'303 => true
  | _ => false
  end.
Extract Inlined Constant state_set_191 => "assert false".

Definition state_set_192 (s:state) : bool :=
  match s with
  | Ninit Nis'305 => true
  | _ => false
  end.
Extract Inlined Constant state_set_192 => "assert false".

Definition state_set_193 (s:state) : bool :=
  match s with
  | Ninit Nis'30 => true
  | _ => false
  end.
Extract Inlined Constant state_set_193 => "assert false".

Definition state_set_194 (s:state) : bool :=
  match s with
  | Ninit Nis'308 => true
  | _ => false
  end.
Extract Inlined Constant state_set_194 => "assert false".

Definition state_set_195 (s:state) : bool :=
  match s with
  | Ninit Nis'309 => true
  | _ => false
  end.
Extract Inlined Constant state_set_195 => "assert false".

Definition state_set_196 (s:state) : bool :=
  match s with
  | Ninit Nis'310 | Ninit Nis'314 | Ninit Nis'321 | Ninit Nis'324 => true
  | _ => false
  end.
Extract Inlined Constant state_set_196 => "assert false".

Definition state_set_197 (s:state) : bool :=
  match s with
  | Ninit Nis'310 => true
  | _ => false
  end.
Extract Inlined Constant state_set_197 => "assert false".

Definition state_set_198 (s:state) : bool :=
  match s with
  | Ninit Nis'312 => true
  | _ => false
  end.
Extract Inlined Constant state_set_198 => "assert false".

Definition state_set_199 (s:state) : bool :=
  match s with
  | Ninit Nis'314 => true
  | _ => false
  end.
Extract Inlined Constant state_set_199 => "assert false".

Definition state_set_200 (s:state) : bool :=
  match s with
  | Ninit Nis'310 | Ninit Nis'321 => true
  | _ => false
  end.
Extract Inlined Constant state_set_200 => "assert false".

Definition state_set_201 (s:state) : bool :=
  match s with
  | Ninit Nis'312 | Ninit Nis'322 => true
  | _ => false
  end.
Extract Inlined Constant state_set_201 => "assert false".

Definition state_set_202 (s:state) : bool :=
  match s with
  | Ninit Nis'314 | Ninit Nis'324 => true
  | _ => false
  end.
Extract Inlined Constant state_set_202 => "assert false".

Definition state_set_203 (s:state) : bool :=
  match s with
  | Ninit Nis'317 => true
  | _ => false
  end.
Extract Inlined Constant state_set_203 => "assert false".

Definition state_set_204 (s:state) : bool :=
  match s with
  | Ninit Nis'318 => true
  | _ => false
  end.
Extract Inlined Constant state_set_204 => "assert false".

Definition state_set_205 (s:state) : bool :=
  match s with
  | Ninit Nis'321 => true
  | _ => false
  end.
Extract Inlined Constant state_set_205 => "assert false".

Definition state_set_206 (s:state) : bool :=
  match s with
  | Ninit Nis'322 => true
  | _ => false
  end.
Extract Inlined Constant state_set_206 => "assert false".

Definition state_set_207 (s:state) : bool :=
  match s with
  | Ninit Nis'324 => true
  | _ => false
  end.
Extract Inlined Constant state_set_207 => "assert false".

Definition state_set_208 (s:state) : bool :=
  match s with
  | Ninit Nis'28 => true
  | _ => false
  end.
Extract Inlined Constant state_set_208 => "assert false".

Definition state_set_209 (s:state) : bool :=
  match s with
  | Ninit Nis'326 => true
  | _ => false
  end.
Extract Inlined Constant state_set_209 => "assert false".

Definition state_set_210 (s:state) : bool :=
  match s with
  | Ninit Nis'18 | Ninit Nis'24 | Ninit Nis'28 => true
  | _ => false
  end.
Extract Inlined Constant state_set_210 => "assert false".

Definition state_set_211 (s:state) : bool :=
  match s with
  | Ninit Nis'326 | Ninit Nis'350 | Ninit Nis'355 => true
  | _ => false
  end.
Extract Inlined Constant state_set_211 => "assert false".

Definition state_set_212 (s:state) : bool :=
  match s with
  | Ninit Nis'327 | Ninit Nis'351 | Ninit Nis'356 => true
  | _ => false
  end.
Extract Inlined Constant state_set_212 => "assert false".

Definition state_set_213 (s:state) : bool :=
  match s with
  | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'336 | Ninit Nis'340 | Ninit Nis'345 | Ninit Nis'380 => true
  | _ => false
  end.
Extract Inlined Constant state_set_213 => "assert false".

Definition state_set_214 (s:state) : bool :=
  match s with
  | Ninit Nis'329 => true
  | _ => false
  end.
Extract Inlined Constant state_set_214 => "assert false".

Definition state_set_215 (s:state) : bool :=
  match s with
  | Ninit Nis'330 => true
  | _ => false
  end.
Extract Inlined Constant state_set_215 => "assert false".

Definition state_set_216 (s:state) : bool :=
  match s with
  | Ninit Nis'332 => true
  | _ => false
  end.
Extract Inlined Constant state_set_216 => "assert false".

Definition state_set_217 (s:state) : bool :=
  match s with
  | Ninit Nis'328 | Ninit Nis'329 | Ninit Nis'332 | Ninit Nis'345 => true
  | _ => false
  end.
Extract Inlined Constant state_set_217 => "assert false".

Definition state_set_218 (s:state) : bool :=
  match s with
  | Ninit Nis'334 => true
  | _ => false
  end.
Extract Inlined Constant state_set_218 => "assert false".

Definition state_set_219 (s:state) : bool :=
  match s with
  | Ninit Nis'328 | Ninit Nis'329 => true
  | _ => false
  end.
Extract Inlined Constant state_set_219 => "assert false".

Definition state_set_220 (s:state) : bool :=
  match s with
  | Ninit Nis'330 | Ninit Nis'343 => true
  | _ => false
  end.
Extract Inlined Constant state_set_220 => "assert false".

Definition state_set_221 (s:state) : bool :=
  match s with
  | Ninit Nis'332 | Ninit Nis'345 => true
  | _ => false
  end.
Extract Inlined Constant state_set_221 => "assert false".

Definition state_set_222 (s:state) : bool :=
  match s with
  | Ninit Nis'336 => true
  | _ => false
  end.
Extract Inlined Constant state_set_222 => "assert false".

Definition state_set_223 (s:state) : bool :=
  match s with
  | Ninit Nis'340 => true
  | _ => false
  end.
Extract Inlined Constant state_set_223 => "assert false".

Definition state_set_224 (s:state) : bool :=
  match s with
  | Ninit Nis'328 => true
  | _ => false
  end.
Extract Inlined Constant state_set_224 => "assert false".

Definition state_set_225 (s:state) : bool :=
  match s with
  | Ninit Nis'343 => true
  | _ => false
  end.
Extract Inlined Constant state_set_225 => "assert false".

Definition state_set_226 (s:state) : bool :=
  match s with
  | Ninit Nis'345 => true
  | _ => false
  end.
Extract Inlined Constant state_set_226 => "assert false".

Definition state_set_227 (s:state) : bool :=
  match s with
  | Ninit Nis'347 => true
  | _ => false
  end.
Extract Inlined Constant state_set_227 => "assert false".

Definition state_set_228 (s:state) : bool :=
  match s with
  | Ninit Nis'27 => true
  | _ => false
  end.
Extract Inlined Constant state_set_228 => "assert false".

Definition state_set_229 (s:state) : bool :=
  match s with
  | Ninit Nis'24 => true
  | _ => false
  end.
Extract Inlined Constant state_set_229 => "assert false".

Definition state_set_230 (s:state) : bool :=
  match s with
  | Ninit Nis'350 => true
  | _ => false
  end.
Extract Inlined Constant state_set_230 => "assert false".

Definition state_set_231 (s:state) : bool :=
  match s with
  | Ninit Nis'351 => true
  | _ => false
  end.
Extract Inlined Constant state_set_231 => "assert false".

Definition state_set_232 (s:state) : bool :=
  match s with
  | Ninit Nis'23 => true
  | _ => false
  end.
Extract Inlined Constant state_set_232 => "assert false".

Definition state_set_233 (s:state) : bool :=
  match s with
  | Ninit Nis'353 => true
  | _ => false
  end.
Extract Inlined Constant state_set_233 => "assert false".

Definition state_set_234 (s:state) : bool :=
  match s with
  | Ninit Nis'18 => true
  | _ => false
  end.
Extract Inlined Constant state_set_234 => "assert false".

Definition state_set_235 (s:state) : bool :=
  match s with
  | Ninit Nis'355 => true
  | _ => false
  end.
Extract Inlined Constant state_set_235 => "assert false".

Definition state_set_236 (s:state) : bool :=
  match s with
  | Ninit Nis'10 => true
  | _ => false
  end.
Extract Inlined Constant state_set_236 => "assert false".

Definition state_set_237 (s:state) : bool :=
  match s with
  | Ninit Nis'358 => true
  | _ => false
  end.
Extract Inlined Constant state_set_237 => "assert false".

Definition state_set_238 (s:state) : bool :=
  match s with
  | Ninit Nis'359 => true
  | _ => false
  end.
Extract Inlined Constant state_set_238 => "assert false".

Definition state_set_239 (s:state) : bool :=
  match s with
  | Ninit Nis'360 => true
  | _ => false
  end.
Extract Inlined Constant state_set_239 => "assert false".

Definition state_set_240 (s:state) : bool :=
  match s with
  | Ninit Nis'361 => true
  | _ => false
  end.
Extract Inlined Constant state_set_240 => "assert false".

Definition state_set_241 (s:state) : bool :=
  match s with
  | Init Init'0 => true
  | _ => false
  end.
Extract Inlined Constant state_set_241 => "assert false".

Definition state_set_242 (s:state) : bool :=
  match s with
  | Init Init'0 | Ninit Nis'367 => true
  | _ => false
  end.
Extract Inlined Constant state_set_242 => "assert false".

Definition state_set_243 (s:state) : bool :=
  match s with
  | Ninit Nis'367 => true
  | _ => false
  end.
Extract Inlined Constant state_set_243 => "assert false".

Definition state_set_244 (s:state) : bool :=
  match s with
  | Init Init'0 | Ninit Nis'367 | Ninit Nis'383 | Ninit Nis'385 | Ninit Nis'386 | Ninit Nis'424 | Ninit Nis'430 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_244 => "assert false".

Definition state_set_245 (s:state) : bool :=
  match s with
  | Ninit Nis'373 | Ninit Nis'384 => true
  | _ => false
  end.
Extract Inlined Constant state_set_245 => "assert false".

Definition state_set_246 (s:state) : bool :=
  match s with
  | Ninit Nis'375 => true
  | _ => false
  end.
Extract Inlined Constant state_set_246 => "assert false".

Definition state_set_247 (s:state) : bool :=
  match s with
  | Ninit Nis'377 => true
  | _ => false
  end.
Extract Inlined Constant state_set_247 => "assert false".

Definition state_set_248 (s:state) : bool :=
  match s with
  | Ninit Nis'377 | Ninit Nis'384 => true
  | _ => false
  end.
Extract Inlined Constant state_set_248 => "assert false".

Definition state_set_249 (s:state) : bool :=
  match s with
  | Ninit Nis'373 | Ninit Nis'377 | Ninit Nis'384 => true
  | _ => false
  end.
Extract Inlined Constant state_set_249 => "assert false".

Definition state_set_250 (s:state) : bool :=
  match s with
  | Ninit Nis'379 | Ninit Nis'618 => true
  | _ => false
  end.
Extract Inlined Constant state_set_250 => "assert false".

Definition state_set_251 (s:state) : bool :=
  match s with
  | Ninit Nis'380 => true
  | _ => false
  end.
Extract Inlined Constant state_set_251 => "assert false".

Definition state_set_252 (s:state) : bool :=
  match s with
  | Ninit Nis'373 => true
  | _ => false
  end.
Extract Inlined Constant state_set_252 => "assert false".

Definition state_set_253 (s:state) : bool :=
  match s with
  | Ninit Nis'383 | Ninit Nis'385 | Ninit Nis'386 | Ninit Nis'424 | Ninit Nis'430 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_253 => "assert false".

Definition state_set_254 (s:state) : bool :=
  match s with
  | Ninit Nis'383 => true
  | _ => false
  end.
Extract Inlined Constant state_set_254 => "assert false".

Definition state_set_255 (s:state) : bool :=
  match s with
  | Ninit Nis'385 | Ninit Nis'386 | Ninit Nis'390 | Ninit Nis'394 | Ninit Nis'401 | Ninit Nis'405 | Ninit Nis'409 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'419 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'441 | Ninit Nis'495 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'540 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 | Ninit Nis'618 => true
  | _ => false
  end.
Extract Inlined Constant state_set_255 => "assert false".

Definition state_set_256 (s:state) : bool :=
  match s with
  | Ninit Nis'386 | Ninit Nis'390 | Ninit Nis'394 | Ninit Nis'401 | Ninit Nis'428 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'441 | Ninit Nis'495 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_256 => "assert false".

Definition state_set_257 (s:state) : bool :=
  match s with
  | Ninit Nis'387 => true
  | _ => false
  end.
Extract Inlined Constant state_set_257 => "assert false".

Definition state_set_258 (s:state) : bool :=
  match s with
  | Ninit Nis'388 => true
  | _ => false
  end.
Extract Inlined Constant state_set_258 => "assert false".

Definition state_set_259 (s:state) : bool :=
  match s with
  | Ninit Nis'389 => true
  | _ => false
  end.
Extract Inlined Constant state_set_259 => "assert false".

Definition state_set_260 (s:state) : bool :=
  match s with
  | Ninit Nis'391 => true
  | _ => false
  end.
Extract Inlined Constant state_set_260 => "assert false".

Definition state_set_261 (s:state) : bool :=
  match s with
  | Ninit Nis'392 => true
  | _ => false
  end.
Extract Inlined Constant state_set_261 => "assert false".

Definition state_set_262 (s:state) : bool :=
  match s with
  | Ninit Nis'393 => true
  | _ => false
  end.
Extract Inlined Constant state_set_262 => "assert false".

Definition state_set_263 (s:state) : bool :=
  match s with
  | Ninit Nis'386 | Ninit Nis'390 | Ninit Nis'394 | Ninit Nis'401 | Ninit Nis'405 | Ninit Nis'409 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'419 | Ninit Nis'427 | Ninit Nis'428 | Ninit Nis'433 | Ninit Nis'434 | Ninit Nis'436 | Ninit Nis'441 | Ninit Nis'495 | Ninit Nis'499 | Ninit Nis'502 | Ninit Nis'507 | Ninit Nis'510 | Ninit Nis'514 | Ninit Nis'517 | Ninit Nis'521 | Ninit Nis'524 | Ninit Nis'528 | Ninit Nis'531 | Ninit Nis'540 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 | Ninit Nis'605 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_263 => "assert false".

Definition state_set_264 (s:state) : bool :=
  match s with
  | Ninit Nis'396 => true
  | _ => false
  end.
Extract Inlined Constant state_set_264 => "assert false".

Definition state_set_265 (s:state) : bool :=
  match s with
  | Ninit Nis'398 => true
  | _ => false
  end.
Extract Inlined Constant state_set_265 => "assert false".

Definition state_set_266 (s:state) : bool :=
  match s with
  | Ninit Nis'400 => true
  | _ => false
  end.
Extract Inlined Constant state_set_266 => "assert false".

Definition state_set_267 (s:state) : bool :=
  match s with
  | Ninit Nis'402 => true
  | _ => false
  end.
Extract Inlined Constant state_set_267 => "assert false".

Definition state_set_268 (s:state) : bool :=
  match s with
  | Ninit Nis'403 => true
  | _ => false
  end.
Extract Inlined Constant state_set_268 => "assert false".

Definition state_set_269 (s:state) : bool :=
  match s with
  | Ninit Nis'404 => true
  | _ => false
  end.
Extract Inlined Constant state_set_269 => "assert false".

Definition state_set_270 (s:state) : bool :=
  match s with
  | Ninit Nis'405 | Ninit Nis'409 | Ninit Nis'413 | Ninit Nis'415 | Ninit Nis'419 | Ninit Nis'427 | Ninit Nis'540 | Ninit Nis'543 | Ninit Nis'555 | Ninit Nis'559 | Ninit Nis'562 | Ninit Nis'567 | Ninit Nis'570 | Ninit Nis'574 | Ninit Nis'577 | Ninit Nis'581 | Ninit Nis'584 | Ninit Nis'588 | Ninit Nis'591 | Ninit Nis'594 => true
  | _ => false
  end.
Extract Inlined Constant state_set_270 => "assert false".

Definition state_set_271 (s:state) : bool :=
  match s with
  | Ninit Nis'406 => true
  | _ => false
  end.
Extract Inlined Constant state_set_271 => "assert false".

Definition state_set_272 (s:state) : bool :=
  match s with
  | Ninit Nis'407 => true
  | _ => false
  end.
Extract Inlined Constant state_set_272 => "assert false".

Definition state_set_273 (s:state) : bool :=
  match s with
  | Ninit Nis'408 => true
  | _ => false
  end.
Extract Inlined Constant state_set_273 => "assert false".

Definition state_set_274 (s:state) : bool :=
  match s with
  | Ninit Nis'410 => true
  | _ => false
  end.
Extract Inlined Constant state_set_274 => "assert false".

Definition state_set_275 (s:state) : bool :=
  match s with
  | Ninit Nis'411 => true
  | _ => false
  end.
Extract Inlined Constant state_set_275 => "assert false".

Definition state_set_276 (s:state) : bool :=
  match s with
  | Ninit Nis'412 => true
  | _ => false
  end.
Extract Inlined Constant state_set_276 => "assert false".

Definition state_set_277 (s:state) : bool :=
  match s with
  | Ninit Nis'414 => true
  | _ => false
  end.
Extract Inlined Constant state_set_277 => "assert false".

Definition state_set_278 (s:state) : bool :=
  match s with
  | Ninit Nis'416 => true
  | _ => false
  end.
Extract Inlined Constant state_set_278 => "assert false".

Definition state_set_279 (s:state) : bool :=
  match s with
  | Ninit Nis'417 => true
  | _ => false
  end.
Extract Inlined Constant state_set_279 => "assert false".

Definition state_set_280 (s:state) : bool :=
  match s with
  | Ninit Nis'418 => true
  | _ => false
  end.
Extract Inlined Constant state_set_280 => "assert false".

Definition state_set_281 (s:state) : bool :=
  match s with
  | Ninit Nis'420 => true
  | _ => false
  end.
Extract Inlined Constant state_set_281 => "assert false".

Definition state_set_282 (s:state) : bool :=
  match s with
  | Ninit Nis'421 => true
  | _ => false
  end.
Extract Inlined Constant state_set_282 => "assert false".

Definition state_set_283 (s:state) : bool :=
  match s with
  | Ninit Nis'423 => true
  | _ => false
  end.
Extract Inlined Constant state_set_283 => "assert false".

Definition state_set_284 (s:state) : bool :=
  match s with
  | Ninit Nis'424 => true
  | _ => false
  end.
Extract Inlined Constant state_set_284 => "assert false".

Definition state_set_285 (s:state) : bool :=
  match s with
  | Ninit Nis'425 => true
  | _ => false
  end.
Extract Inlined Constant state_set_285 => "assert false".

Definition state_set_286 (s:state) : bool :=
  match s with
  | Ninit Nis'426 => true
  | _ => false
  end.
Extract Inlined Constant state_set_286 => "assert false".

Definition state_set_287 (s:state) : bool :=
  match s with
  | Ninit Nis'429 => true
  | _ => false
  end.
Extract Inlined Constant state_set_287 => "assert false".

Definition state_set_288 (s:state) : bool :=
  match s with
  | Ninit Nis'430 => true
  | _ => false
  end.
Extract Inlined Constant state_set_288 => "assert false".

Definition state_set_289 (s:state) : bool :=
  match s with
  | Ninit Nis'431 => true
  | _ => false
  end.
Extract Inlined Constant state_set_289 => "assert false".

Definition state_set_290 (s:state) : bool :=
  match s with
  | Ninit Nis'432 => true
  | _ => false
  end.
Extract Inlined Constant state_set_290 => "assert false".

Definition state_set_291 (s:state) : bool :=
  match s with
  | Ninit Nis'435 => true
  | _ => false
  end.
Extract Inlined Constant state_set_291 => "assert false".

Definition state_set_292 (s:state) : bool :=
  match s with
  | Ninit Nis'437 => true
  | _ => false
  end.
Extract Inlined Constant state_set_292 => "assert false".

Definition state_set_293 (s:state) : bool :=
  match s with
  | Ninit Nis'439 => true
  | _ => false
  end.
Extract Inlined Constant state_set_293 => "assert false".

Definition state_set_294 (s:state) : bool :=
  match s with
  | Ninit Nis'440 => true
  | _ => false
  end.
Extract Inlined Constant state_set_294 => "assert false".

Definition state_set_295 (s:state) : bool :=
  match s with
  | Ninit Nis'442 => true
  | _ => false
  end.
Extract Inlined Constant state_set_295 => "assert false".

Definition state_set_296 (s:state) : bool :=
  match s with
  | Ninit Nis'444 | Ninit Nis'445 | Ninit Nis'446 => true
  | _ => false
  end.
Extract Inlined Constant state_set_296 => "assert false".

Definition state_set_297 (s:state) : bool :=
  match s with
  | Ninit Nis'446 => true
  | _ => false
  end.
Extract Inlined Constant state_set_297 => "assert false".

Definition state_set_298 (s:state) : bool :=
  match s with
  | Ninit Nis'445 => true
  | _ => false
  end.
Extract Inlined Constant state_set_298 => "assert false".

Definition state_set_299 (s:state) : bool :=
  match s with
  | Ninit Nis'444 => true
  | _ => false
  end.
Extract Inlined Constant state_set_299 => "assert false".

Definition state_set_300 (s:state) : bool :=
  match s with
  | Ninit Nis'449 => true
  | _ => false
  end.
Extract Inlined Constant state_set_300 => "assert false".

Definition state_set_301 (s:state) : bool :=
  match s with
  | Ninit Nis'450 => true
  | _ => false
  end.
Extract Inlined Constant state_set_301 => "assert false".

Definition state_set_302 (s:state) : bool :=
  match s with
  | Ninit Nis'451 => true
  | _ => false
  end.
Extract Inlined Constant state_set_302 => "assert false".

Definition state_set_303 (s:state) : bool :=
  match s with
  | Ninit Nis'452 | Ninit Nis'457 | Ninit Nis'465 => true
  | _ => false
  end.
Extract Inlined Constant state_set_303 => "assert false".

Definition state_set_304 (s:state) : bool :=
  match s with
  | Ninit Nis'453 => true
  | _ => false
  end.
Extract Inlined Constant state_set_304 => "assert false".

Definition state_set_305 (s:state) : bool :=
  match s with
  | Ninit Nis'454 => true
  | _ => false
  end.
Extract Inlined Constant state_set_305 => "assert false".

Definition state_set_306 (s:state) : bool :=
  match s with
  | Ninit Nis'452 | Ninit Nis'465 => true
  | _ => false
  end.
Extract Inlined Constant state_set_306 => "assert false".

Definition state_set_307 (s:state) : bool :=
  match s with
  | Ninit Nis'456 => true
  | _ => false
  end.
Extract Inlined Constant state_set_307 => "assert false".

Definition state_set_308 (s:state) : bool :=
  match s with
  | Ninit Nis'457 => true
  | _ => false
  end.
Extract Inlined Constant state_set_308 => "assert false".

Definition state_set_309 (s:state) : bool :=
  match s with
  | Ninit Nis'459 => true
  | _ => false
  end.
Extract Inlined Constant state_set_309 => "assert false".

Definition state_set_310 (s:state) : bool :=
  match s with
  | Ninit Nis'460 => true
  | _ => false
  end.
Extract Inlined Constant state_set_310 => "assert false".

Definition state_set_311 (s:state) : bool :=
  match s with
  | Ninit Nis'461 => true
  | _ => false
  end.
Extract Inlined Constant state_set_311 => "assert false".

Definition state_set_312 (s:state) : bool :=
  match s with
  | Ninit Nis'462 => true
  | _ => false
  end.
Extract Inlined Constant state_set_312 => "assert false".

Definition state_set_313 (s:state) : bool :=
  match s with
  | Ninit Nis'452 => true
  | _ => false
  end.
Extract Inlined Constant state_set_313 => "assert false".

Definition state_set_314 (s:state) : bool :=
  match s with
  | Ninit Nis'464 => true
  | _ => false
  end.
Extract Inlined Constant state_set_314 => "assert false".

Definition state_set_315 (s:state) : bool :=
  match s with
  | Ninit Nis'465 => true
  | _ => false
  end.
Extract Inlined Constant state_set_315 => "assert false".

Definition state_set_316 (s:state) : bool :=
  match s with
  | Ninit Nis'466 => true
  | _ => false
  end.
Extract Inlined Constant state_set_316 => "assert false".

Definition state_set_317 (s:state) : bool :=
  match s with
  | Ninit Nis'467 | Ninit Nis'469 => true
  | _ => false
  end.
Extract Inlined Constant state_set_317 => "assert false".

Definition state_set_318 (s:state) : bool :=
  match s with
  | Ninit Nis'468 => true
  | _ => false
  end.
Extract Inlined Constant state_set_318 => "assert false".

Definition state_set_319 (s:state) : bool :=
  match s with
  | Ninit Nis'469 => true
  | _ => false
  end.
Extract Inlined Constant state_set_319 => "assert false".

Definition state_set_320 (s:state) : bool :=
  match s with
  | Ninit Nis'467 => true
  | _ => false
  end.
Extract Inlined Constant state_set_320 => "assert false".

Definition state_set_321 (s:state) : bool :=
  match s with
  | Ninit Nis'473 => true
  | _ => false
  end.
Extract Inlined Constant state_set_321 => "assert false".

Definition state_set_322 (s:state) : bool :=
  match s with
  | Ninit Nis'474 => true
  | _ => false
  end.
Extract Inlined Constant state_set_322 => "assert false".

Definition state_set_323 (s:state) : bool :=
  match s with
  | Ninit Nis'439 | Ninit Nis'541 => true
  | _ => false
  end.
Extract Inlined Constant state_set_323 => "assert false".

Definition state_set_324 (s:state) : bool :=
  match s with
  | Ninit Nis'440 | Ninit Nis'542 => true
  | _ => false
  end.
Extract Inlined Constant state_set_324 => "assert false".

Definition state_set_325 (s:state) : bool :=
  match s with
  | Ninit Nis'441 | Ninit Nis'543 => true
  | _ => false
  end.
Extract Inlined Constant state_set_325 => "assert false".

Definition state_set_326 (s:state) : bool :=
  match s with
  | Ninit Nis'482 => true
  | _ => false
  end.
Extract Inlined Constant state_set_326 => "assert false".

Definition state_set_327 (s:state) : bool :=
  match s with
  | Ninit Nis'435 | Ninit Nis'539 => true
  | _ => false
  end.
Extract Inlined Constant state_set_327 => "assert false".

Definition state_set_328 (s:state) : bool :=
  match s with
  | Ninit Nis'436 | Ninit Nis'540 => true
  | _ => false
  end.
Extract Inlined Constant state_set_328 => "assert false".

Definition state_set_329 (s:state) : bool :=
  match s with
  | Ninit Nis'434 => true
  | _ => false
  end.
Extract Inlined Constant state_set_329 => "assert false".

Definition state_set_330 (s:state) : bool :=
  match s with
  | Ninit Nis'487 => true
  | _ => false
  end.
Extract Inlined Constant state_set_330 => "assert false".

Definition state_set_331 (s:state) : bool :=
  match s with
  | Ninit Nis'488 => true
  | _ => false
  end.
Extract Inlined Constant state_set_331 => "assert false".

Definition state_set_332 (s:state) : bool :=
  match s with
  | Ninit Nis'489 => true
  | _ => false
  end.
Extract Inlined Constant state_set_332 => "assert false".

Definition state_set_333 (s:state) : bool :=
  match s with
  | Ninit Nis'490 => true
  | _ => false
  end.
Extract Inlined Constant state_set_333 => "assert false".

Definition state_set_334 (s:state) : bool :=
  match s with
  | Ninit Nis'491 => true
  | _ => false
  end.
Extract Inlined Constant state_set_334 => "assert false".

Definition state_set_335 (s:state) : bool :=
  match s with
  | Ninit Nis'423 | Ninit Nis'429 => true
  | _ => false
  end.
Extract Inlined Constant state_set_335 => "assert false".

Definition state_set_336 (s:state) : bool :=
  match s with
  | Ninit Nis'424 | Ninit Nis'430 => true
  | _ => false
  end.
Extract Inlined Constant state_set_336 => "assert false".

Definition state_set_337 (s:state) : bool :=
  match s with
  | Ninit Nis'425 | Ninit Nis'431 => true
  | _ => false
  end.
Extract Inlined Constant state_set_337 => "assert false".

Definition state_set_338 (s:state) : bool :=
  match s with
  | Ninit Nis'426 | Ninit Nis'432 => true
  | _ => false
  end.
Extract Inlined Constant state_set_338 => "assert false".

Definition state_set_339 (s:state) : bool :=
  match s with
  | Ninit Nis'427 | Ninit Nis'433 => true
  | _ => false
  end.
Extract Inlined Constant state_set_339 => "assert false".

Definition state_set_340 (s:state) : bool :=
  match s with
  | Ninit Nis'494 => true
  | _ => false
  end.
Extract Inlined Constant state_set_340 => "assert false".

Definition state_set_341 (s:state) : bool :=
  match s with
  | Ninit Nis'494 | Ninit Nis'554 => true
  | _ => false
  end.
Extract Inlined Constant state_set_341 => "assert false".

Definition state_set_342 (s:state) : bool :=
  match s with
  | Ninit Nis'495 | Ninit Nis'555 => true
  | _ => false
  end.
Extract Inlined Constant state_set_342 => "assert false".

Definition state_set_343 (s:state) : bool :=
  match s with
  | Ninit Nis'497 => true
  | _ => false
  end.
Extract Inlined Constant state_set_343 => "assert false".

Definition state_set_344 (s:state) : bool :=
  match s with
  | Ninit Nis'498 => true
  | _ => false
  end.
Extract Inlined Constant state_set_344 => "assert false".

Definition state_set_345 (s:state) : bool :=
  match s with
  | Ninit Nis'497 | Ninit Nis'557 => true
  | _ => false
  end.
Extract Inlined Constant state_set_345 => "assert false".

Definition state_set_346 (s:state) : bool :=
  match s with
  | Ninit Nis'498 | Ninit Nis'558 => true
  | _ => false
  end.
Extract Inlined Constant state_set_346 => "assert false".

Definition state_set_347 (s:state) : bool :=
  match s with
  | Ninit Nis'499 | Ninit Nis'559 => true
  | _ => false
  end.
Extract Inlined Constant state_set_347 => "assert false".

Definition state_set_348 (s:state) : bool :=
  match s with
  | Ninit Nis'501 => true
  | _ => false
  end.
Extract Inlined Constant state_set_348 => "assert false".

Definition state_set_349 (s:state) : bool :=
  match s with
  | Ninit Nis'501 | Ninit Nis'561 => true
  | _ => false
  end.
Extract Inlined Constant state_set_349 => "assert false".

Definition state_set_350 (s:state) : bool :=
  match s with
  | Ninit Nis'502 | Ninit Nis'562 => true
  | _ => false
  end.
Extract Inlined Constant state_set_350 => "assert false".

Definition state_set_351 (s:state) : bool :=
  match s with
  | Ninit Nis'504 => true
  | _ => false
  end.
Extract Inlined Constant state_set_351 => "assert false".

Definition state_set_352 (s:state) : bool :=
  match s with
  | Ninit Nis'505 => true
  | _ => false
  end.
Extract Inlined Constant state_set_352 => "assert false".

Definition state_set_353 (s:state) : bool :=
  match s with
  | Ninit Nis'506 => true
  | _ => false
  end.
Extract Inlined Constant state_set_353 => "assert false".

Definition state_set_354 (s:state) : bool :=
  match s with
  | Ninit Nis'504 | Ninit Nis'564 => true
  | _ => false
  end.
Extract Inlined Constant state_set_354 => "assert false".

Definition state_set_355 (s:state) : bool :=
  match s with
  | Ninit Nis'505 | Ninit Nis'565 => true
  | _ => false
  end.
Extract Inlined Constant state_set_355 => "assert false".

Definition state_set_356 (s:state) : bool :=
  match s with
  | Ninit Nis'506 | Ninit Nis'566 => true
  | _ => false
  end.
Extract Inlined Constant state_set_356 => "assert false".

Definition state_set_357 (s:state) : bool :=
  match s with
  | Ninit Nis'507 | Ninit Nis'567 => true
  | _ => false
  end.
Extract Inlined Constant state_set_357 => "assert false".

Definition state_set_358 (s:state) : bool :=
  match s with
  | Ninit Nis'509 => true
  | _ => false
  end.
Extract Inlined Constant state_set_358 => "assert false".

Definition state_set_359 (s:state) : bool :=
  match s with
  | Ninit Nis'509 | Ninit Nis'569 => true
  | _ => false
  end.
Extract Inlined Constant state_set_359 => "assert false".

Definition state_set_360 (s:state) : bool :=
  match s with
  | Ninit Nis'510 | Ninit Nis'570 => true
  | _ => false
  end.
Extract Inlined Constant state_set_360 => "assert false".

Definition state_set_361 (s:state) : bool :=
  match s with
  | Ninit Nis'512 => true
  | _ => false
  end.
Extract Inlined Constant state_set_361 => "assert false".

Definition state_set_362 (s:state) : bool :=
  match s with
  | Ninit Nis'513 => true
  | _ => false
  end.
Extract Inlined Constant state_set_362 => "assert false".

Definition state_set_363 (s:state) : bool :=
  match s with
  | Ninit Nis'512 | Ninit Nis'572 => true
  | _ => false
  end.
Extract Inlined Constant state_set_363 => "assert false".

Definition state_set_364 (s:state) : bool :=
  match s with
  | Ninit Nis'513 | Ninit Nis'573 => true
  | _ => false
  end.
Extract Inlined Constant state_set_364 => "assert false".

Definition state_set_365 (s:state) : bool :=
  match s with
  | Ninit Nis'514 | Ninit Nis'574 => true
  | _ => false
  end.
Extract Inlined Constant state_set_365 => "assert false".

Definition state_set_366 (s:state) : bool :=
  match s with
  | Ninit Nis'516 => true
  | _ => false
  end.
Extract Inlined Constant state_set_366 => "assert false".

Definition state_set_367 (s:state) : bool :=
  match s with
  | Ninit Nis'516 | Ninit Nis'576 => true
  | _ => false
  end.
Extract Inlined Constant state_set_367 => "assert false".

Definition state_set_368 (s:state) : bool :=
  match s with
  | Ninit Nis'517 | Ninit Nis'577 => true
  | _ => false
  end.
Extract Inlined Constant state_set_368 => "assert false".

Definition state_set_369 (s:state) : bool :=
  match s with
  | Ninit Nis'519 => true
  | _ => false
  end.
Extract Inlined Constant state_set_369 => "assert false".

Definition state_set_370 (s:state) : bool :=
  match s with
  | Ninit Nis'520 => true
  | _ => false
  end.
Extract Inlined Constant state_set_370 => "assert false".

Definition state_set_371 (s:state) : bool :=
  match s with
  | Ninit Nis'519 | Ninit Nis'579 => true
  | _ => false
  end.
Extract Inlined Constant state_set_371 => "assert false".

Definition state_set_372 (s:state) : bool :=
  match s with
  | Ninit Nis'520 | Ninit Nis'580 => true
  | _ => false
  end.
Extract Inlined Constant state_set_372 => "assert false".

Definition state_set_373 (s:state) : bool :=
  match s with
  | Ninit Nis'521 | Ninit Nis'581 => true
  | _ => false
  end.
Extract Inlined Constant state_set_373 => "assert false".

Definition state_set_374 (s:state) : bool :=
  match s with
  | Ninit Nis'523 => true
  | _ => false
  end.
Extract Inlined Constant state_set_374 => "assert false".

Definition state_set_375 (s:state) : bool :=
  match s with
  | Ninit Nis'523 | Ninit Nis'583 => true
  | _ => false
  end.
Extract Inlined Constant state_set_375 => "assert false".

Definition state_set_376 (s:state) : bool :=
  match s with
  | Ninit Nis'524 | Ninit Nis'584 => true
  | _ => false
  end.
Extract Inlined Constant state_set_376 => "assert false".

Definition state_set_377 (s:state) : bool :=
  match s with
  | Ninit Nis'526 => true
  | _ => false
  end.
Extract Inlined Constant state_set_377 => "assert false".

Definition state_set_378 (s:state) : bool :=
  match s with
  | Ninit Nis'527 => true
  | _ => false
  end.
Extract Inlined Constant state_set_378 => "assert false".

Definition state_set_379 (s:state) : bool :=
  match s with
  | Ninit Nis'526 | Ninit Nis'586 => true
  | _ => false
  end.
Extract Inlined Constant state_set_379 => "assert false".

Definition state_set_380 (s:state) : bool :=
  match s with
  | Ninit Nis'527 | Ninit Nis'587 => true
  | _ => false
  end.
Extract Inlined Constant state_set_380 => "assert false".

Definition state_set_381 (s:state) : bool :=
  match s with
  | Ninit Nis'528 | Ninit Nis'588 => true
  | _ => false
  end.
Extract Inlined Constant state_set_381 => "assert false".

Definition state_set_382 (s:state) : bool :=
  match s with
  | Ninit Nis'530 => true
  | _ => false
  end.
Extract Inlined Constant state_set_382 => "assert false".

Definition state_set_383 (s:state) : bool :=
  match s with
  | Ninit Nis'530 | Ninit Nis'590 => true
  | _ => false
  end.
Extract Inlined Constant state_set_383 => "assert false".

Definition state_set_384 (s:state) : bool :=
  match s with
  | Ninit Nis'531 | Ninit Nis'591 => true
  | _ => false
  end.
Extract Inlined Constant state_set_384 => "assert false".

Definition state_set_385 (s:state) : bool :=
  match s with
  | Ninit Nis'428 => true
  | _ => false
  end.
Extract Inlined Constant state_set_385 => "assert false".

Definition state_set_386 (s:state) : bool :=
  match s with
  | Ninit Nis'533 => true
  | _ => false
  end.
Extract Inlined Constant state_set_386 => "assert false".

Definition state_set_387 (s:state) : bool :=
  match s with
  | Ninit Nis'534 => true
  | _ => false
  end.
Extract Inlined Constant state_set_387 => "assert false".

Definition state_set_388 (s:state) : bool :=
  match s with
  | Ninit Nis'535 => true
  | _ => false
  end.
Extract Inlined Constant state_set_388 => "assert false".

Definition state_set_389 (s:state) : bool :=
  match s with
  | Ninit Nis'536 => true
  | _ => false
  end.
Extract Inlined Constant state_set_389 => "assert false".

Definition state_set_390 (s:state) : bool :=
  match s with
  | Ninit Nis'537 => true
  | _ => false
  end.
Extract Inlined Constant state_set_390 => "assert false".

Definition state_set_391 (s:state) : bool :=
  match s with
  | Ninit Nis'539 => true
  | _ => false
  end.
Extract Inlined Constant state_set_391 => "assert false".

Definition state_set_392 (s:state) : bool :=
  match s with
  | Ninit Nis'541 => true
  | _ => false
  end.
Extract Inlined Constant state_set_392 => "assert false".

Definition state_set_393 (s:state) : bool :=
  match s with
  | Ninit Nis'542 => true
  | _ => false
  end.
Extract Inlined Constant state_set_393 => "assert false".

Definition state_set_394 (s:state) : bool :=
  match s with
  | Ninit Nis'543 => true
  | _ => false
  end.
Extract Inlined Constant state_set_394 => "assert false".

Definition state_set_395 (s:state) : bool :=
  match s with
  | Ninit Nis'540 => true
  | _ => false
  end.
Extract Inlined Constant state_set_395 => "assert false".

Definition state_set_396 (s:state) : bool :=
  match s with
  | Ninit Nis'427 => true
  | _ => false
  end.
Extract Inlined Constant state_set_396 => "assert false".

Definition state_set_397 (s:state) : bool :=
  match s with
  | Ninit Nis'554 => true
  | _ => false
  end.
Extract Inlined Constant state_set_397 => "assert false".

Definition state_set_398 (s:state) : bool :=
  match s with
  | Ninit Nis'555 => true
  | _ => false
  end.
Extract Inlined Constant state_set_398 => "assert false".

Definition state_set_399 (s:state) : bool :=
  match s with
  | Ninit Nis'557 => true
  | _ => false
  end.
Extract Inlined Constant state_set_399 => "assert false".

Definition state_set_400 (s:state) : bool :=
  match s with
  | Ninit Nis'558 => true
  | _ => false
  end.
Extract Inlined Constant state_set_400 => "assert false".

Definition state_set_401 (s:state) : bool :=
  match s with
  | Ninit Nis'559 => true
  | _ => false
  end.
Extract Inlined Constant state_set_401 => "assert false".

Definition state_set_402 (s:state) : bool :=
  match s with
  | Ninit Nis'561 => true
  | _ => false
  end.
Extract Inlined Constant state_set_402 => "assert false".

Definition state_set_403 (s:state) : bool :=
  match s with
  | Ninit Nis'562 => true
  | _ => false
  end.
Extract Inlined Constant state_set_403 => "assert false".

Definition state_set_404 (s:state) : bool :=
  match s with
  | Ninit Nis'564 => true
  | _ => false
  end.
Extract Inlined Constant state_set_404 => "assert false".

Definition state_set_405 (s:state) : bool :=
  match s with
  | Ninit Nis'565 => true
  | _ => false
  end.
Extract Inlined Constant state_set_405 => "assert false".

Definition state_set_406 (s:state) : bool :=
  match s with
  | Ninit Nis'566 => true
  | _ => false
  end.
Extract Inlined Constant state_set_406 => "assert false".

Definition state_set_407 (s:state) : bool :=
  match s with
  | Ninit Nis'567 => true
  | _ => false
  end.
Extract Inlined Constant state_set_407 => "assert false".

Definition state_set_408 (s:state) : bool :=
  match s with
  | Ninit Nis'569 => true
  | _ => false
  end.
Extract Inlined Constant state_set_408 => "assert false".

Definition state_set_409 (s:state) : bool :=
  match s with
  | Ninit Nis'570 => true
  | _ => false
  end.
Extract Inlined Constant state_set_409 => "assert false".

Definition state_set_410 (s:state) : bool :=
  match s with
  | Ninit Nis'572 => true
  | _ => false
  end.
Extract Inlined Constant state_set_410 => "assert false".

Definition state_set_411 (s:state) : bool :=
  match s with
  | Ninit Nis'573 => true
  | _ => false
  end.
Extract Inlined Constant state_set_411 => "assert false".

Definition state_set_412 (s:state) : bool :=
  match s with
  | Ninit Nis'574 => true
  | _ => false
  end.
Extract Inlined Constant state_set_412 => "assert false".

Definition state_set_413 (s:state) : bool :=
  match s with
  | Ninit Nis'576 => true
  | _ => false
  end.
Extract Inlined Constant state_set_413 => "assert false".

Definition state_set_414 (s:state) : bool :=
  match s with
  | Ninit Nis'577 => true
  | _ => false
  end.
Extract Inlined Constant state_set_414 => "assert false".

Definition state_set_415 (s:state) : bool :=
  match s with
  | Ninit Nis'579 => true
  | _ => false
  end.
Extract Inlined Constant state_set_415 => "assert false".

Definition state_set_416 (s:state) : bool :=
  match s with
  | Ninit Nis'580 => true
  | _ => false
  end.
Extract Inlined Constant state_set_416 => "assert false".

Definition state_set_417 (s:state) : bool :=
  match s with
  | Ninit Nis'581 => true
  | _ => false
  end.
Extract Inlined Constant state_set_417 => "assert false".

Definition state_set_418 (s:state) : bool :=
  match s with
  | Ninit Nis'583 => true
  | _ => false
  end.
Extract Inlined Constant state_set_418 => "assert false".

Definition state_set_419 (s:state) : bool :=
  match s with
  | Ninit Nis'584 => true
  | _ => false
  end.
Extract Inlined Constant state_set_419 => "assert false".

Definition state_set_420 (s:state) : bool :=
  match s with
  | Ninit Nis'586 => true
  | _ => false
  end.
Extract Inlined Constant state_set_420 => "assert false".

Definition state_set_421 (s:state) : bool :=
  match s with
  | Ninit Nis'587 => true
  | _ => false
  end.
Extract Inlined Constant state_set_421 => "assert false".

Definition state_set_422 (s:state) : bool :=
  match s with
  | Ninit Nis'588 => true
  | _ => false
  end.
Extract Inlined Constant state_set_422 => "assert false".

Definition state_set_423 (s:state) : bool :=
  match s with
  | Ninit Nis'590 => true
  | _ => false
  end.
Extract Inlined Constant state_set_423 => "assert false".

Definition state_set_424 (s:state) : bool :=
  match s with
  | Ninit Nis'591 => true
  | _ => false
  end.
Extract Inlined Constant state_set_424 => "assert false".

Definition state_set_425 (s:state) : bool :=
  match s with
  | Ninit Nis'419 => true
  | _ => false
  end.
Extract Inlined Constant state_set_425 => "assert false".

Definition state_set_426 (s:state) : bool :=
  match s with
  | Ninit Nis'593 => true
  | _ => false
  end.
Extract Inlined Constant state_set_426 => "assert false".

Definition state_set_427 (s:state) : bool :=
  match s with
  | Ninit Nis'594 => true
  | _ => false
  end.
Extract Inlined Constant state_set_427 => "assert false".

Definition state_set_428 (s:state) : bool :=
  match s with
  | Ninit Nis'402 | Ninit Nis'416 => true
  | _ => false
  end.
Extract Inlined Constant state_set_428 => "assert false".

Definition state_set_429 (s:state) : bool :=
  match s with
  | Ninit Nis'403 | Ninit Nis'417 => true
  | _ => false
  end.
Extract Inlined Constant state_set_429 => "assert false".

Definition state_set_430 (s:state) : bool :=
  match s with
  | Ninit Nis'404 | Ninit Nis'418 => true
  | _ => false
  end.
Extract Inlined Constant state_set_430 => "assert false".

Definition state_set_431 (s:state) : bool :=
  match s with
  | Ninit Nis'405 | Ninit Nis'419 => true
  | _ => false
  end.
Extract Inlined Constant state_set_431 => "assert false".

Definition state_set_432 (s:state) : bool :=
  match s with
  | Ninit Nis'593 | Ninit Nis'604 => true
  | _ => false
  end.
Extract Inlined Constant state_set_432 => "assert false".

Definition state_set_433 (s:state) : bool :=
  match s with
  | Ninit Nis'594 | Ninit Nis'605 => true
  | _ => false
  end.
Extract Inlined Constant state_set_433 => "assert false".

Definition state_set_434 (s:state) : bool :=
  match s with
  | Ninit Nis'415 => true
  | _ => false
  end.
Extract Inlined Constant state_set_434 => "assert false".

Definition state_set_435 (s:state) : bool :=
  match s with
  | Ninit Nis'400 | Ninit Nis'414 => true
  | _ => false
  end.
Extract Inlined Constant state_set_435 => "assert false".

Definition state_set_436 (s:state) : bool :=
  match s with
  | Ninit Nis'401 | Ninit Nis'415 => true
  | _ => false
  end.
Extract Inlined Constant state_set_436 => "assert false".

Definition state_set_437 (s:state) : bool :=
  match s with
  | Ninit Nis'413 => true
  | _ => false
  end.
Extract Inlined Constant state_set_437 => "assert false".

Definition state_set_438 (s:state) : bool :=
  match s with
  | Ninit Nis'391 | Ninit Nis'410 => true
  | _ => false
  end.
Extract Inlined Constant state_set_438 => "assert false".

Definition state_set_439 (s:state) : bool :=
  match s with
  | Ninit Nis'392 | Ninit Nis'411 => true
  | _ => false
  end.
Extract Inlined Constant state_set_439 => "assert false".

Definition state_set_440 (s:state) : bool :=
  match s with
  | Ninit Nis'393 | Ninit Nis'412 => true
  | _ => false
  end.
Extract Inlined Constant state_set_440 => "assert false".

Definition state_set_441 (s:state) : bool :=
  match s with
  | Ninit Nis'394 | Ninit Nis'413 => true
  | _ => false
  end.
Extract Inlined Constant state_set_441 => "assert false".

Definition state_set_442 (s:state) : bool :=
  match s with
  | Ninit Nis'409 => true
  | _ => false
  end.
Extract Inlined Constant state_set_442 => "assert false".

Definition state_set_443 (s:state) : bool :=
  match s with
  | Ninit Nis'387 | Ninit Nis'406 => true
  | _ => false
  end.
Extract Inlined Constant state_set_443 => "assert false".

Definition state_set_444 (s:state) : bool :=
  match s with
  | Ninit Nis'388 | Ninit Nis'407 => true
  | _ => false
  end.
Extract Inlined Constant state_set_444 => "assert false".

Definition state_set_445 (s:state) : bool :=
  match s with
  | Ninit Nis'389 | Ninit Nis'408 => true
  | _ => false
  end.
Extract Inlined Constant state_set_445 => "assert false".

Definition state_set_446 (s:state) : bool :=
  match s with
  | Ninit Nis'390 | Ninit Nis'409 => true
  | _ => false
  end.
Extract Inlined Constant state_set_446 => "assert false".

Definition state_set_447 (s:state) : bool :=
  match s with
  | Ninit Nis'405 => true
  | _ => false
  end.
Extract Inlined Constant state_set_447 => "assert false".

Definition state_set_448 (s:state) : bool :=
  match s with
  | Ninit Nis'604 => true
  | _ => false
  end.
Extract Inlined Constant state_set_448 => "assert false".

Definition state_set_449 (s:state) : bool :=
  match s with
  | Ninit Nis'386 => true
  | _ => false
  end.
Extract Inlined Constant state_set_449 => "assert false".

Definition state_set_450 (s:state) : bool :=
  match s with
  | Ninit Nis'386 | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_450 => "assert false".

Definition state_set_451 (s:state) : bool :=
  match s with
  | Ninit Nis'610 => true
  | _ => false
  end.
Extract Inlined Constant state_set_451 => "assert false".

Definition state_set_452 (s:state) : bool :=
  match s with
  | Ninit Nis'385 => true
  | _ => false
  end.
Extract Inlined Constant state_set_452 => "assert false".

Definition state_set_453 (s:state) : bool :=
  match s with
  | Ninit Nis'383 | Ninit Nis'617 => true
  | _ => false
  end.
Extract Inlined Constant state_set_453 => "assert false".

Definition state_set_454 (s:state) : bool :=
  match s with
  | Ninit Nis'618 => true
  | _ => false
  end.
Extract Inlined Constant state_set_454 => "assert false".

Definition past_state_of_non_init_state (s:noninitstate) : list (state -> bool) :=
  match s with
  | Nis'1 => [ state_set_1 ]%list
  | Nis'2 => [ state_set_2 ]%list
  | Nis'3 => [ state_set_2 ]%list
  | Nis'4 => [ state_set_2 ]%list
  | Nis'5 => [ state_set_2 ]%list
  | Nis'6 => [ state_set_2 ]%list
  | Nis'7 => [ state_set_3 ]%list
  | Nis'8 => [ state_set_2 ]%list
  | Nis'9 => [ state_set_4 ]%list
  | Nis'10 => [ state_set_5; state_set_4 ]%list
  | Nis'11 => [ state_set_6 ]%list
  | Nis'12 => [ state_set_6 ]%list
  | Nis'13 => [ state_set_6 ]%list
  | Nis'14 => [ state_set_6 ]%list
  | Nis'15 => [ state_set_6 ]%list
  | Nis'16 => [ state_set_6 ]%list
  | Nis'17 => [ state_set_6 ]%list
  | Nis'18 => [ state_set_7; state_set_6 ]%list
  | Nis'19 => [ state_set_2 ]%list
  | Nis'20 => [ state_set_2 ]%list
  | Nis'21 => [ state_set_1 ]%list
  | Nis'22 => [ state_set_8 ]%list
  | Nis'23 => [ state_set_9; state_set_8 ]%list
  | Nis'24 => [ state_set_10 ]%list
  | Nis'25 => [ state_set_2 ]%list
  | Nis'26 => [ state_set_2 ]%list
  | Nis'27 => [ state_set_6 ]%list
  | Nis'28 => [ state_set_11 ]%list
  | Nis'29 => [ state_set_2 ]%list
  | Nis'30 => [ state_set_2 ]%list
  | Nis'31 => [ state_set_8 ]%list
  | Nis'32 => [ state_set_12; state_set_8 ]%list
  | Nis'33 => [ state_set_13; state_set_12; state_set_8 ]%list
  | Nis'34 => [ state_set_14 ]%list
  | Nis'35 => [ state_set_14 ]%list
  | Nis'36 => [ state_set_14 ]%list
  | Nis'37 => [ state_set_14 ]%list
  | Nis'38 => [ state_set_15; state_set_14 ]%list
  | Nis'39 => [ state_set_16; state_set_15; state_set_14 ]%list
  | Nis'40 => [ state_set_6 ]%list
  | Nis'41 => [ state_set_6 ]%list
  | Nis'42 => [ state_set_6 ]%list
  | Nis'43 => [ state_set_17; state_set_6 ]%list
  | Nis'44 => [ state_set_6 ]%list
  | Nis'45 => [ state_set_18; state_set_6 ]%list
  | Nis'46 => [ state_set_2 ]%list
  | Nis'47 => [ state_set_1 ]%list
  | Nis'48 => [ state_set_2 ]%list
  | Nis'49 => [ state_set_8 ]%list
  | Nis'50 => [ state_set_19; state_set_8 ]%list
  | Nis'51 => [ state_set_6 ]%list
  | Nis'52 => [ state_set_6 ]%list
  | Nis'53 => [ state_set_6 ]%list
  | Nis'54 => [ state_set_20; state_set_6 ]%list
  | Nis'55 => [ state_set_21 ]%list
  | Nis'56 => [ state_set_22 ]%list
  | Nis'57 => [ state_set_21 ]%list
  | Nis'58 => [ state_set_2 ]%list
  | Nis'59 => [ state_set_2 ]%list
  | Nis'60 => [ state_set_23; state_set_2 ]%list
  | Nis'61 => [ state_set_24; state_set_23; state_set_2 ]%list
  | Nis'62 => [ state_set_25; state_set_24; state_set_23; state_set_2 ]%list
  | Nis'63 => [ state_set_26; state_set_25; state_set_24; state_set_23; state_set_2 ]%list
  | Nis'64 => [ state_set_27; state_set_26; state_set_25; state_set_24; state_set_23; state_set_2 ]%list
  | Nis'65 => [ state_set_29; state_set_28 ]%list
  | Nis'66 => [ state_set_29 ]%list
  | Nis'67 => [ state_set_29 ]%list
  | Nis'68 => [ state_set_30 ]%list
  | Nis'69 => [ state_set_31 ]%list
  | Nis'70 => [ state_set_32; state_set_31 ]%list
  | Nis'71 => [ state_set_34; state_set_33 ]%list
  | Nis'72 => [ state_set_35; state_set_32; state_set_31 ]%list
  | Nis'73 => [ state_set_22 ]%list
  | Nis'74 => [ state_set_33 ]%list
  | Nis'75 => [ state_set_32; state_set_31 ]%list
  | Nis'76 => [ state_set_36; state_set_29 ]%list
  | Nis'77 => [ state_set_37 ]%list
  | Nis'78 => [ state_set_38 ]%list
  | Nis'79 => [ state_set_40; state_set_39 ]%list
  | Nis'80 => [ state_set_41; state_set_30 ]%list
  | Nis'81 => [ state_set_42 ]%list
  | Nis'82 => [ state_set_3 ]%list
  | Nis'83 => [ state_set_42; state_set_41; state_set_30 ]%list
  | Nis'84 => [ state_set_3 ]%list
  | Nis'85 => [ state_set_3 ]%list
  | Nis'86 => [ state_set_3 ]%list
  | Nis'87 => [ state_set_3 ]%list
  | Nis'88 => [ state_set_3 ]%list
  | Nis'89 => [ state_set_43 ]%list
  | Nis'90 => [ state_set_44 ]%list
  | Nis'91 => [ state_set_44 ]%list
  | Nis'92 => [ state_set_44 ]%list
  | Nis'93 => [ state_set_44 ]%list
  | Nis'94 => [ state_set_2 ]%list
  | Nis'95 => [ state_set_45; state_set_44 ]%list
  | Nis'96 => [ state_set_46; state_set_44 ]%list
  | Nis'97 => [ state_set_47; state_set_44 ]%list
  | Nis'98 => [ state_set_48; state_set_44 ]%list
  | Nis'99 => [ state_set_49; state_set_43 ]%list
  | Nis'100 => [ state_set_43 ]%list
  | Nis'101 => [ state_set_43 ]%list
  | Nis'102 => [ state_set_43 ]%list
  | Nis'103 => [ state_set_50; state_set_43 ]%list
  | Nis'104 => [ state_set_51 ]%list
  | Nis'105 => [ state_set_52; state_set_43 ]%list
  | Nis'106 => [ state_set_53; state_set_43 ]%list
  | Nis'107 => [ state_set_54; state_set_43 ]%list
  | Nis'108 => [ state_set_42; state_set_41; state_set_30 ]%list
  | Nis'109 => [ state_set_55; state_set_42; state_set_41; state_set_30 ]%list
  | Nis'110 => [ state_set_56 ]%list
  | Nis'111 => [ state_set_57; state_set_56 ]%list
  | Nis'112 => [ state_set_58; state_set_57; state_set_56 ]%list
  | Nis'113 => [ state_set_58; state_set_57; state_set_56 ]%list
  | Nis'114 => [ state_set_59 ]%list
  | Nis'115 => [ state_set_60 ]%list
  | Nis'116 => [ state_set_62; state_set_61 ]%list
  | Nis'117 => [ state_set_61 ]%list
  | Nis'118 => [ state_set_63; state_set_61 ]%list
  | Nis'119 => [ state_set_6 ]%list
  | Nis'120 => [ state_set_64 ]%list
  | Nis'121 => [ state_set_6 ]%list
  | Nis'122 => [ state_set_6 ]%list
  | Nis'123 => [ state_set_65; state_set_6 ]%list
  | Nis'124 => [ state_set_66; state_set_65; state_set_6 ]%list
  | Nis'125 => [ state_set_65; state_set_6 ]%list
  | Nis'126 => [ state_set_67; state_set_65; state_set_6 ]%list
  | Nis'127 => [ state_set_68 ]%list
  | Nis'128 => [ state_set_69 ]%list
  | Nis'129 => [ state_set_69 ]%list
  | Nis'130 => [ state_set_69 ]%list
  | Nis'131 => [ state_set_69 ]%list
  | Nis'132 => [ state_set_69 ]%list
  | Nis'133 => [ state_set_69 ]%list
  | Nis'134 => [ state_set_69 ]%list
  | Nis'135 => [ state_set_69 ]%list
  | Nis'136 => [ state_set_69 ]%list
  | Nis'137 => [ state_set_69 ]%list
  | Nis'138 => [ state_set_69 ]%list
  | Nis'139 => [ state_set_69; state_set_68 ]%list
  | Nis'140 => [ state_set_70 ]%list
  | Nis'141 => [ state_set_72; state_set_71 ]%list
  | Nis'142 => [ state_set_73 ]%list
  | Nis'143 => [ state_set_75; state_set_74 ]%list
  | Nis'144 => [ state_set_76; state_set_75; state_set_74 ]%list
  | Nis'145 => [ state_set_75; state_set_74 ]%list
  | Nis'146 => [ state_set_77; state_set_75; state_set_74 ]%list
  | Nis'147 => [ state_set_75; state_set_74 ]%list
  | Nis'148 => [ state_set_78; state_set_75; state_set_74 ]%list
  | Nis'149 => [ state_set_74 ]%list
  | Nis'150 => [ state_set_79; state_set_72; state_set_71 ]%list
  | Nis'151 => [ state_set_80; state_set_73 ]%list
  | Nis'152 => [ state_set_81; state_set_80; state_set_73 ]%list
  | Nis'153 => [ state_set_80; state_set_73 ]%list
  | Nis'154 => [ state_set_82; state_set_80; state_set_73 ]%list
  | Nis'155 => [ state_set_72; state_set_71 ]%list
  | Nis'156 => [ state_set_83; state_set_72; state_set_71 ]%list
  | Nis'157 => [ state_set_84 ]%list
  | Nis'158 => [ state_set_85; state_set_70 ]%list
  | Nis'159 => [ state_set_86; state_set_85; state_set_70 ]%list
  | Nis'160 => [ state_set_71 ]%list
  | Nis'161 => [ state_set_85; state_set_70 ]%list
  | Nis'162 => [ state_set_87; state_set_85; state_set_70 ]%list
  | Nis'163 => [ state_set_85; state_set_70 ]%list
  | Nis'164 => [ state_set_88; state_set_85; state_set_70 ]%list
  | Nis'165 => [ state_set_85; state_set_70 ]%list
  | Nis'166 => [ state_set_89; state_set_85; state_set_70 ]%list
  | Nis'167 => [ state_set_90 ]%list
  | Nis'168 => [ state_set_91; state_set_90 ]%list
  | Nis'169 => [ state_set_90 ]%list
  | Nis'170 => [ state_set_93; state_set_92 ]%list
  | Nis'171 => [ state_set_94; state_set_93; state_set_92 ]%list
  | Nis'172 => [ state_set_96; state_set_95 ]%list
  | Nis'173 => [ state_set_97; state_set_96; state_set_95 ]%list
  | Nis'174 => [ state_set_99; state_set_98 ]%list
  | Nis'175 => [ state_set_100 ]%list
  | Nis'176 => [ state_set_101; state_set_84 ]%list
  | Nis'177 => [ state_set_102; state_set_101; state_set_84 ]%list
  | Nis'178 => [ state_set_101; state_set_84 ]%list
  | Nis'179 => [ state_set_103; state_set_101; state_set_84 ]%list
  | Nis'180 => [ state_set_104; state_set_99; state_set_98 ]%list
  | Nis'181 => [ state_set_105; state_set_100 ]%list
  | Nis'182 => [ state_set_106; state_set_105; state_set_100 ]%list
  | Nis'183 => [ state_set_98 ]%list
  | Nis'184 => [ state_set_95 ]%list
  | Nis'185 => [ state_set_92 ]%list
  | Nis'186 => [ state_set_107; state_set_91; state_set_90 ]%list
  | Nis'187 => [ state_set_109; state_set_108 ]%list
  | Nis'188 => [ state_set_68 ]%list
  | Nis'189 => [ state_set_110; state_set_109; state_set_108 ]%list
  | Nis'190 => [ state_set_111; state_set_107; state_set_91; state_set_90 ]%list
  | Nis'191 => [ state_set_112; state_set_111; state_set_107; state_set_91; state_set_90 ]%list
  | Nis'192 => [ state_set_108 ]%list
  | Nis'193 => [ state_set_91; state_set_90 ]%list
  | Nis'194 => [ state_set_113; state_set_91; state_set_90 ]%list
  | Nis'195 => [ state_set_114; state_set_69; state_set_68 ]%list
  | Nis'196 => [ state_set_115 ]%list
  | Nis'197 => [ state_set_67; state_set_65; state_set_6 ]%list
  | Nis'198 => [ state_set_116; state_set_67; state_set_65; state_set_6 ]%list
  | Nis'199 => [ state_set_117; state_set_115 ]%list
  | Nis'200 => [ state_set_118; state_set_117; state_set_115 ]%list
  | Nis'201 => [ state_set_65; state_set_6 ]%list
  | Nis'202 => [ state_set_119; state_set_65; state_set_6 ]%list
  | Nis'203 => [ state_set_120; state_set_119; state_set_65; state_set_6 ]%list
  | Nis'204 => [ state_set_65; state_set_6 ]%list
  | Nis'205 => [ state_set_65; state_set_6 ]%list
  | Nis'206 => [ state_set_121; state_set_65; state_set_6 ]%list
  | Nis'207 => [ state_set_65; state_set_6 ]%list
  | Nis'208 => [ state_set_122; state_set_6 ]%list
  | Nis'209 => [ state_set_63; state_set_61 ]%list
  | Nis'210 => [ state_set_123; state_set_63; state_set_61 ]%list
  | Nis'211 => [ state_set_123; state_set_63; state_set_61 ]%list
  | Nis'212 => [ state_set_124; state_set_123; state_set_63; state_set_61 ]%list
  | Nis'213 => [ state_set_63; state_set_61 ]%list
  | Nis'214 => [ state_set_125; state_set_63; state_set_61 ]%list
  | Nis'215 => [ state_set_126 ]%list
  | Nis'216 => [ state_set_128; state_set_127 ]%list
  | Nis'217 => [ state_set_129; state_set_61 ]%list
  | Nis'218 => [ state_set_130; state_set_129; state_set_61 ]%list
  | Nis'219 => [ state_set_130; state_set_129; state_set_61 ]%list
  | Nis'220 => [ state_set_131; state_set_130; state_set_129; state_set_61 ]%list
  | Nis'221 => [ state_set_56 ]%list
  | Nis'222 => [ state_set_129; state_set_61 ]%list
  | Nis'223 => [ state_set_132; state_set_129; state_set_61 ]%list
  | Nis'224 => [ state_set_132; state_set_129; state_set_61 ]%list
  | Nis'225 => [ state_set_133; state_set_132; state_set_129; state_set_61 ]%list
  | Nis'226 => [ state_set_133; state_set_132; state_set_129; state_set_61 ]%list
  | Nis'227 => [ state_set_134; state_set_133; state_set_132; state_set_129; state_set_61 ]%list
  | Nis'228 => [ state_set_132; state_set_129; state_set_61 ]%list
  | Nis'229 => [ state_set_135; state_set_132; state_set_129; state_set_61 ]%list
  | Nis'230 => [ state_set_62; state_set_61 ]%list
  | Nis'231 => [ state_set_136; state_set_62; state_set_61 ]%list
  | Nis'232 => [ state_set_39 ]%list
  | Nis'233 => [ state_set_41; state_set_30 ]%list
  | Nis'234 => [ state_set_137; state_set_41; state_set_30 ]%list
  | Nis'235 => [ state_set_137; state_set_41; state_set_30 ]%list
  | Nis'236 => [ state_set_138; state_set_137; state_set_41; state_set_30 ]%list
  | Nis'237 => [ state_set_138; state_set_137; state_set_41; state_set_30 ]%list
  | Nis'238 => [ state_set_139; state_set_138; state_set_137; state_set_41; state_set_30 ]%list
  | Nis'239 => [ state_set_137; state_set_41; state_set_30 ]%list
  | Nis'240 => [ state_set_140; state_set_137; state_set_41; state_set_30 ]%list
  | Nis'241 => [ state_set_127 ]%list
  | Nis'242 => [ state_set_141 ]%list
  | Nis'243 => [ state_set_142; state_set_39 ]%list
  | Nis'244 => [ state_set_143 ]%list
  | Nis'245 => [ state_set_145; state_set_144 ]%list
  | Nis'246 => [ state_set_146; state_set_30 ]%list
  | Nis'247 => [ state_set_147; state_set_146; state_set_30 ]%list
  | Nis'248 => [ state_set_62; state_set_61 ]%list
  | Nis'249 => [ state_set_148; state_set_62; state_set_61 ]%list
  | Nis'250 => [ state_set_149; state_set_59 ]%list
  | Nis'251 => [ state_set_149; state_set_59 ]%list
  | Nis'252 => [ state_set_42; state_set_41; state_set_30 ]%list
  | Nis'253 => [ state_set_150; state_set_42; state_set_41; state_set_30 ]%list
  | Nis'254 => [ state_set_150; state_set_42 ]%list
  | Nis'255 => [ state_set_151; state_set_150; state_set_42 ]%list
  | Nis'256 => [ state_set_152 ]%list
  | Nis'257 => [ state_set_153; state_set_152 ]%list
  | Nis'258 => [ state_set_154 ]%list
  | Nis'259 => [ state_set_36; state_set_29 ]%list
  | Nis'260 => [ state_set_155; state_set_36; state_set_29 ]%list
  | Nis'261 => [ state_set_155; state_set_36 ]%list
  | Nis'262 => [ state_set_156; state_set_155; state_set_36 ]%list
  | Nis'263 => [ state_set_152 ]%list
  | Nis'264 => [ state_set_157; state_set_152 ]%list
  | Nis'265 => [ state_set_158; state_set_157; state_set_152 ]%list
  | Nis'266 => [ state_set_36 ]%list
  | Nis'267 => [ state_set_24; state_set_23; state_set_2 ]%list
  | Nis'268 => [ state_set_159; state_set_24; state_set_23; state_set_2 ]%list
  | Nis'269 => [ state_set_160; state_set_159; state_set_24; state_set_23; state_set_2 ]%list
  | Nis'270 => [ state_set_161; state_set_21 ]%list
  | Nis'271 => [ state_set_162; state_set_21 ]%list
  | Nis'272 => [ state_set_163; state_set_20; state_set_6 ]%list
  | Nis'273 => [ state_set_164; state_set_163; state_set_20; state_set_6 ]%list
  | Nis'274 => [ state_set_165 ]%list
  | Nis'275 => [ state_set_166 ]%list
  | Nis'276 => [ state_set_167 ]%list
  | Nis'277 => [ state_set_168; state_set_165 ]%list
  | Nis'278 => [ state_set_169; state_set_19; state_set_8 ]%list
  | Nis'279 => [ state_set_170; state_set_169; state_set_19; state_set_8 ]%list
  | Nis'280 => [ state_set_169; state_set_19; state_set_8 ]%list
  | Nis'281 => [ state_set_171; state_set_169; state_set_19; state_set_8 ]%list
  | Nis'282 => [ state_set_172; state_set_18; state_set_6 ]%list
  | Nis'283 => [ state_set_173; state_set_172; state_set_18; state_set_6 ]%list
  | Nis'284 => [ state_set_174; state_set_173; state_set_172; state_set_18; state_set_6 ]%list
  | Nis'285 => [ state_set_175; state_set_174; state_set_173; state_set_172; state_set_18; state_set_6 ]%list
  | Nis'286 => [ state_set_176 ]%list
  | Nis'287 => [ state_set_177; state_set_176 ]%list
  | Nis'288 => [ state_set_178; state_set_177; state_set_176 ]%list
  | Nis'289 => [ state_set_176 ]%list
  | Nis'290 => [ state_set_179; state_set_176 ]%list
  | Nis'291 => [ state_set_175; state_set_174; state_set_173; state_set_172; state_set_18; state_set_6 ]%list
  | Nis'292 => [ state_set_180; state_set_175; state_set_174; state_set_173; state_set_172; state_set_18; state_set_6 ]%list
  | Nis'293 => [ state_set_182; state_set_181 ]%list
  | Nis'294 => [ state_set_181 ]%list
  | Nis'295 => [ state_set_183; state_set_17; state_set_6 ]%list
  | Nis'296 => [ state_set_184; state_set_183; state_set_17; state_set_6 ]%list
  | Nis'297 => [ state_set_185; state_set_184; state_set_183; state_set_17; state_set_6 ]%list
  | Nis'298 => [ state_set_186; state_set_185; state_set_184; state_set_183; state_set_17; state_set_6 ]%list
  | Nis'299 => [ state_set_187; state_set_6 ]%list
  | Nis'300 => [ state_set_16; state_set_15; state_set_14 ]%list
  | Nis'301 => [ state_set_188; state_set_16; state_set_15; state_set_14 ]%list
  | Nis'302 => [ state_set_189; state_set_13; state_set_12; state_set_8 ]%list
  | Nis'303 => [ state_set_190; state_set_189; state_set_13; state_set_12; state_set_8 ]%list
  | Nis'304 => [ state_set_191; state_set_190; state_set_189; state_set_13; state_set_12; state_set_8 ]%list
  | Nis'305 => [ state_set_190; state_set_189 ]%list
  | Nis'306 => [ state_set_192; state_set_190; state_set_189 ]%list
  | Nis'307 => [ state_set_189 ]%list
  | Nis'308 => [ state_set_193; state_set_2 ]%list
  | Nis'309 => [ state_set_194; state_set_193; state_set_2 ]%list
  | Nis'310 => [ state_set_195; state_set_194; state_set_193; state_set_2 ]%list
  | Nis'311 => [ state_set_196 ]%list
  | Nis'312 => [ state_set_197; state_set_195; state_set_194; state_set_193; state_set_2 ]%list
  | Nis'313 => [ state_set_198; state_set_197; state_set_195; state_set_194; state_set_193; state_set_2 ]%list
  | Nis'314 => [ state_set_198; state_set_197; state_set_195; state_set_194; state_set_193; state_set_2 ]%list
  | Nis'315 => [ state_set_199; state_set_198; state_set_197; state_set_195; state_set_194; state_set_193; state_set_2 ]%list
  | Nis'316 => [ state_set_202; state_set_201; state_set_200 ]%list
  | Nis'317 => [ state_set_196 ]%list
  | Nis'318 => [ state_set_203; state_set_196 ]%list
  | Nis'319 => [ state_set_204; state_set_203; state_set_196 ]%list
  | Nis'320 => [ state_set_200 ]%list
  | Nis'321 => [ state_set_194; state_set_193; state_set_2 ]%list
  | Nis'322 => [ state_set_205; state_set_194; state_set_193; state_set_2 ]%list
  | Nis'323 => [ state_set_206; state_set_205; state_set_194; state_set_193; state_set_2 ]%list
  | Nis'324 => [ state_set_206; state_set_205; state_set_194; state_set_193; state_set_2 ]%list
  | Nis'325 => [ state_set_207; state_set_206; state_set_205; state_set_194; state_set_193; state_set_2 ]%list
  | Nis'326 => [ state_set_208; state_set_11 ]%list
  | Nis'327 => [ state_set_209; state_set_208; state_set_11 ]%list
  | Nis'328 => [ state_set_212; state_set_211; state_set_210; state_set_6 ]%list
  | Nis'329 => [ state_set_213 ]%list
  | Nis'330 => [ state_set_214; state_set_213 ]%list
  | Nis'331 => [ state_set_215; state_set_214; state_set_213 ]%list
  | Nis'332 => [ state_set_215; state_set_214; state_set_213 ]%list
  | Nis'333 => [ state_set_216; state_set_215; state_set_214; state_set_213 ]%list
  | Nis'334 => [ state_set_217 ]%list
  | Nis'335 => [ state_set_218; state_set_217 ]%list
  | Nis'336 => [ state_set_221; state_set_220; state_set_219 ]%list
  | Nis'337 => [ state_set_222; state_set_221; state_set_220; state_set_219 ]%list
  | Nis'338 => [ state_set_213 ]%list
  | Nis'339 => [ state_set_221; state_set_220; state_set_219 ]%list
  | Nis'340 => [ state_set_219 ]%list
  | Nis'341 => [ state_set_223; state_set_219 ]%list
  | Nis'342 => [ state_set_219 ]%list
  | Nis'343 => [ state_set_224; state_set_212; state_set_211; state_set_210; state_set_6 ]%list
  | Nis'344 => [ state_set_225; state_set_224; state_set_212; state_set_211; state_set_210; state_set_6 ]%list
  | Nis'345 => [ state_set_225; state_set_224; state_set_212; state_set_211; state_set_210; state_set_6 ]%list
  | Nis'346 => [ state_set_226; state_set_225; state_set_224; state_set_212; state_set_211; state_set_210; state_set_6 ]%list
  | Nis'347 => [ state_set_210; state_set_6 ]%list
  | Nis'348 => [ state_set_227; state_set_210; state_set_6 ]%list
  | Nis'349 => [ state_set_228; state_set_6 ]%list
  | Nis'350 => [ state_set_229; state_set_10 ]%list
  | Nis'351 => [ state_set_230; state_set_229; state_set_10 ]%list
  | Nis'352 => [ state_set_231; state_set_230; state_set_229; state_set_10 ]%list
  | Nis'353 => [ state_set_232; state_set_9; state_set_8 ]%list
  | Nis'354 => [ state_set_233; state_set_232; state_set_9; state_set_8 ]%list
  | Nis'355 => [ state_set_234; state_set_7; state_set_6 ]%list
  | Nis'356 => [ state_set_235; state_set_234; state_set_7; state_set_6 ]%list
  | Nis'357 => [ state_set_7; state_set_6 ]%list
  | Nis'358 => [ state_set_236; state_set_5; state_set_4 ]%list
  | Nis'359 => [ state_set_237; state_set_236; state_set_5; state_set_4 ]%list
  | Nis'360 => [ state_set_238; state_set_237; state_set_236; state_set_5; state_set_4 ]%list
  | Nis'361 => [ state_set_239; state_set_238; state_set_237; state_set_236; state_set_5; state_set_4 ]%list
  | Nis'362 => [ state_set_240; state_set_239; state_set_238; state_set_237; state_set_236; state_set_5; state_set_4 ]%list
  | Nis'363 => [ state_set_241 ]%list
  | Nis'364 => [ state_set_242 ]%list
  | Nis'365 => [ state_set_241 ]%list
  | Nis'367 => [ state_set_241 ]%list
  | Nis'368 => [ state_set_243; state_set_241 ]%list
  | Nis'369 => [ state_set_243; state_set_241 ]%list
  | Nis'370 => [ state_set_244 ]%list
  | Nis'371 => [ state_set_242 ]%list
  | Nis'372 => [ state_set_243; state_set_241 ]%list
  | Nis'373 => [ state_set_242 ]%list
  | Nis'374 => [ state_set_245; state_set_244 ]%list
  | Nis'375 => [ state_set_245; state_set_244 ]%list
  | Nis'376 => [ state_set_246; state_set_245; state_set_244 ]%list
  | Nis'377 => [ state_set_246; state_set_245 ]%list
  | Nis'378 => [ state_set_247; state_set_246; state_set_245 ]%list
  | Nis'379 => [ state_set_248 ]%list
  | Nis'380 => [ state_set_250; state_set_249 ]%list
  | Nis'381 => [ state_set_251; state_set_250; state_set_249 ]%list
  | Nis'382 => [ state_set_245 ]%list
  | Nis'383 => [ state_set_252; state_set_242 ]%list
  | Nis'384 => [ state_set_253 ]%list
  | Nis'385 => [ state_set_254; state_set_252; state_set_242 ]%list
  | Nis'386 => [ state_set_255 ]%list
  | Nis'387 => [ state_set_256 ]%list
  | Nis'388 => [ state_set_257; state_set_256 ]%list
  | Nis'389 => [ state_set_258; state_set_257; state_set_256 ]%list
  | Nis'390 => [ state_set_259; state_set_258; state_set_257; state_set_256 ]%list
  | Nis'391 => [ state_set_256 ]%list
  | Nis'392 => [ state_set_260; state_set_256 ]%list
  | Nis'393 => [ state_set_261; state_set_260; state_set_256 ]%list
  | Nis'394 => [ state_set_262; state_set_261; state_set_260; state_set_256 ]%list
  | Nis'395 => [ state_set_263 ]%list
  | Nis'396 => [ state_set_263 ]%list
  | Nis'397 => [ state_set_264; state_set_263 ]%list
  | Nis'398 => [ state_set_264; state_set_263 ]%list
  | Nis'399 => [ state_set_265; state_set_264; state_set_263 ]%list
  | Nis'400 => [ state_set_256 ]%list
  | Nis'401 => [ state_set_266; state_set_256 ]%list
  | Nis'402 => [ state_set_256 ]%list
  | Nis'403 => [ state_set_267; state_set_256 ]%list
  | Nis'404 => [ state_set_268; state_set_267; state_set_256 ]%list
  | Nis'405 => [ state_set_269; state_set_268; state_set_267; state_set_256 ]%list
  | Nis'406 => [ state_set_270 ]%list
  | Nis'407 => [ state_set_271; state_set_270 ]%list
  | Nis'408 => [ state_set_272; state_set_271; state_set_270 ]%list
  | Nis'409 => [ state_set_273; state_set_272; state_set_271; state_set_270 ]%list
  | Nis'410 => [ state_set_270 ]%list
  | Nis'411 => [ state_set_274; state_set_270 ]%list
  | Nis'412 => [ state_set_275; state_set_274; state_set_270 ]%list
  | Nis'413 => [ state_set_276; state_set_275; state_set_274; state_set_270 ]%list
  | Nis'414 => [ state_set_270 ]%list
  | Nis'415 => [ state_set_277; state_set_270 ]%list
  | Nis'416 => [ state_set_270 ]%list
  | Nis'417 => [ state_set_278; state_set_270 ]%list
  | Nis'418 => [ state_set_279; state_set_278; state_set_270 ]%list
  | Nis'419 => [ state_set_280; state_set_279; state_set_278; state_set_270 ]%list
  | Nis'420 => [ state_set_263 ]%list
  | Nis'421 => [ state_set_281; state_set_263 ]%list
  | Nis'422 => [ state_set_282; state_set_281; state_set_263 ]%list
  | Nis'423 => [ state_set_270 ]%list
  | Nis'424 => [ state_set_283; state_set_270 ]%list
  | Nis'425 => [ state_set_284; state_set_283; state_set_270 ]%list
  | Nis'426 => [ state_set_285; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'427 => [ state_set_286; state_set_285; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'428 => [ state_set_270 ]%list
  | Nis'429 => [ state_set_256 ]%list
  | Nis'430 => [ state_set_287; state_set_256 ]%list
  | Nis'431 => [ state_set_288; state_set_287; state_set_256 ]%list
  | Nis'432 => [ state_set_289; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'433 => [ state_set_290; state_set_289; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'434 => [ state_set_256 ]%list
  | Nis'435 => [ state_set_256 ]%list
  | Nis'436 => [ state_set_291; state_set_256 ]%list
  | Nis'437 => [ state_set_263 ]%list
  | Nis'438 => [ state_set_292; state_set_263 ]%list
  | Nis'439 => [ state_set_256 ]%list
  | Nis'440 => [ state_set_293; state_set_256 ]%list
  | Nis'441 => [ state_set_294; state_set_293; state_set_256 ]%list
  | Nis'442 => [ state_set_263 ]%list
  | Nis'443 => [ state_set_295; state_set_263 ]%list
  | Nis'444 => [ state_set_263 ]%list
  | Nis'445 => [ state_set_296 ]%list
  | Nis'446 => [ state_set_296 ]%list
  | Nis'447 => [ state_set_297; state_set_296 ]%list
  | Nis'448 => [ state_set_298; state_set_296 ]%list
  | Nis'449 => [ state_set_299; state_set_263 ]%list
  | Nis'450 => [ state_set_300; state_set_299; state_set_263 ]%list
  | Nis'451 => [ state_set_301; state_set_300; state_set_299; state_set_263 ]%list
  | Nis'452 => [ state_set_302 ]%list
  | Nis'453 => [ state_set_303 ]%list
  | Nis'454 => [ state_set_304; state_set_303 ]%list
  | Nis'455 => [ state_set_305; state_set_304; state_set_303 ]%list
  | Nis'456 => [ state_set_306 ]%list
  | Nis'457 => [ state_set_307; state_set_306 ]%list
  | Nis'458 => [ state_set_308; state_set_307; state_set_306 ]%list
  | Nis'459 => [ state_set_303 ]%list
  | Nis'460 => [ state_set_309; state_set_303 ]%list
  | Nis'461 => [ state_set_310; state_set_309; state_set_303 ]%list
  | Nis'462 => [ state_set_311; state_set_310; state_set_309; state_set_303 ]%list
  | Nis'463 => [ state_set_312; state_set_311; state_set_310; state_set_309; state_set_303 ]%list
  | Nis'464 => [ state_set_313; state_set_302 ]%list
  | Nis'465 => [ state_set_314; state_set_313; state_set_302 ]%list
  | Nis'466 => [ state_set_315; state_set_314; state_set_313; state_set_302 ]%list
  | Nis'467 => [ state_set_316; state_set_315; state_set_314; state_set_313; state_set_302 ]%list
  | Nis'468 => [ state_set_317 ]%list
  | Nis'469 => [ state_set_318; state_set_317 ]%list
  | Nis'470 => [ state_set_319; state_set_318; state_set_317 ]%list
  | Nis'471 => [ state_set_320; state_set_316; state_set_315; state_set_314; state_set_313; state_set_302 ]%list
  | Nis'472 => [ state_set_306 ]%list
  | Nis'473 => [ state_set_302; state_set_301; state_set_300; state_set_299; state_set_263 ]%list
  | Nis'474 => [ state_set_321; state_set_302; state_set_301; state_set_300; state_set_299; state_set_263 ]%list
  | Nis'475 => [ state_set_322; state_set_321; state_set_302; state_set_301; state_set_300; state_set_299; state_set_263 ]%list
  | Nis'476 => [ state_set_325; state_set_324; state_set_323; state_set_263 ]%list
  | Nis'477 => [ state_set_263 ]%list
  | Nis'478 => [ state_set_263 ]%list
  | Nis'479 => [ state_set_256 ]%list
  | Nis'480 => [ state_set_263 ]%list
  | Nis'481 => [ state_set_256 ]%list
  | Nis'482 => [ state_set_263 ]%list
  | Nis'483 => [ state_set_326; state_set_263 ]%list
  | Nis'484 => [ state_set_256 ]%list
  | Nis'485 => [ state_set_256 ]%list
  | Nis'486 => [ state_set_328; state_set_327; state_set_263 ]%list
  | Nis'487 => [ state_set_329; state_set_256 ]%list
  | Nis'488 => [ state_set_330; state_set_329; state_set_256 ]%list
  | Nis'489 => [ state_set_331; state_set_330; state_set_329; state_set_256 ]%list
  | Nis'490 => [ state_set_332; state_set_331; state_set_330; state_set_329; state_set_256 ]%list
  | Nis'491 => [ state_set_333; state_set_332; state_set_331; state_set_330; state_set_329; state_set_256 ]%list
  | Nis'492 => [ state_set_334; state_set_333; state_set_332; state_set_331; state_set_330; state_set_329; state_set_256 ]%list
  | Nis'493 => [ state_set_339; state_set_338; state_set_337; state_set_336; state_set_335; state_set_263 ]%list
  | Nis'494 => [ state_set_290; state_set_289; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'495 => [ state_set_340; state_set_290; state_set_289; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'496 => [ state_set_342; state_set_341; state_set_338; state_set_337; state_set_336; state_set_335; state_set_263 ]%list
  | Nis'497 => [ state_set_289; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'498 => [ state_set_343; state_set_289; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'499 => [ state_set_344; state_set_343; state_set_289; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'500 => [ state_set_347; state_set_346; state_set_345; state_set_337; state_set_336; state_set_335; state_set_263 ]%list
  | Nis'501 => [ state_set_344; state_set_343; state_set_289; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'502 => [ state_set_348; state_set_344; state_set_343; state_set_289; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'503 => [ state_set_350; state_set_349; state_set_346; state_set_345; state_set_337; state_set_336; state_set_335; state_set_263 ]%list
  | Nis'504 => [ state_set_288; state_set_287; state_set_256 ]%list
  | Nis'505 => [ state_set_351; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'506 => [ state_set_352; state_set_351; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'507 => [ state_set_353; state_set_352; state_set_351; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'508 => [ state_set_357; state_set_356; state_set_355; state_set_354; state_set_336; state_set_335; state_set_263 ]%list
  | Nis'509 => [ state_set_353; state_set_352; state_set_351; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'510 => [ state_set_358; state_set_353; state_set_352; state_set_351; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'511 => [ state_set_360; state_set_359; state_set_356; state_set_355; state_set_354; state_set_336; state_set_335; state_set_263 ]%list
  | Nis'512 => [ state_set_352; state_set_351; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'513 => [ state_set_361; state_set_352; state_set_351; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'514 => [ state_set_362; state_set_361; state_set_352; state_set_351; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'515 => [ state_set_365; state_set_364; state_set_363; state_set_355; state_set_354; state_set_336; state_set_335; state_set_263 ]%list
  | Nis'516 => [ state_set_362; state_set_361; state_set_352; state_set_351; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'517 => [ state_set_366; state_set_362; state_set_361; state_set_352; state_set_351; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'518 => [ state_set_368; state_set_367; state_set_364; state_set_363; state_set_355; state_set_354; state_set_336; state_set_335; state_set_263 ]%list
  | Nis'519 => [ state_set_288; state_set_287; state_set_256 ]%list
  | Nis'520 => [ state_set_369; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'521 => [ state_set_370; state_set_369; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'522 => [ state_set_373; state_set_372; state_set_371; state_set_336; state_set_335; state_set_263 ]%list
  | Nis'523 => [ state_set_370; state_set_369; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'524 => [ state_set_374; state_set_370; state_set_369; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'525 => [ state_set_376; state_set_375; state_set_372; state_set_371; state_set_336; state_set_335; state_set_263 ]%list
  | Nis'526 => [ state_set_369; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'527 => [ state_set_377; state_set_369; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'528 => [ state_set_378; state_set_377; state_set_369; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'529 => [ state_set_381; state_set_380; state_set_379; state_set_371; state_set_336; state_set_335; state_set_263 ]%list
  | Nis'530 => [ state_set_378; state_set_377; state_set_369; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'531 => [ state_set_382; state_set_378; state_set_377; state_set_369; state_set_288; state_set_287; state_set_256 ]%list
  | Nis'532 => [ state_set_384; state_set_383; state_set_380; state_set_379; state_set_371; state_set_336; state_set_335; state_set_263 ]%list
  | Nis'533 => [ state_set_385; state_set_270 ]%list
  | Nis'534 => [ state_set_386; state_set_385; state_set_270 ]%list
  | Nis'535 => [ state_set_387; state_set_386; state_set_385; state_set_270 ]%list
  | Nis'536 => [ state_set_388; state_set_387; state_set_386; state_set_385; state_set_270 ]%list
  | Nis'537 => [ state_set_389; state_set_388; state_set_387; state_set_386; state_set_385; state_set_270 ]%list
  | Nis'538 => [ state_set_390; state_set_389; state_set_388; state_set_387; state_set_386; state_set_385; state_set_270 ]%list
  | Nis'539 => [ state_set_270 ]%list
  | Nis'540 => [ state_set_391; state_set_270 ]%list
  | Nis'541 => [ state_set_270 ]%list
  | Nis'542 => [ state_set_392; state_set_270 ]%list
  | Nis'543 => [ state_set_393; state_set_392; state_set_270 ]%list
  | Nis'544 => [ state_set_394; state_set_393; state_set_392; state_set_270 ]%list
  | Nis'545 => [ state_set_270 ]%list
  | Nis'546 => [ state_set_270 ]%list
  | Nis'547 => [ state_set_270 ]%list
  | Nis'548 => [ state_set_270 ]%list
  | Nis'549 => [ state_set_270 ]%list
  | Nis'550 => [ state_set_270 ]%list
  | Nis'551 => [ state_set_270 ]%list
  | Nis'552 => [ state_set_395; state_set_391; state_set_270 ]%list
  | Nis'553 => [ state_set_396; state_set_286; state_set_285; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'554 => [ state_set_286; state_set_285; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'555 => [ state_set_397; state_set_286; state_set_285; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'556 => [ state_set_398; state_set_397; state_set_286; state_set_285; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'557 => [ state_set_285; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'558 => [ state_set_399; state_set_285; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'559 => [ state_set_400; state_set_399; state_set_285; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'560 => [ state_set_401; state_set_400; state_set_399; state_set_285; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'561 => [ state_set_400; state_set_399; state_set_285; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'562 => [ state_set_402; state_set_400; state_set_399; state_set_285; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'563 => [ state_set_403; state_set_402; state_set_400; state_set_399; state_set_285; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'564 => [ state_set_284; state_set_283; state_set_270 ]%list
  | Nis'565 => [ state_set_404; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'566 => [ state_set_405; state_set_404; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'567 => [ state_set_406; state_set_405; state_set_404; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'568 => [ state_set_407; state_set_406; state_set_405; state_set_404; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'569 => [ state_set_406; state_set_405; state_set_404; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'570 => [ state_set_408; state_set_406; state_set_405; state_set_404; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'571 => [ state_set_409; state_set_408; state_set_406; state_set_405; state_set_404; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'572 => [ state_set_405; state_set_404; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'573 => [ state_set_410; state_set_405; state_set_404; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'574 => [ state_set_411; state_set_410; state_set_405; state_set_404; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'575 => [ state_set_412; state_set_411; state_set_410; state_set_405; state_set_404; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'576 => [ state_set_411; state_set_410; state_set_405; state_set_404; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'577 => [ state_set_413; state_set_411; state_set_410; state_set_405; state_set_404; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'578 => [ state_set_414; state_set_413; state_set_411; state_set_410; state_set_405; state_set_404; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'579 => [ state_set_284; state_set_283; state_set_270 ]%list
  | Nis'580 => [ state_set_415; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'581 => [ state_set_416; state_set_415; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'582 => [ state_set_417; state_set_416; state_set_415; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'583 => [ state_set_416; state_set_415; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'584 => [ state_set_418; state_set_416; state_set_415; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'585 => [ state_set_419; state_set_418; state_set_416; state_set_415; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'586 => [ state_set_415; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'587 => [ state_set_420; state_set_415; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'588 => [ state_set_421; state_set_420; state_set_415; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'589 => [ state_set_422; state_set_421; state_set_420; state_set_415; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'590 => [ state_set_421; state_set_420; state_set_415; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'591 => [ state_set_423; state_set_421; state_set_420; state_set_415; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'592 => [ state_set_424; state_set_423; state_set_421; state_set_420; state_set_415; state_set_284; state_set_283; state_set_270 ]%list
  | Nis'593 => [ state_set_425; state_set_280; state_set_279; state_set_278; state_set_270 ]%list
  | Nis'594 => [ state_set_426; state_set_425; state_set_280; state_set_279; state_set_278; state_set_270 ]%list
  | Nis'595 => [ state_set_427; state_set_426; state_set_425; state_set_280; state_set_279; state_set_278; state_set_270 ]%list
  | Nis'596 => [ state_set_433; state_set_432; state_set_431; state_set_430; state_set_429; state_set_428; state_set_263 ]%list
  | Nis'597 => [ state_set_431; state_set_430; state_set_429; state_set_428; state_set_263 ]%list
  | Nis'598 => [ state_set_434; state_set_277; state_set_270 ]%list
  | Nis'599 => [ state_set_436; state_set_435; state_set_263 ]%list
  | Nis'600 => [ state_set_437; state_set_276; state_set_275; state_set_274; state_set_270 ]%list
  | Nis'601 => [ state_set_441; state_set_440; state_set_439; state_set_438; state_set_263 ]%list
  | Nis'602 => [ state_set_442; state_set_273; state_set_272; state_set_271; state_set_270 ]%list
  | Nis'603 => [ state_set_446; state_set_445; state_set_444; state_set_443; state_set_263 ]%list
  | Nis'604 => [ state_set_447; state_set_269; state_set_268; state_set_267; state_set_256 ]%list
  | Nis'605 => [ state_set_448; state_set_447; state_set_269; state_set_268; state_set_267; state_set_256 ]%list
  | Nis'606 => [ state_set_449; state_set_255 ]%list
  | Nis'607 => [ state_set_450 ]%list
  | Nis'608 => [ state_set_450 ]%list
  | Nis'609 => [ state_set_450 ]%list
  | Nis'610 => [ state_set_449; state_set_255 ]%list
  | Nis'611 => [ state_set_451; state_set_449; state_set_255 ]%list
  | Nis'612 => [ state_set_451; state_set_449 ]%list
  | Nis'613 => [ state_set_449 ]%list
  | Nis'614 => [ state_set_452; state_set_254 ]%list
  | Nis'615 => [ state_set_452; state_set_254; state_set_252; state_set_242 ]%list
  | Nis'616 => [ state_set_254 ]%list
  | Nis'617 => [ state_set_453 ]%list
  | Nis'618 => [ state_set_252; state_set_242 ]%list
  | Nis'619 => [ state_set_454; state_set_252; state_set_242 ]%list
  | Nis'620 => [ state_set_242 ]%list
  | Nis'621 => [ state_set_241 ]%list
  end.
Extract Constant past_state_of_non_init_state => "fun _ -> assert false".

Definition lookahead_set_1 : list terminal :=
  [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC't; SIGNED't; SHORT't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LONG't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_1 => "assert false".

Definition lookahead_set_2 : list terminal :=
  [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC_ASSERT't; STATIC't; SIGNED't; SHORT't; SEMICOLON't; RESTRICT't; REGISTER't; PRAGMA't; PACKED't; NORETURN't; LONG't; INT't; INLINE't; FLOAT't; EXTERN't; EOF't; ENUM't; DOUBLE't; CONST't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_2 => "assert false".

Definition lookahead_set_3 : list terminal :=
  [VAR_NAME't; STAR't; SEMICOLON't; LPAREN't]%list.
Extract Inlined Constant lookahead_set_3 => "assert false".

Definition lookahead_set_4 : list terminal :=
  [VOLATILE't; VOID't; VAR_NAME't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC't; STAR't; SIGNED't; SHORT't; SEMICOLON't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LPAREN't; LONG't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_4 => "assert false".

Definition lookahead_set_5 : list terminal :=
  [PACKED't; OTHER_NAME't; LBRACE't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_5 => "assert false".

Definition lookahead_set_6 : list terminal :=
  [XOR_ASSIGN't; WHILE't; VOLATILE't; VOID't; VAR_NAME't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; TILDE't; SWITCH't; SUB_ASSIGN't; STRUCT't; STRING_LITERAL't; STATIC_ASSERT't; STATIC't; STAR't; SLASH't; SIZEOF't; SIGNED't; SHORT't; SEMICOLON't; RPAREN't; RIGHT_ASSIGN't; RIGHT't; RETURN't; RESTRICT't; REGISTER't; RBRACK't; RBRACE't; QUESTION't; PTR't; PRAGMA't; PLUS't; PERCENT't; PACKED't; OTHER_NAME't; OR_ASSIGN't; NORETURN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LPAREN't; LONG't; LEQ't; LEFT_ASSIGN't; LEFT't; LBRACK't; LBRACE't; INT't; INLINE't; INC't; IF_'t; HAT't; GT't; GOTO't; GEQ't; FOR't; FLOAT't; EXTERN't; EQEQ't; EQ't; EOF't; ENUM't; ELSE't; ELLIPSIS't; DOUBLE't; DOT't; DO't; DIV_ASSIGN't; DEFAULT't; DEC't; CONTINUE't; CONSTANT't; CONST't; COMMA't; COLON't; CHAR't; CASE't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BREAK't; BARBAR't; BAR't; BANG't; AUTO't; ATTRIBUTE't; ASM't; AND_ASSIGN't; ANDAND't; AND't; ALIGNOF't; ALIGNAS't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_6 => "assert false".

Definition lookahead_set_7 : list terminal :=
  [VOLATILE't; VOID't; VAR_NAME't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; TILDE't; STRUCT't; STRING_LITERAL't; STATIC't; STAR't; SIZEOF't; SIGNED't; SHORT't; SEMICOLON't; RPAREN't; RESTRICT't; REGISTER't; RBRACK't; PLUS't; PACKED't; NORETURN't; MINUS't; LPAREN't; LONG't; LBRACK't; INT't; INLINE't; INC't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; DEC't; CONSTANT't; CONST't; COMMA't; COLON't; CHAR't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AUTO't; ATTRIBUTE't; AND't; ALIGNOF't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_7 => "assert false".

Definition lookahead_set_8 : list terminal :=
  [VOLATILE't; VOID't; VAR_NAME't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC't; STAR't; SIGNED't; SHORT't; SEMICOLON't; RPAREN't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LPAREN't; LONG't; LBRACK't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; COMMA't; COLON't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_8 => "assert false".

Definition lookahead_set_9 : list terminal :=
  [VOLATILE't; VOID't; VAR_NAME't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC't; STAR't; SIGNED't; SHORT't; SEMICOLON't; RPAREN't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LPAREN't; LONG't; LBRACK't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; COMMA't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_9 => "assert false".

Definition lookahead_set_10 : list terminal :=
  [WHILE't; VOLATILE't; VOID't; VAR_NAME't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; TILDE't; SWITCH't; STRUCT't; STRING_LITERAL't; STATIC_ASSERT't; STATIC't; STAR't; SIZEOF't; SIGNED't; SHORT't; SEMICOLON't; RETURN't; RESTRICT't; REGISTER't; RBRACE't; PRAGMA't; PLUS't; PACKED't; OTHER_NAME't; NORETURN't; MINUS't; LPAREN't; LONG't; LBRACE't; INT't; INLINE't; INC't; IF_'t; GOTO't; FOR't; FLOAT't; EXTERN't; EOF't; ENUM't; DOUBLE't; DO't; DEFAULT't; DEC't; CONTINUE't; CONSTANT't; CONST't; CHAR't; CASE't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BREAK't; BANG't; AUTO't; ATTRIBUTE't; ASM't; AND't; ALIGNOF't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_10 => "assert false".

Definition lookahead_set_11 : list terminal :=
  [QUESTION't; HAT't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_11 => "assert false".

Definition lookahead_set_12 : list terminal :=
  [RIGHT't; QUESTION't; PLUS't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_12 => "assert false".

Definition lookahead_set_13 : list terminal :=
  [STAR't; SLASH't; RIGHT't; QUESTION't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_13 => "assert false".

Definition lookahead_set_14 : list terminal :=
  [COMMA't]%list.
Extract Inlined Constant lookahead_set_14 => "assert false".

Definition lookahead_set_15 : list terminal :=
  [QUESTION't; NEQ't; HAT't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_15 => "assert false".

Definition lookahead_set_16 : list terminal :=
  [QUESTION't; HAT't; COMMA't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_16 => "assert false".

Definition lookahead_set_17 : list terminal :=
  [QUESTION't; COMMA't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_17 => "assert false".

Definition lookahead_set_18 : list terminal :=
  [QUESTION't; COMMA't; BARBAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_18 => "assert false".

Definition lookahead_set_19 : list terminal :=
  [QUESTION't; COMMA't; BARBAR't]%list.
Extract Inlined Constant lookahead_set_19 => "assert false".

Definition lookahead_set_20 : list terminal :=
  [STAR't; SLASH't; RIGHT't; QUESTION't; PTR't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LPAREN't; LEQ't; LEFT't; LBRACK't; INC't; HAT't; GT't; GEQ't; EQEQ't; DOT't; DEC't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_20 => "assert false".

Definition lookahead_set_21 : list terminal :=
  [QUESTION't; NEQ't; LT't; LEQ't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_21 => "assert false".

Definition lookahead_set_22 : list terminal :=
  [RIGHT't; QUESTION't; NEQ't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_22 => "assert false".

Definition lookahead_set_23 : list terminal :=
  [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list.
Extract Inlined Constant lookahead_set_23 => "assert false".

Definition lookahead_set_24 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; SEMICOLON't; RPAREN't; RIGHT_ASSIGN't; RIGHT't; RBRACK't; RBRACE't; QUESTION't; PTR't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LPAREN't; LEQ't; LEFT_ASSIGN't; LEFT't; LBRACK't; INC't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DOT't; DIV_ASSIGN't; DEC't; COMMA't; COLON't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_24 => "assert false".

Definition lookahead_set_25 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; SEMICOLON't; RPAREN't; RIGHT_ASSIGN't; RIGHT't; RBRACK't; RBRACE't; QUESTION't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LEQ't; LEFT_ASSIGN't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DIV_ASSIGN't; COMMA't; COLON't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_25 => "assert false".

Definition lookahead_set_26 : list terminal :=
  [RPAREN't; QUESTION't; HAT't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_26 => "assert false".

Definition lookahead_set_27 : list terminal :=
  [RPAREN't; RIGHT't; QUESTION't; PLUS't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_27 => "assert false".

Definition lookahead_set_28 : list terminal :=
  [RPAREN't; COMMA't]%list.
Extract Inlined Constant lookahead_set_28 => "assert false".

Definition lookahead_set_29 : list terminal :=
  [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; STRUCT't; STAR't; SIGNED't; SHORT't; RPAREN't; RESTRICT't; PACKED't; LPAREN't; LONG't; LBRACK't; INT't; FLOAT't; ENUM't; DOUBLE't; CONST't; CHAR't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_29 => "assert false".

Definition lookahead_set_30 : list terminal :=
  [STAR't; SLASH't; RPAREN't; RIGHT't; QUESTION't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_30 => "assert false".

Definition lookahead_set_31 : list terminal :=
  [RPAREN't; QUESTION't; NEQ't; HAT't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_31 => "assert false".

Definition lookahead_set_32 : list terminal :=
  [RPAREN't; QUESTION't; HAT't; COMMA't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_32 => "assert false".

Definition lookahead_set_33 : list terminal :=
  [RPAREN't; QUESTION't; COMMA't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_33 => "assert false".

Definition lookahead_set_34 : list terminal :=
  [RPAREN't; QUESTION't; COMMA't; BARBAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_34 => "assert false".

Definition lookahead_set_35 : list terminal :=
  [RPAREN't; QUESTION't; COMMA't; BARBAR't]%list.
Extract Inlined Constant lookahead_set_35 => "assert false".

Definition lookahead_set_36 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; RPAREN't; RIGHT_ASSIGN't; RIGHT't; QUESTION't; PTR't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LPAREN't; LEQ't; LEFT_ASSIGN't; LEFT't; LBRACK't; INC't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DOT't; DIV_ASSIGN't; DEC't; COMMA't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_36 => "assert false".

Definition lookahead_set_37 : list terminal :=
  [RPAREN't; QUESTION't; NEQ't; LT't; LEQ't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_37 => "assert false".

Definition lookahead_set_38 : list terminal :=
  [RPAREN't; RIGHT't; QUESTION't; NEQ't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_38 => "assert false".

Definition lookahead_set_39 : list terminal :=
  [STAR't; RPAREN't; LPAREN't; LBRACK't]%list.
Extract Inlined Constant lookahead_set_39 => "assert false".

Definition lookahead_set_40 : list terminal :=
  [RPAREN't]%list.
Extract Inlined Constant lookahead_set_40 => "assert false".

Definition lookahead_set_41 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; RPAREN't; RIGHT_ASSIGN't; RIGHT't; QUESTION't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LEQ't; LEFT_ASSIGN't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DIV_ASSIGN't; COMMA't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_41 => "assert false".

Definition lookahead_set_42 : list terminal :=
  [VOLATILE't; VOID't; VAR_NAME't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; TILDE't; STRUCT't; STRING_LITERAL't; STATIC't; STAR't; SIZEOF't; SIGNED't; SHORT't; SEMICOLON't; RPAREN't; RESTRICT't; REGISTER't; RBRACK't; PLUS't; PACKED't; OTHER_NAME't; NORETURN't; MINUS't; LPAREN't; LONG't; LBRACK't; LBRACE't; INT't; INLINE't; INC't; FLOAT't; EXTERN't; EQ't; ENUM't; DOUBLE't; DEC't; CONSTANT't; CONST't; COMMA't; COLON't; CHAR't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AUTO't; ATTRIBUTE't; AND't; ALIGNOF't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_42 => "assert false".

Definition lookahead_set_43 : list terminal :=
  [OTHER_NAME't; LBRACE't]%list.
Extract Inlined Constant lookahead_set_43 => "assert false".

Definition lookahead_set_44 : list terminal :=
  [RPAREN't; LPAREN't; COMMA't]%list.
Extract Inlined Constant lookahead_set_44 => "assert false".

Definition lookahead_set_45 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; RIGHT_ASSIGN't; RIGHT't; QUESTION't; PTR't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LPAREN't; LEQ't; LEFT_ASSIGN't; LEFT't; LBRACK't; INC't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DOT't; DIV_ASSIGN't; DEC't; COMMA't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_45 => "assert false".

Definition lookahead_set_46 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; RIGHT_ASSIGN't; RIGHT't; QUESTION't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LEQ't; LEFT_ASSIGN't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DIV_ASSIGN't; COMMA't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_46 => "assert false".

Definition lookahead_set_47 : list terminal :=
  [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; STRUCT't; STAR't; SIGNED't; SHORT't; RESTRICT't; PACKED't; LPAREN't; LONG't; LBRACK't; INT't; FLOAT't; ENUM't; DOUBLE't; CONST't; COMMA't; CHAR't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_47 => "assert false".

Definition lookahead_set_48 : list terminal :=
  [STAR't; LPAREN't; LBRACK't; COMMA't]%list.
Extract Inlined Constant lookahead_set_48 => "assert false".

Definition lookahead_set_49 : list terminal :=
  [VOLATILE't; VOID't; VAR_NAME't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; STRUCT't; STAR't; SIGNED't; SHORT't; SEMICOLON't; RPAREN't; RESTRICT't; PACKED't; LPAREN't; LONG't; LBRACK't; INT't; FLOAT't; ENUM't; DOUBLE't; CONST't; COMMA't; COLON't; CHAR't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_49 => "assert false".

Definition lookahead_set_50 : list terminal :=
  [VAR_NAME't; STAR't; SEMICOLON't; RPAREN't; LPAREN't; LBRACK't; COMMA't; COLON't]%list.
Extract Inlined Constant lookahead_set_50 => "assert false".

Definition lookahead_set_51 : list terminal :=
  [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; STRUCT't; STATIC_ASSERT't; SIGNED't; SHORT't; RESTRICT't; RBRACE't; PACKED't; LONG't; INT't; FLOAT't; ENUM't; DOUBLE't; CONST't; CHAR't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_51 => "assert false".

Definition lookahead_set_52 : list terminal :=
  [VOLATILE't; VOID't; VAR_NAME't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; STRUCT't; STAR't; SIGNED't; SHORT't; SEMICOLON't; RESTRICT't; PACKED't; LPAREN't; LONG't; INT't; FLOAT't; ENUM't; DOUBLE't; CONST't; COLON't; CHAR't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_52 => "assert false".

Definition lookahead_set_53 : list terminal :=
  [VAR_NAME't; STAR't; SEMICOLON't; LPAREN't; COLON't]%list.
Extract Inlined Constant lookahead_set_53 => "assert false".

Definition lookahead_set_54 : list terminal :=
  [SEMICOLON't; COMMA't; COLON't]%list.
Extract Inlined Constant lookahead_set_54 => "assert false".

Definition lookahead_set_55 : list terminal :=
  [SEMICOLON't; PACKED't; COMMA't; COLON't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_55 => "assert false".

Definition lookahead_set_56 : list terminal :=
  [SEMICOLON't; PACKED't; LPAREN't; LBRACK't; COMMA't; COLON't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_56 => "assert false".

Definition lookahead_set_57 : list terminal :=
  [VAR_NAME't; LPAREN't]%list.
Extract Inlined Constant lookahead_set_57 => "assert false".

Definition lookahead_set_58 : list terminal :=
  [SEMICOLON't; COMMA't]%list.
Extract Inlined Constant lookahead_set_58 => "assert false".

Definition lookahead_set_59 : list terminal :=
  [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC_ASSERT't; STATIC't; SIGNED't; SHORT't; SEMICOLON't; RPAREN't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LPAREN't; LONG't; LBRACK't; LBRACE't; INT't; INLINE't; FLOAT't; EXTERN't; EQ't; ENUM't; DOUBLE't; CONST't; COMMA't; COLON't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_59 => "assert false".

Definition lookahead_set_60 : list terminal :=
  [VOLATILE't; VAR_NAME't; STAR't; RPAREN't; RESTRICT't; PACKED't; LPAREN't; LBRACK't; CONST't; COMMA't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_60 => "assert false".

Definition lookahead_set_61 : list terminal :=
  [VAR_NAME't; RPAREN't; LPAREN't; LBRACK't; COMMA't]%list.
Extract Inlined Constant lookahead_set_61 => "assert false".

Definition lookahead_set_62 : list terminal :=
  [VOLATILE't; VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; RPAREN't; RESTRICT't; RBRACK't; PLUS't; PACKED't; MINUS't; LPAREN't; LBRACK't; INC't; DEC't; CONSTANT't; CONST't; COMMA't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; ATTRIBUTE't; AND't; ALIGNOF't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_62 => "assert false".

Definition lookahead_set_63 : list terminal :=
  [RPAREN't; PACKED't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_63 => "assert false".

Definition lookahead_set_64 : list terminal :=
  [RPAREN't; PACKED't; LPAREN't; LBRACK't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_64 => "assert false".

Definition lookahead_set_65 : list terminal :=
  [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC_ASSERT't; STATIC't; SIGNED't; SHORT't; SEMICOLON't; RPAREN't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LONG't; LBRACE't; INT't; INLINE't; FLOAT't; EXTERN't; EQ't; ENUM't; DOUBLE't; CONST't; COMMA't; COLON't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_65 => "assert false".

Definition lookahead_set_66 : list terminal :=
  [VAR_NAME't; STAR't; RPAREN't; LPAREN't; LBRACK't; COMMA't]%list.
Extract Inlined Constant lookahead_set_66 => "assert false".

Definition lookahead_set_67 : list terminal :=
  [VOLATILE't; VOID't; VAR_NAME't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC't; STAR't; SIGNED't; SHORT't; RPAREN't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LPAREN't; LONG't; LBRACK't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; COMMA't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_67 => "assert false".

Definition lookahead_set_68 : list terminal :=
  [VAR_NAME't; STAR't; SEMICOLON't; RPAREN't; LPAREN't; LBRACK't; COMMA't]%list.
Extract Inlined Constant lookahead_set_68 => "assert false".

Definition lookahead_set_69 : list terminal :=
  [RPAREN't; PACKED't; COMMA't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_69 => "assert false".

Definition lookahead_set_70 : list terminal :=
  [RPAREN't; LPAREN't; LBRACK't; COMMA't]%list.
Extract Inlined Constant lookahead_set_70 => "assert false".

Definition lookahead_set_71 : list terminal :=
  [RPAREN't; PACKED't; LPAREN't; LBRACK't; COMMA't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_71 => "assert false".

Definition lookahead_set_72 : list terminal :=
  [RPAREN't; LPAREN't; LBRACK't]%list.
Extract Inlined Constant lookahead_set_72 => "assert false".

Definition lookahead_set_73 : list terminal :=
  [VAR_NAME't; RPAREN't; LPAREN't; LBRACK't]%list.
Extract Inlined Constant lookahead_set_73 => "assert false".

Definition lookahead_set_74 : list terminal :=
  [RBRACK't; QUESTION't; HAT't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_74 => "assert false".

Definition lookahead_set_75 : list terminal :=
  [RIGHT't; RBRACK't; QUESTION't; PLUS't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_75 => "assert false".

Definition lookahead_set_76 : list terminal :=
  [RBRACK't]%list.
Extract Inlined Constant lookahead_set_76 => "assert false".

Definition lookahead_set_77 : list terminal :=
  [VOLATILE't; VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; RESTRICT't; RBRACK't; PLUS't; PACKED't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; CONST't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; ATTRIBUTE't; AND't; ALIGNOF't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_77 => "assert false".

Definition lookahead_set_78 : list terminal :=
  [STAR't; SLASH't; RIGHT't; RBRACK't; QUESTION't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_78 => "assert false".

Definition lookahead_set_79 : list terminal :=
  [RBRACK't; QUESTION't; NEQ't; HAT't; EQEQ't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_79 => "assert false".

Definition lookahead_set_80 : list terminal :=
  [RBRACK't; QUESTION't; HAT't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_80 => "assert false".

Definition lookahead_set_81 : list terminal :=
  [RBRACK't; QUESTION't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_81 => "assert false".

Definition lookahead_set_82 : list terminal :=
  [RBRACK't; QUESTION't; BARBAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_82 => "assert false".

Definition lookahead_set_83 : list terminal :=
  [RBRACK't; QUESTION't; BARBAR't]%list.
Extract Inlined Constant lookahead_set_83 => "assert false".

Definition lookahead_set_84 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; RIGHT_ASSIGN't; RIGHT't; RBRACK't; QUESTION't; PTR't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LPAREN't; LEQ't; LEFT_ASSIGN't; LEFT't; LBRACK't; INC't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DOT't; DIV_ASSIGN't; DEC't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_84 => "assert false".

Definition lookahead_set_85 : list terminal :=
  [RBRACK't; QUESTION't; NEQ't; LT't; LEQ't; HAT't; GT't; GEQ't; EQEQ't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_85 => "assert false".

Definition lookahead_set_86 : list terminal :=
  [RIGHT't; RBRACK't; QUESTION't; NEQ't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_86 => "assert false".

Definition lookahead_set_87 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; RIGHT_ASSIGN't; RIGHT't; RBRACK't; QUESTION't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LEQ't; LEFT_ASSIGN't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DIV_ASSIGN't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_87 => "assert false".

Definition lookahead_set_88 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; RBRACE't; COMMA't; COLON't]%list.
Extract Inlined Constant lookahead_set_88 => "assert false".

Definition lookahead_set_89 : list terminal :=
  [STAR't; SLASH't; SEMICOLON't; RPAREN't; RIGHT't; RBRACK't; RBRACE't; QUESTION't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_89 => "assert false".

Definition lookahead_set_90 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; RBRACE't; QUESTION't; HAT't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_90 => "assert false".

Definition lookahead_set_91 : list terminal :=
  [SEMICOLON't; RPAREN't; RIGHT't; RBRACK't; RBRACE't; QUESTION't; PLUS't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_91 => "assert false".

Definition lookahead_set_92 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; RBRACE't; QUESTION't; NEQ't; HAT't; EQEQ't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_92 => "assert false".

Definition lookahead_set_93 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; RBRACE't; QUESTION't; HAT't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_93 => "assert false".

Definition lookahead_set_94 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; RBRACE't; QUESTION't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_94 => "assert false".

Definition lookahead_set_95 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; RBRACE't; QUESTION't; COMMA't; COLON't; BARBAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_95 => "assert false".

Definition lookahead_set_96 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; RBRACE't; QUESTION't; COMMA't; COLON't; BARBAR't]%list.
Extract Inlined Constant lookahead_set_96 => "assert false".

Definition lookahead_set_97 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; RBRACE't; QUESTION't; NEQ't; LT't; LEQ't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_97 => "assert false".

Definition lookahead_set_98 : list terminal :=
  [SEMICOLON't; RPAREN't; RIGHT't; RBRACK't; RBRACE't; QUESTION't; NEQ't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_98 => "assert false".

Definition lookahead_set_99 : list terminal :=
  [STAR't; SLASH't; SEMICOLON't; RPAREN't; RIGHT't; RBRACK't; RBRACE't; QUESTION't; PTR't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LPAREN't; LEQ't; LEFT't; LBRACK't; INC't; HAT't; GT't; GEQ't; EQEQ't; DOT't; DEC't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_99 => "assert false".

Definition lookahead_set_100 : list terminal :=
  [QUESTION't; HAT't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_100 => "assert false".

Definition lookahead_set_101 : list terminal :=
  [RIGHT't; QUESTION't; PLUS't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_101 => "assert false".

Definition lookahead_set_102 : list terminal :=
  [COMMA't; COLON't]%list.
Extract Inlined Constant lookahead_set_102 => "assert false".

Definition lookahead_set_103 : list terminal :=
  [STAR't; SLASH't; RIGHT't; QUESTION't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_103 => "assert false".

Definition lookahead_set_104 : list terminal :=
  [QUESTION't; NEQ't; HAT't; EQEQ't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_104 => "assert false".

Definition lookahead_set_105 : list terminal :=
  [QUESTION't; HAT't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_105 => "assert false".

Definition lookahead_set_106 : list terminal :=
  [QUESTION't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_106 => "assert false".

Definition lookahead_set_107 : list terminal :=
  [QUESTION't; COMMA't; COLON't; BARBAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_107 => "assert false".

Definition lookahead_set_108 : list terminal :=
  [QUESTION't; COMMA't; COLON't; BARBAR't]%list.
Extract Inlined Constant lookahead_set_108 => "assert false".

Definition lookahead_set_109 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; RIGHT_ASSIGN't; RIGHT't; QUESTION't; PTR't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LPAREN't; LEQ't; LEFT_ASSIGN't; LEFT't; LBRACK't; INC't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DOT't; DIV_ASSIGN't; DEC't; COMMA't; COLON't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_109 => "assert false".

Definition lookahead_set_110 : list terminal :=
  [QUESTION't; NEQ't; LT't; LEQ't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_110 => "assert false".

Definition lookahead_set_111 : list terminal :=
  [RIGHT't; QUESTION't; NEQ't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_111 => "assert false".

Definition lookahead_set_112 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; RIGHT_ASSIGN't; RIGHT't; QUESTION't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LEQ't; LEFT_ASSIGN't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DIV_ASSIGN't; COMMA't; COLON't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_112 => "assert false".

Definition lookahead_set_113 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; QUESTION't; HAT't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_113 => "assert false".

Definition lookahead_set_114 : list terminal :=
  [SEMICOLON't; RPAREN't; RIGHT't; RBRACK't; QUESTION't; PLUS't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_114 => "assert false".

Definition lookahead_set_115 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; COMMA't; COLON't]%list.
Extract Inlined Constant lookahead_set_115 => "assert false".

Definition lookahead_set_116 : list terminal :=
  [STAR't; SLASH't; SEMICOLON't; RPAREN't; RIGHT't; RBRACK't; QUESTION't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_116 => "assert false".

Definition lookahead_set_117 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; QUESTION't; NEQ't; HAT't; EQEQ't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_117 => "assert false".

Definition lookahead_set_118 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; QUESTION't; HAT't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_118 => "assert false".

Definition lookahead_set_119 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; QUESTION't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_119 => "assert false".

Definition lookahead_set_120 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; QUESTION't; COMMA't; COLON't; BARBAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_120 => "assert false".

Definition lookahead_set_121 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; QUESTION't; COMMA't; COLON't; BARBAR't]%list.
Extract Inlined Constant lookahead_set_121 => "assert false".

Definition lookahead_set_122 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; SEMICOLON't; RPAREN't; RIGHT_ASSIGN't; RIGHT't; RBRACK't; QUESTION't; PTR't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LPAREN't; LEQ't; LEFT_ASSIGN't; LEFT't; LBRACK't; INC't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DOT't; DIV_ASSIGN't; DEC't; COMMA't; COLON't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_122 => "assert false".

Definition lookahead_set_123 : list terminal :=
  [SEMICOLON't; RPAREN't; RBRACK't; QUESTION't; NEQ't; LT't; LEQ't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_123 => "assert false".

Definition lookahead_set_124 : list terminal :=
  [SEMICOLON't; RPAREN't; RIGHT't; RBRACK't; QUESTION't; NEQ't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_124 => "assert false".

Definition lookahead_set_125 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; SEMICOLON't; RPAREN't; RIGHT_ASSIGN't; RIGHT't; RBRACK't; QUESTION't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LEQ't; LEFT_ASSIGN't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DIV_ASSIGN't; COMMA't; COLON't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_125 => "assert false".

Definition lookahead_set_126 : list terminal :=
  [RBRACK't; QUESTION't; HAT't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_126 => "assert false".

Definition lookahead_set_127 : list terminal :=
  [RIGHT't; RBRACK't; QUESTION't; PLUS't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_127 => "assert false".

Definition lookahead_set_128 : list terminal :=
  [RBRACK't; COMMA't]%list.
Extract Inlined Constant lookahead_set_128 => "assert false".

Definition lookahead_set_129 : list terminal :=
  [STAR't; SLASH't; RIGHT't; RBRACK't; QUESTION't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_129 => "assert false".

Definition lookahead_set_130 : list terminal :=
  [RBRACK't; QUESTION't; NEQ't; HAT't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_130 => "assert false".

Definition lookahead_set_131 : list terminal :=
  [RBRACK't; QUESTION't; HAT't; COMMA't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_131 => "assert false".

Definition lookahead_set_132 : list terminal :=
  [RBRACK't; QUESTION't; COMMA't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_132 => "assert false".

Definition lookahead_set_133 : list terminal :=
  [RBRACK't; QUESTION't; COMMA't; BARBAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_133 => "assert false".

Definition lookahead_set_134 : list terminal :=
  [RBRACK't; QUESTION't; COMMA't; BARBAR't]%list.
Extract Inlined Constant lookahead_set_134 => "assert false".

Definition lookahead_set_135 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; RIGHT_ASSIGN't; RIGHT't; RBRACK't; QUESTION't; PTR't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LPAREN't; LEQ't; LEFT_ASSIGN't; LEFT't; LBRACK't; INC't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DOT't; DIV_ASSIGN't; DEC't; COMMA't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_135 => "assert false".

Definition lookahead_set_136 : list terminal :=
  [RBRACK't; QUESTION't; NEQ't; LT't; LEQ't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_136 => "assert false".

Definition lookahead_set_137 : list terminal :=
  [RIGHT't; RBRACK't; QUESTION't; NEQ't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_137 => "assert false".

Definition lookahead_set_138 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; RIGHT_ASSIGN't; RIGHT't; RBRACK't; QUESTION't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LEQ't; LEFT_ASSIGN't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DIV_ASSIGN't; COMMA't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_138 => "assert false".

Definition lookahead_set_139 : list terminal :=
  [SEMICOLON't; RPAREN't; PACKED't; EQ't; COMMA't; COLON't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_139 => "assert false".

Definition lookahead_set_140 : list terminal :=
  [SEMICOLON't; RPAREN't; EQ't; COMMA't; COLON't]%list.
Extract Inlined Constant lookahead_set_140 => "assert false".

Definition lookahead_set_141 : list terminal :=
  [SEMICOLON't; RPAREN't; LBRACE't; EQ't; COMMA't; COLON't]%list.
Extract Inlined Constant lookahead_set_141 => "assert false".

Definition lookahead_set_142 : list terminal :=
  [SEMICOLON't; RPAREN't; PACKED't; OTHER_NAME't; LBRACE't; EQ't; COMMA't; COLON't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_142 => "assert false".

Definition lookahead_set_143 : list terminal :=
  [SEMICOLON't; RPAREN't; OTHER_NAME't; LBRACE't; EQ't; COMMA't; COLON't]%list.
Extract Inlined Constant lookahead_set_143 => "assert false".

Definition lookahead_set_144 : list terminal :=
  [SEMICOLON't; QUESTION't; HAT't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_144 => "assert false".

Definition lookahead_set_145 : list terminal :=
  [SEMICOLON't; RIGHT't; QUESTION't; PLUS't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_145 => "assert false".

Definition lookahead_set_146 : list terminal :=
  [STAR't; SLASH't; SEMICOLON't; RIGHT't; QUESTION't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_146 => "assert false".

Definition lookahead_set_147 : list terminal :=
  [SEMICOLON't; QUESTION't; NEQ't; HAT't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_147 => "assert false".

Definition lookahead_set_148 : list terminal :=
  [SEMICOLON't; QUESTION't; HAT't; COMMA't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_148 => "assert false".

Definition lookahead_set_149 : list terminal :=
  [SEMICOLON't; QUESTION't; COMMA't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_149 => "assert false".

Definition lookahead_set_150 : list terminal :=
  [SEMICOLON't; QUESTION't; COMMA't; BARBAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_150 => "assert false".

Definition lookahead_set_151 : list terminal :=
  [SEMICOLON't; QUESTION't; COMMA't; BARBAR't]%list.
Extract Inlined Constant lookahead_set_151 => "assert false".

Definition lookahead_set_152 : list terminal :=
  [STAR't; SLASH't; SEMICOLON't; RIGHT't; QUESTION't; PTR't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LPAREN't; LEQ't; LEFT't; LBRACK't; INC't; HAT't; GT't; GEQ't; EQEQ't; DOT't; DEC't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_152 => "assert false".

Definition lookahead_set_153 : list terminal :=
  [SEMICOLON't; QUESTION't; NEQ't; LT't; LEQ't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_153 => "assert false".

Definition lookahead_set_154 : list terminal :=
  [SEMICOLON't; RIGHT't; QUESTION't; NEQ't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_154 => "assert false".

Definition lookahead_set_155 : list terminal :=
  [SEMICOLON't; RBRACK't; RBRACE't; COMMA't; COLON't]%list.
Extract Inlined Constant lookahead_set_155 => "assert false".

Definition lookahead_set_156 : list terminal :=
  [RPAREN't; LBRACK't; DOT't]%list.
Extract Inlined Constant lookahead_set_156 => "assert false".

Definition lookahead_set_157 : list terminal :=
  [RPAREN't; LBRACK't; EQ't; DOT't]%list.
Extract Inlined Constant lookahead_set_157 => "assert false".

Definition lookahead_set_158 : list terminal :=
  [STAR't; SLASH't; RIGHT't; RBRACK't; QUESTION't; PTR't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LPAREN't; LEQ't; LEFT't; LBRACK't; INC't; HAT't; GT't; GEQ't; EQEQ't; DOT't; DEC't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_158 => "assert false".

Definition lookahead_set_159 : list terminal :=
  [RBRACE't; EQ't; COMMA't]%list.
Extract Inlined Constant lookahead_set_159 => "assert false".

Definition lookahead_set_160 : list terminal :=
  [RBRACE't; COMMA't]%list.
Extract Inlined Constant lookahead_set_160 => "assert false".

Definition lookahead_set_161 : list terminal :=
  [RBRACE't; QUESTION't; HAT't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_161 => "assert false".

Definition lookahead_set_162 : list terminal :=
  [RIGHT't; RBRACE't; QUESTION't; PLUS't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_162 => "assert false".

Definition lookahead_set_163 : list terminal :=
  [STAR't; SLASH't; RIGHT't; RBRACE't; QUESTION't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_163 => "assert false".

Definition lookahead_set_164 : list terminal :=
  [RBRACE't; QUESTION't; NEQ't; HAT't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_164 => "assert false".

Definition lookahead_set_165 : list terminal :=
  [RBRACE't; QUESTION't; HAT't; COMMA't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_165 => "assert false".

Definition lookahead_set_166 : list terminal :=
  [RBRACE't; QUESTION't; COMMA't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_166 => "assert false".

Definition lookahead_set_167 : list terminal :=
  [RBRACE't; QUESTION't; COMMA't; BARBAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_167 => "assert false".

Definition lookahead_set_168 : list terminal :=
  [RBRACE't; QUESTION't; COMMA't; BARBAR't]%list.
Extract Inlined Constant lookahead_set_168 => "assert false".

Definition lookahead_set_169 : list terminal :=
  [STAR't; SLASH't; RIGHT't; RBRACE't; QUESTION't; PTR't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LPAREN't; LEQ't; LEFT't; LBRACK't; INC't; HAT't; GT't; GEQ't; EQEQ't; DOT't; DEC't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_169 => "assert false".

Definition lookahead_set_170 : list terminal :=
  [RBRACE't; QUESTION't; NEQ't; LT't; LEQ't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_170 => "assert false".

Definition lookahead_set_171 : list terminal :=
  [RIGHT't; RBRACE't; QUESTION't; NEQ't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COMMA't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_171 => "assert false".

Definition lookahead_set_172 : list terminal :=
  [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; PLUS't; MINUS't; LPAREN't; LBRACE't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list.
Extract Inlined Constant lookahead_set_172 => "assert false".

Definition lookahead_set_173 : list terminal :=
  [LBRACK't; EQ't; DOT't]%list.
Extract Inlined Constant lookahead_set_173 => "assert false".

Definition lookahead_set_174 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; RIGHT_ASSIGN't; RIGHT't; RBRACE't; QUESTION't; PTR't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LPAREN't; LEQ't; LEFT_ASSIGN't; LEFT't; LBRACK't; INC't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DOT't; DIV_ASSIGN't; DEC't; COMMA't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_174 => "assert false".

Definition lookahead_set_175 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; RIGHT_ASSIGN't; RIGHT't; RBRACE't; QUESTION't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LEQ't; LEFT_ASSIGN't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DIV_ASSIGN't; COMMA't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_175 => "assert false".

Definition lookahead_set_176 : list terminal :=
  [SEMICOLON't; RBRACE't; COMMA't]%list.
Extract Inlined Constant lookahead_set_176 => "assert false".

Definition lookahead_set_177 : list terminal :=
  [SEMICOLON't; LBRACE't; EQ't; COMMA't]%list.
Extract Inlined Constant lookahead_set_177 => "assert false".

Definition lookahead_set_178 : list terminal :=
  [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC_ASSERT't; STATIC't; SIGNED't; SHORT't; SEMICOLON't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LONG't; LBRACE't; INT't; INLINE't; FLOAT't; EXTERN't; EQ't; ENUM't; DOUBLE't; CONST't; COMMA't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_178 => "assert false".

Definition lookahead_set_179 : list terminal :=
  [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC_ASSERT't; STATIC't; SIGNED't; SHORT't; SEMICOLON't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LPAREN't; LONG't; LBRACK't; LBRACE't; INT't; INLINE't; FLOAT't; EXTERN't; EQ't; ENUM't; DOUBLE't; CONST't; COMMA't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_179 => "assert false".

Definition lookahead_set_180 : list terminal :=
  [SEMICOLON't; EQ't; COMMA't]%list.
Extract Inlined Constant lookahead_set_180 => "assert false".

Definition lookahead_set_181 : list terminal :=
  [SEMICOLON't; PACKED't; EQ't; COMMA't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_181 => "assert false".

Definition lookahead_set_182 : list terminal :=
  [SEMICOLON't; PACKED't; LPAREN't; LBRACK't; EQ't; COMMA't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_182 => "assert false".

Definition lookahead_set_183 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; SEMICOLON't; RIGHT_ASSIGN't; RIGHT't; QUESTION't; PTR't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LPAREN't; LEQ't; LEFT_ASSIGN't; LEFT't; LBRACK't; INC't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DOT't; DIV_ASSIGN't; DEC't; COMMA't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_183 => "assert false".

Definition lookahead_set_184 : list terminal :=
  [XOR_ASSIGN't; SUB_ASSIGN't; STAR't; SLASH't; SEMICOLON't; RIGHT_ASSIGN't; RIGHT't; QUESTION't; PLUS't; PERCENT't; OR_ASSIGN't; NEQ't; MUL_ASSIGN't; MOD_ASSIGN't; MINUS't; LT't; LEQ't; LEFT_ASSIGN't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; EQ't; DIV_ASSIGN't; COMMA't; BARBAR't; BAR't; AND_ASSIGN't; ANDAND't; AND't; ADD_ASSIGN't]%list.
Extract Inlined Constant lookahead_set_184 => "assert false".

Definition lookahead_set_185 : list terminal :=
  [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC't; SIGNED't; SHORT't; SEMICOLON't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LONG't; LBRACE't; INT't; INLINE't; FLOAT't; EXTERN't; EQ't; ENUM't; DOUBLE't; CONST't; COMMA't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_185 => "assert false".

Definition lookahead_set_186 : list terminal :=
  [VOLATILE't; VOID't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; STRUCT't; STATIC_ASSERT't; STATIC't; SIGNED't; SHORT't; RESTRICT't; REGISTER't; PACKED't; NORETURN't; LONG't; LBRACE't; INT't; INLINE't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; CONST't; CHAR't; AUTO't; ATTRIBUTE't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_186 => "assert false".

Definition lookahead_set_187 : list terminal :=
  [WHILE't; VOLATILE't; VOID't; VAR_NAME't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; TILDE't; SWITCH't; STRUCT't; STRING_LITERAL't; STATIC_ASSERT't; STATIC't; STAR't; SIZEOF't; SIGNED't; SHORT't; SEMICOLON't; RETURN't; RESTRICT't; REGISTER't; RBRACE't; PRAGMA't; PLUS't; PACKED't; OTHER_NAME't; NORETURN't; MINUS't; LPAREN't; LONG't; LBRACE't; INT't; INLINE't; INC't; IF_'t; GOTO't; FOR't; FLOAT't; EXTERN't; ENUM't; DOUBLE't; DO't; DEFAULT't; DEC't; CONTINUE't; CONSTANT't; CONST't; CHAR't; CASE't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BREAK't; BANG't; AUTO't; ATTRIBUTE't; ASM't; AND't; ALIGNOF't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_187 => "assert false".

Definition lookahead_set_188 : list terminal :=
  [WHILE't; VOLATILE't; VOID't; VAR_NAME't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; TILDE't; SWITCH't; STRUCT't; STRING_LITERAL't; STATIC_ASSERT't; STATIC't; STAR't; SIZEOF't; SIGNED't; SHORT't; SEMICOLON't; RETURN't; RESTRICT't; REGISTER't; RBRACE't; PRAGMA't; PLUS't; PACKED't; OTHER_NAME't; NORETURN't; MINUS't; LPAREN't; LONG't; LBRACE't; INT't; INLINE't; INC't; IF_'t; GOTO't; FOR't; FLOAT't; EXTERN't; EOF't; ENUM't; ELSE't; DOUBLE't; DO't; DEFAULT't; DEC't; CONTINUE't; CONSTANT't; CONST't; CHAR't; CASE't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BREAK't; BANG't; AUTO't; ATTRIBUTE't; ASM't; AND't; ALIGNOF't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_188 => "assert false".

Definition lookahead_set_189 : list terminal :=
  [WHILE't; VOLATILE't; VOID't; VAR_NAME't; UNSIGNED't; UNION't; UNDERSCORE_BOOL't; TYPEDEF_NAME't; TYPEDEF't; TILDE't; SWITCH't; STRUCT't; STRING_LITERAL't; STATIC_ASSERT't; STATIC't; STAR't; SIZEOF't; SIGNED't; SHORT't; SEMICOLON't; RETURN't; RESTRICT't; REGISTER't; RBRACE't; PRAGMA't; PLUS't; PACKED't; OTHER_NAME't; NORETURN't; MINUS't; LPAREN't; LONG't; LBRACE't; INT't; INLINE't; INC't; IF_'t; GOTO't; FOR't; FLOAT't; EXTERN't; ENUM't; ELSE't; DOUBLE't; DO't; DEFAULT't; DEC't; CONTINUE't; CONSTANT't; CONST't; CHAR't; CASE't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BREAK't; BANG't; AUTO't; ATTRIBUTE't; ASM't; AND't; ALIGNOF't; ALIGNAS't]%list.
Extract Inlined Constant lookahead_set_189 => "assert false".

Definition lookahead_set_190 : list terminal :=
  [ELSE't]%list.
Extract Inlined Constant lookahead_set_190 => "assert false".

Definition lookahead_set_191 : list terminal :=
  [VAR_NAME't; TILDE't; STRING_LITERAL't; STAR't; SIZEOF't; SEMICOLON't; PLUS't; MINUS't; LPAREN't; INC't; DEC't; CONSTANT't; BUILTIN_VA_ARG't; BUILTIN_OFFSETOF't; BANG't; AND't; ALIGNOF't]%list.
Extract Inlined Constant lookahead_set_191 => "assert false".

Definition lookahead_set_192 : list terminal :=
  [WHILE't]%list.
Extract Inlined Constant lookahead_set_192 => "assert false".

Definition lookahead_set_193 : list terminal :=
  [QUESTION't; HAT't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_193 => "assert false".

Definition lookahead_set_194 : list terminal :=
  [RIGHT't; QUESTION't; PLUS't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_194 => "assert false".

Definition lookahead_set_195 : list terminal :=
  [STAR't; SLASH't; RIGHT't; QUESTION't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_195 => "assert false".

Definition lookahead_set_196 : list terminal :=
  [COLON't]%list.
Extract Inlined Constant lookahead_set_196 => "assert false".

Definition lookahead_set_197 : list terminal :=
  [QUESTION't; NEQ't; HAT't; EQEQ't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_197 => "assert false".

Definition lookahead_set_198 : list terminal :=
  [QUESTION't; HAT't; COLON't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_198 => "assert false".

Definition lookahead_set_199 : list terminal :=
  [QUESTION't; COLON't; BARBAR't; BAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_199 => "assert false".

Definition lookahead_set_200 : list terminal :=
  [QUESTION't; COLON't; BARBAR't; ANDAND't]%list.
Extract Inlined Constant lookahead_set_200 => "assert false".

Definition lookahead_set_201 : list terminal :=
  [QUESTION't; COLON't; BARBAR't]%list.
Extract Inlined Constant lookahead_set_201 => "assert false".

Definition lookahead_set_202 : list terminal :=
  [STAR't; SLASH't; RIGHT't; QUESTION't; PTR't; PLUS't; PERCENT't; NEQ't; MINUS't; LT't; LPAREN't; LEQ't; LEFT't; LBRACK't; INC't; HAT't; GT't; GEQ't; EQEQ't; DOT't; DEC't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_202 => "assert false".

Definition lookahead_set_203 : list terminal :=
  [QUESTION't; NEQ't; LT't; LEQ't; HAT't; GT't; GEQ't; EQEQ't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_203 => "assert false".

Definition lookahead_set_204 : list terminal :=
  [RIGHT't; QUESTION't; NEQ't; LT't; LEQ't; LEFT't; HAT't; GT't; GEQ't; EQEQ't; COLON't; BARBAR't; BAR't; ANDAND't; AND't]%list.
Extract Inlined Constant lookahead_set_204 => "assert false".

Definition lookahead_set_205 : list terminal :=
  [LPAREN't]%list.
Extract Inlined Constant lookahead_set_205 => "assert false".

Definition lookahead_set_206 : list terminal :=
  [STRING_LITERAL't]%list.
Extract Inlined Constant lookahead_set_206 => "assert false".

Definition lookahead_set_207 : list terminal :=
  [RPAREN't; COMMA't; COLON't]%list.
Extract Inlined Constant lookahead_set_207 => "assert false".

Definition lookahead_set_208 : list terminal :=
  [RPAREN't; COLON't]%list.
Extract Inlined Constant lookahead_set_208 => "assert false".

Definition items_of_state_0 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'external_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'external_declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'external_declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'function_definition'0; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'function_definition'1; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'translation_unit'0; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'translation_unit'1; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'translation_unit'2; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'translation_unit'3; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'translation_unit_file'0; dot_pos_item := 0; lookaheads_item := lookahead_set_6 |};
    {| prod_item := Prod'translation_unit_file'1; dot_pos_item := 0; lookaheads_item := lookahead_set_6 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |} ]%list.
Extract Inlined Constant items_of_state_0 => "assert false".

Definition items_of_state_1 : list item :=
  [ {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 1; lookaheads_item := lookahead_set_7 |} ]%list.
Extract Inlined Constant items_of_state_1 => "assert false".

Definition items_of_state_2 : list item :=
  [ {| prod_item := Prod'type_specifier'0; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_2 => "assert false".

Definition items_of_state_3 : list item :=
  [ {| prod_item := Prod'type_specifier'8; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_3 => "assert false".

Definition items_of_state_4 : list item :=
  [ {| prod_item := Prod'struct_or_union'1; dot_pos_item := 1; lookaheads_item := lookahead_set_5 |} ]%list.
Extract Inlined Constant items_of_state_4 => "assert false".

Definition items_of_state_5 : list item :=
  [ {| prod_item := Prod'type_specifier'9; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_5 => "assert false".

Definition items_of_state_6 : list item :=
  [ {| prod_item := Prod'type_specifier'12; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_6 => "assert false".

Definition items_of_state_7 : list item :=
  [ {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 1; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_7 => "assert false".

Definition items_of_state_8 : list item :=
  [ {| prod_item := Prod'struct_or_union'0; dot_pos_item := 1; lookaheads_item := lookahead_set_5 |} ]%list.
Extract Inlined Constant items_of_state_8 => "assert false".

Definition items_of_state_9 : list item :=
  [ {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 1; lookaheads_item := lookahead_set_10 |} ]%list.
Extract Inlined Constant items_of_state_9 => "assert false".

Definition items_of_state_10 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_11 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_11 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_12 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_12 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_12 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_14 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_14 |};
    {| prod_item := Prod'constant_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_14 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_15 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_15 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_15 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_16 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_16 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_17 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_17 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_18 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_18 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_19 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_19 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_20 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_21 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_21 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_21 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_21 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_21 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_22 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_22 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_22 |};
    {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 2; lookaheads_item := lookahead_set_10 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_10 => "assert false".

Definition items_of_state_11 : list item :=
  [ {| prod_item := Prod'primary_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_11 => "assert false".

Definition items_of_state_12 : list item :=
  [ {| prod_item := Prod'unary_operator'4; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_12 => "assert false".

Definition items_of_state_13 : list item :=
  [ {| prod_item := Prod'primary_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_13 => "assert false".

Definition items_of_state_14 : list item :=
  [ {| prod_item := Prod'unary_operator'1; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_14 => "assert false".

Definition items_of_state_15 : list item :=
  [ {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 1; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 1; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_15 => "assert false".

Definition items_of_state_16 : list item :=
  [ {| prod_item := Prod'unary_operator'2; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_16 => "assert false".

Definition items_of_state_17 : list item :=
  [ {| prod_item := Prod'unary_operator'3; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_17 => "assert false".

Definition items_of_state_18 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'specifier_qualifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'2; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'3; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_name'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'type_name'1; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 2; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_18 => "assert false".

Definition items_of_state_19 : list item :=
  [ {| prod_item := Prod'type_specifier'7; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_19 => "assert false".

Definition items_of_state_20 : list item :=
  [ {| prod_item := Prod'type_specifier'2; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_20 => "assert false".

Definition items_of_state_21 : list item :=
  [ {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 1; lookaheads_item := lookahead_set_7 |} ]%list.
Extract Inlined Constant items_of_state_21 => "assert false".

Definition items_of_state_22 : list item :=
  [ {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 1; lookaheads_item := lookahead_set_42 |} ]%list.
Extract Inlined Constant items_of_state_22 => "assert false".

Definition items_of_state_23 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'argument_expression_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'argument_expression_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 2; lookaheads_item := lookahead_set_42 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_23 => "assert false".

Definition items_of_state_24 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'specifier_qualifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'2; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'3; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_name'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'type_name'1; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_24 => "assert false".

Definition items_of_state_25 : list item :=
  [ {| prod_item := Prod'type_specifier'4; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_25 => "assert false".

Definition items_of_state_26 : list item :=
  [ {| prod_item := Prod'type_specifier'3; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_26 => "assert false".

Definition items_of_state_27 : list item :=
  [ {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_27 => "assert false".

Definition items_of_state_28 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'specifier_qualifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'2; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'3; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_name'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'type_name'1; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_28 => "assert false".

Definition items_of_state_29 : list item :=
  [ {| prod_item := Prod'type_specifier'5; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_29 => "assert false".

Definition items_of_state_30 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'attribute_specifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_43 |};
    {| prod_item := Prod'attribute_specifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_43 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_30 => "assert false".

Definition items_of_state_31 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 1; lookaheads_item := lookahead_set_42 |} ]%list.
Extract Inlined Constant items_of_state_31 => "assert false".

Definition items_of_state_32 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 2; lookaheads_item := lookahead_set_42 |} ]%list.
Extract Inlined Constant items_of_state_32 => "assert false".

Definition items_of_state_33 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 3; lookaheads_item := lookahead_set_42 |};
    {| prod_item := Prod'gcc_attribute'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'gcc_attribute'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'gcc_attribute'2; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'gcc_attribute'3; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'gcc_attribute_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'gcc_attribute_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'gcc_attribute_word'0; dot_pos_item := 0; lookaheads_item := lookahead_set_44 |};
    {| prod_item := Prod'gcc_attribute_word'1; dot_pos_item := 0; lookaheads_item := lookahead_set_44 |};
    {| prod_item := Prod'gcc_attribute_word'2; dot_pos_item := 0; lookaheads_item := lookahead_set_44 |} ]%list.
Extract Inlined Constant items_of_state_33 => "assert false".

Definition items_of_state_34 : list item :=
  [ {| prod_item := Prod'gcc_attribute_word'2; dot_pos_item := 1; lookaheads_item := lookahead_set_44 |} ]%list.
Extract Inlined Constant items_of_state_34 => "assert false".

Definition items_of_state_35 : list item :=
  [ {| prod_item := Prod'gcc_attribute_word'0; dot_pos_item := 1; lookaheads_item := lookahead_set_44 |} ]%list.
Extract Inlined Constant items_of_state_35 => "assert false".

Definition items_of_state_36 : list item :=
  [ {| prod_item := Prod'gcc_attribute_word'1; dot_pos_item := 1; lookaheads_item := lookahead_set_44 |} ]%list.
Extract Inlined Constant items_of_state_36 => "assert false".

Definition items_of_state_37 : list item :=
  [ {| prod_item := Prod'gcc_attribute'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'gcc_attribute'2; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'gcc_attribute'3; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_37 => "assert false".

Definition items_of_state_38 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'argument_expression_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'argument_expression_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'gcc_attribute'2; dot_pos_item := 2; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'gcc_attribute'3; dot_pos_item := 2; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_38 => "assert false".

Definition items_of_state_39 : list item :=
  [ {| prod_item := Prod'gcc_attribute'2; dot_pos_item := 3; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_39 => "assert false".

Definition items_of_state_40 : list item :=
  [ {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_40 => "assert false".

Definition items_of_state_41 : list item :=
  [ {| prod_item := Prod'primary_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_41 => "assert false".

Definition items_of_state_42 : list item :=
  [ {| prod_item := Prod'postfix_expression'4; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_42 => "assert false".

Definition items_of_state_43 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_11 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_11 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_12 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_12 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_12 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_14 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_14 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_14 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_14 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_15 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_15 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_15 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_16 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_16 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_17 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_17 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_18 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_18 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_19 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_19 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_13 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_45 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_21 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_21 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_21 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_21 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_21 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_22 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_22 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_22 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_46 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_46 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_46 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_46 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_46 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_46 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_46 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_43 => "assert false".

Definition items_of_state_44 : list item :=
  [ {| prod_item := Prod'postfix_expression'11; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_44 => "assert false".

Definition items_of_state_45 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'specifier_qualifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_48 |};
    {| prod_item := Prod'specifier_qualifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_48 |};
    {| prod_item := Prod'specifier_qualifier_list'2; dot_pos_item := 0; lookaheads_item := lookahead_set_48 |};
    {| prod_item := Prod'specifier_qualifier_list'3; dot_pos_item := 0; lookaheads_item := lookahead_set_48 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_name'0; dot_pos_item := 0; lookaheads_item := lookahead_set_14 |};
    {| prod_item := Prod'type_name'1; dot_pos_item := 0; lookaheads_item := lookahead_set_14 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_47 |} ]%list.
Extract Inlined Constant items_of_state_45 => "assert false".

Definition items_of_state_46 : list item :=
  [ {| prod_item := Prod'type_specifier'6; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_46 => "assert false".

Definition items_of_state_47 : list item :=
  [ {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 1; lookaheads_item := lookahead_set_7 |} ]%list.
Extract Inlined Constant items_of_state_47 => "assert false".

Definition items_of_state_48 : list item :=
  [ {| prod_item := Prod'type_specifier'1; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_48 => "assert false".

Definition items_of_state_49 : list item :=
  [ {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 1; lookaheads_item := lookahead_set_42 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 1; lookaheads_item := lookahead_set_42 |} ]%list.
Extract Inlined Constant items_of_state_49 => "assert false".

Definition items_of_state_50 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'argument_expression_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'argument_expression_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 2; lookaheads_item := lookahead_set_42 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 2; lookaheads_item := lookahead_set_42 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'specifier_qualifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'2; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'3; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_name'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'type_name'1; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_50 => "assert false".

Definition items_of_state_51 : list item :=
  [ {| prod_item := Prod'unary_operator'5; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_51 => "assert false".

Definition items_of_state_52 : list item :=
  [ {| prod_item := Prod'unary_operator'0; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_52 => "assert false".

Definition items_of_state_53 : list item :=
  [ {| prod_item := Prod'unary_expression'6; dot_pos_item := 1; lookaheads_item := lookahead_set_25 |} ]%list.
Extract Inlined Constant items_of_state_53 => "assert false".

Definition items_of_state_54 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'specifier_qualifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'2; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'3; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_name'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'type_name'1; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 2; lookaheads_item := lookahead_set_25 |} ]%list.
Extract Inlined Constant items_of_state_54 => "assert false".

Definition items_of_state_55 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'specifier_qualifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_50 |};
    {| prod_item := Prod'specifier_qualifier_list'0; dot_pos_item := 1; lookaheads_item := lookahead_set_50 |};
    {| prod_item := Prod'specifier_qualifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_50 |};
    {| prod_item := Prod'specifier_qualifier_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_50 |};
    {| prod_item := Prod'specifier_qualifier_list'2; dot_pos_item := 0; lookaheads_item := lookahead_set_50 |};
    {| prod_item := Prod'specifier_qualifier_list'3; dot_pos_item := 0; lookaheads_item := lookahead_set_50 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |} ]%list.
Extract Inlined Constant items_of_state_55 => "assert false".

Definition items_of_state_56 : list item :=
  [ {| prod_item := Prod'type_qualifier'0; dot_pos_item := 1; lookaheads_item := lookahead_set_7 |} ]%list.
Extract Inlined Constant items_of_state_56 => "assert false".

Definition items_of_state_57 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'specifier_qualifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_50 |};
    {| prod_item := Prod'specifier_qualifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_50 |};
    {| prod_item := Prod'specifier_qualifier_list'2; dot_pos_item := 0; lookaheads_item := lookahead_set_50 |};
    {| prod_item := Prod'specifier_qualifier_list'2; dot_pos_item := 1; lookaheads_item := lookahead_set_50 |};
    {| prod_item := Prod'specifier_qualifier_list'3; dot_pos_item := 0; lookaheads_item := lookahead_set_50 |};
    {| prod_item := Prod'specifier_qualifier_list'3; dot_pos_item := 1; lookaheads_item := lookahead_set_50 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_49 |} ]%list.
Extract Inlined Constant items_of_state_57 => "assert false".

Definition items_of_state_58 : list item :=
  [ {| prod_item := Prod'type_specifier'10; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_58 => "assert false".

Definition items_of_state_59 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'attribute_specifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_43 |};
    {| prod_item := Prod'attribute_specifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_43 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_59 => "assert false".

Definition items_of_state_60 : list item :=
  [ {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 2; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 2; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 2; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_60 => "assert false".

Definition items_of_state_61 : list item :=
  [ {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 3; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 3; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_61 => "assert false".

Definition items_of_state_62 : list item :=
  [ {| prod_item := Prod'struct_declaration_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_declaration_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 4; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_62 => "assert false".

Definition items_of_state_63 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'specifier_qualifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_53 |};
    {| prod_item := Prod'specifier_qualifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_53 |};
    {| prod_item := Prod'specifier_qualifier_list'2; dot_pos_item := 0; lookaheads_item := lookahead_set_53 |};
    {| prod_item := Prod'specifier_qualifier_list'3; dot_pos_item := 0; lookaheads_item := lookahead_set_53 |};
    {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_declaration_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 5; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |} ]%list.
Extract Inlined Constant items_of_state_63 => "assert false".

Definition items_of_state_64 : list item :=
  [ {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 6; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_64 => "assert false".

Definition items_of_state_65 : list item :=
  [ {| prod_item := Prod'struct_declaration_list'1; dot_pos_item := 2; lookaheads_item := lookahead_set_51 |} ]%list.
Extract Inlined Constant items_of_state_65 => "assert false".

Definition items_of_state_66 : list item :=
  [ {| prod_item := Prod'struct_declaration'2; dot_pos_item := 1; lookaheads_item := lookahead_set_51 |} ]%list.
Extract Inlined Constant items_of_state_66 => "assert false".

Definition items_of_state_67 : list item :=
  [ {| prod_item := Prod'declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_54 |};
    {| prod_item := Prod'declarator_noattrend'0; dot_pos_item := 0; lookaheads_item := lookahead_set_55 |};
    {| prod_item := Prod'declarator_noattrend'1; dot_pos_item := 0; lookaheads_item := lookahead_set_55 |};
    {| prod_item := Prod'direct_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'pointer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'3; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'struct_declaration'0; dot_pos_item := 1; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_declaration'1; dot_pos_item := 1; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'struct_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'struct_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'struct_declarator_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'struct_declarator_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |} ]%list.
Extract Inlined Constant items_of_state_67 => "assert false".

Definition items_of_state_68 : list item :=
  [ {| prod_item := Prod'direct_declarator'0; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_68 => "assert false".

Definition items_of_state_69 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'pointer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'pointer'0; dot_pos_item := 1; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'pointer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'pointer'1; dot_pos_item := 1; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'pointer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'pointer'2; dot_pos_item := 1; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'pointer'3; dot_pos_item := 0; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'pointer'3; dot_pos_item := 1; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'type_qualifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'type_qualifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |} ]%list.
Extract Inlined Constant items_of_state_69 => "assert false".

Definition items_of_state_70 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'pointer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'pointer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'pointer'1; dot_pos_item := 2; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'pointer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'pointer'3; dot_pos_item := 0; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'pointer'3; dot_pos_item := 2; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'type_qualifier_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_60 |} ]%list.
Extract Inlined Constant items_of_state_70 => "assert false".

Definition items_of_state_71 : list item :=
  [ {| prod_item := Prod'type_qualifier_list'1; dot_pos_item := 2; lookaheads_item := lookahead_set_62 |} ]%list.
Extract Inlined Constant items_of_state_71 => "assert false".

Definition items_of_state_72 : list item :=
  [ {| prod_item := Prod'pointer'3; dot_pos_item := 3; lookaheads_item := lookahead_set_61 |} ]%list.
Extract Inlined Constant items_of_state_72 => "assert false".

Definition items_of_state_73 : list item :=
  [ {| prod_item := Prod'type_qualifier'1; dot_pos_item := 1; lookaheads_item := lookahead_set_7 |} ]%list.
Extract Inlined Constant items_of_state_73 => "assert false".

Definition items_of_state_74 : list item :=
  [ {| prod_item := Prod'type_qualifier_list'0; dot_pos_item := 1; lookaheads_item := lookahead_set_62 |} ]%list.
Extract Inlined Constant items_of_state_74 => "assert false".

Definition items_of_state_75 : list item :=
  [ {| prod_item := Prod'pointer'2; dot_pos_item := 2; lookaheads_item := lookahead_set_61 |} ]%list.
Extract Inlined Constant items_of_state_75 => "assert false".

Definition items_of_state_76 : list item :=
  [ {| prod_item := Prod'struct_declaration'1; dot_pos_item := 2; lookaheads_item := lookahead_set_51 |} ]%list.
Extract Inlined Constant items_of_state_76 => "assert false".

Definition items_of_state_77 : list item :=
  [ {| prod_item := Prod'declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'declarator_noattrend'0; dot_pos_item := 0; lookaheads_item := lookahead_set_63 |};
    {| prod_item := Prod'declarator_noattrend'1; dot_pos_item := 0; lookaheads_item := lookahead_set_63 |};
    {| prod_item := Prod'direct_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'1; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'pointer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'3; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |} ]%list.
Extract Inlined Constant items_of_state_77 => "assert false".

Definition items_of_state_78 : list item :=
  [ {| prod_item := Prod'declarator_noattrend'1; dot_pos_item := 1; lookaheads_item := lookahead_set_65 |};
    {| prod_item := Prod'direct_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_78 => "assert false".

Definition items_of_state_79 : list item :=
  [ {| prod_item := Prod'declarator_noattrend'1; dot_pos_item := 2; lookaheads_item := lookahead_set_65 |};
    {| prod_item := Prod'direct_declarator'2; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'3; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'4; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'5; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'6; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'7; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'8; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_79 => "assert false".

Definition items_of_state_80 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'direct_declarator'6; dot_pos_item := 2; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'7; dot_pos_item := 2; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'8; dot_pos_item := 2; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'identifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'identifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_type_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'parameter_type_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |} ]%list.
Extract Inlined Constant items_of_state_80 => "assert false".

Definition items_of_state_81 : list item :=
  [ {| prod_item := Prod'identifier_list'0; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_81 => "assert false".

Definition items_of_state_82 : list item :=
  [ {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 1; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_82 => "assert false".

Definition items_of_state_83 : list item :=
  [ {| prod_item := Prod'direct_declarator'7; dot_pos_item := 3; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_83 => "assert false".

Definition items_of_state_84 : list item :=
  [ {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 1; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_84 => "assert false".

Definition items_of_state_85 : list item :=
  [ {| prod_item := Prod'function_specifier'1; dot_pos_item := 1; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_85 => "assert false".

Definition items_of_state_86 : list item :=
  [ {| prod_item := Prod'function_specifier'0; dot_pos_item := 1; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_86 => "assert false".

Definition items_of_state_87 : list item :=
  [ {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 1; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_87 => "assert false".

Definition items_of_state_88 : list item :=
  [ {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 1; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_88 => "assert false".

Definition items_of_state_89 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 1; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'0; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'1; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'2; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'3; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'4; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_89 => "assert false".

Definition items_of_state_90 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'0; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'1; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'1; dot_pos_item := 1; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'2; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'3; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'4; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_90 => "assert false".

Definition items_of_state_91 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'0; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'1; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'2; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'2; dot_pos_item := 1; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'3; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'4; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_91 => "assert false".

Definition items_of_state_92 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'0; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'0; dot_pos_item := 1; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'1; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'2; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'3; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'4; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_92 => "assert false".

Definition items_of_state_93 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'0; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'1; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'2; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'3; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'3; dot_pos_item := 1; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers_typespec_opt'4; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_93 => "assert false".

Definition items_of_state_94 : list item :=
  [ {| prod_item := Prod'type_specifier'11; dot_pos_item := 1; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_94 => "assert false".

Definition items_of_state_95 : list item :=
  [ {| prod_item := Prod'declaration_specifiers_typespec_opt'3; dot_pos_item := 2; lookaheads_item := lookahead_set_68 |} ]%list.
Extract Inlined Constant items_of_state_95 => "assert false".

Definition items_of_state_96 : list item :=
  [ {| prod_item := Prod'declaration_specifiers_typespec_opt'0; dot_pos_item := 2; lookaheads_item := lookahead_set_68 |} ]%list.
Extract Inlined Constant items_of_state_96 => "assert false".

Definition items_of_state_97 : list item :=
  [ {| prod_item := Prod'declaration_specifiers_typespec_opt'2; dot_pos_item := 2; lookaheads_item := lookahead_set_68 |} ]%list.
Extract Inlined Constant items_of_state_97 => "assert false".

Definition items_of_state_98 : list item :=
  [ {| prod_item := Prod'declaration_specifiers_typespec_opt'1; dot_pos_item := 2; lookaheads_item := lookahead_set_68 |} ]%list.
Extract Inlined Constant items_of_state_98 => "assert false".

Definition items_of_state_99 : list item :=
  [ {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 2; lookaheads_item := lookahead_set_68 |} ]%list.
Extract Inlined Constant items_of_state_99 => "assert false".

Definition items_of_state_100 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 1; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_100 => "assert false".

Definition items_of_state_101 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 1; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_101 => "assert false".

Definition items_of_state_102 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 1; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_102 => "assert false".

Definition items_of_state_103 : list item :=
  [ {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 2; lookaheads_item := lookahead_set_68 |} ]%list.
Extract Inlined Constant items_of_state_103 => "assert false".

Definition items_of_state_104 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 1; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_68 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_9 |} ]%list.
Extract Inlined Constant items_of_state_104 => "assert false".

Definition items_of_state_105 : list item :=
  [ {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 2; lookaheads_item := lookahead_set_68 |} ]%list.
Extract Inlined Constant items_of_state_105 => "assert false".

Definition items_of_state_106 : list item :=
  [ {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 2; lookaheads_item := lookahead_set_68 |} ]%list.
Extract Inlined Constant items_of_state_106 => "assert false".

Definition items_of_state_107 : list item :=
  [ {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 2; lookaheads_item := lookahead_set_68 |} ]%list.
Extract Inlined Constant items_of_state_107 => "assert false".

Definition items_of_state_108 : list item :=
  [ {| prod_item := Prod'direct_declarator'6; dot_pos_item := 3; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_108 => "assert false".

Definition items_of_state_109 : list item :=
  [ {| prod_item := Prod'direct_declarator'6; dot_pos_item := 4; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_109 => "assert false".

Definition items_of_state_110 : list item :=
  [ {| prod_item := Prod'parameter_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_type_list'0; dot_pos_item := 1; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'parameter_type_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_40 |} ]%list.
Extract Inlined Constant items_of_state_110 => "assert false".

Definition items_of_state_111 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'parameter_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_list'1; dot_pos_item := 2; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_type_list'1; dot_pos_item := 2; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |} ]%list.
Extract Inlined Constant items_of_state_111 => "assert false".

Definition items_of_state_112 : list item :=
  [ {| prod_item := Prod'parameter_type_list'1; dot_pos_item := 3; lookaheads_item := lookahead_set_40 |} ]%list.
Extract Inlined Constant items_of_state_112 => "assert false".

Definition items_of_state_113 : list item :=
  [ {| prod_item := Prod'parameter_list'1; dot_pos_item := 3; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_113 => "assert false".

Definition items_of_state_114 : list item :=
  [ {| prod_item := Prod'abstract_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'abstract_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'abstract_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'declarator_noattrend'0; dot_pos_item := 0; lookaheads_item := lookahead_set_69 |};
    {| prod_item := Prod'declarator_noattrend'1; dot_pos_item := 0; lookaheads_item := lookahead_set_69 |};
    {| prod_item := Prod'direct_abstract_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'9; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'10; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'11; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'12; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'parameter_declaration'0; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_declaration'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_declaration'2; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'pointer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'pointer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'pointer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_61 |};
    {| prod_item := Prod'pointer'3; dot_pos_item := 0; lookaheads_item := lookahead_set_61 |} ]%list.
Extract Inlined Constant items_of_state_114 => "assert false".

Definition items_of_state_115 : list item :=
  [ {| prod_item := Prod'abstract_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'abstract_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'abstract_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'declarator_noattrend'0; dot_pos_item := 0; lookaheads_item := lookahead_set_63 |};
    {| prod_item := Prod'declarator_noattrend'1; dot_pos_item := 0; lookaheads_item := lookahead_set_63 |};
    {| prod_item := Prod'direct_abstract_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'0; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'9; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'10; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'10; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'11; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'12; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'12; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'1; dot_pos_item := 1; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'direct_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_64 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'parameter_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_type_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'parameter_type_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'pointer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_73 |};
    {| prod_item := Prod'pointer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_73 |};
    {| prod_item := Prod'pointer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_73 |};
    {| prod_item := Prod'pointer'3; dot_pos_item := 0; lookaheads_item := lookahead_set_73 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |} ]%list.
Extract Inlined Constant items_of_state_115 => "assert false".

Definition items_of_state_116 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'12; dot_pos_item := 2; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_116 => "assert false".

Definition items_of_state_117 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_74 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_74 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'direct_abstract_declarator'2; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'4; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'6; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'8; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_80 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_80 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_81 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_81 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_82 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_82 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_83 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_83 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_117 => "assert false".

Definition items_of_state_118 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'8; dot_pos_item := 2; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_118 => "assert false".

Definition items_of_state_119 : list item :=
  [ {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 1; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_119 => "assert false".

Definition items_of_state_120 : list item :=
  [ {| prod_item := Prod'cast_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_25 |} ]%list.
Extract Inlined Constant items_of_state_120 => "assert false".

Definition items_of_state_121 : list item :=
  [ {| prod_item := Prod'postfix_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_121 => "assert false".

Definition items_of_state_122 : list item :=
  [ {| prod_item := Prod'postfix_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 1; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_25 |} ]%list.
Extract Inlined Constant items_of_state_122 => "assert false".

Definition items_of_state_123 : list item :=
  [ {| prod_item := Prod'postfix_expression'6; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_123 => "assert false".

Definition items_of_state_124 : list item :=
  [ {| prod_item := Prod'postfix_expression'6; dot_pos_item := 3; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_124 => "assert false".

Definition items_of_state_125 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'argument_expression_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'argument_expression_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_125 => "assert false".

Definition items_of_state_126 : list item :=
  [ {| prod_item := Prod'postfix_expression'3; dot_pos_item := 3; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_126 => "assert false".

Definition items_of_state_127 : list item :=
  [ {| prod_item := Prod'assignment_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_88 |};
    {| prod_item := Prod'assignment_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'assignment_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'assignment_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'assignment_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'assignment_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'assignment_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'assignment_operator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'assignment_operator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'assignment_operator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'assignment_operator'9; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'assignment_operator'10; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_89 |} ]%list.
Extract Inlined Constant items_of_state_127 => "assert false".

Definition items_of_state_128 : list item :=
  [ {| prod_item := Prod'assignment_operator'8; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_128 => "assert false".

Definition items_of_state_129 : list item :=
  [ {| prod_item := Prod'assignment_operator'5; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_129 => "assert false".

Definition items_of_state_130 : list item :=
  [ {| prod_item := Prod'assignment_operator'7; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_130 => "assert false".

Definition items_of_state_131 : list item :=
  [ {| prod_item := Prod'assignment_operator'9; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_131 => "assert false".

Definition items_of_state_132 : list item :=
  [ {| prod_item := Prod'assignment_operator'1; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_132 => "assert false".

Definition items_of_state_133 : list item :=
  [ {| prod_item := Prod'assignment_operator'3; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_133 => "assert false".

Definition items_of_state_134 : list item :=
  [ {| prod_item := Prod'assignment_operator'6; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_134 => "assert false".

Definition items_of_state_135 : list item :=
  [ {| prod_item := Prod'assignment_operator'0; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_135 => "assert false".

Definition items_of_state_136 : list item :=
  [ {| prod_item := Prod'assignment_operator'2; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_136 => "assert false".

Definition items_of_state_137 : list item :=
  [ {| prod_item := Prod'assignment_operator'10; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_137 => "assert false".

Definition items_of_state_138 : list item :=
  [ {| prod_item := Prod'assignment_operator'4; dot_pos_item := 1; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_138 => "assert false".

Definition items_of_state_139 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_88 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_88 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_88 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_88 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_88 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_93 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_93 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_94 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_94 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_95 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_95 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_96 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_96 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_139 => "assert false".

Definition items_of_state_140 : list item :=
  [ {| prod_item := Prod'relational_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_98 |} ]%list.
Extract Inlined Constant items_of_state_140 => "assert false".

Definition items_of_state_141 : list item :=
  [ {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 2; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_141 => "assert false".

Definition items_of_state_142 : list item :=
  [ {| prod_item := Prod'additive_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 1; lookaheads_item := lookahead_set_89 |} ]%list.
Extract Inlined Constant items_of_state_142 => "assert false".

Definition items_of_state_143 : list item :=
  [ {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_143 => "assert false".

Definition items_of_state_144 : list item :=
  [ {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 3; lookaheads_item := lookahead_set_89 |} ]%list.
Extract Inlined Constant items_of_state_144 => "assert false".

Definition items_of_state_145 : list item :=
  [ {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 2; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_145 => "assert false".

Definition items_of_state_146 : list item :=
  [ {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 3; lookaheads_item := lookahead_set_89 |} ]%list.
Extract Inlined Constant items_of_state_146 => "assert false".

Definition items_of_state_147 : list item :=
  [ {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 2; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_147 => "assert false".

Definition items_of_state_148 : list item :=
  [ {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 3; lookaheads_item := lookahead_set_89 |} ]%list.
Extract Inlined Constant items_of_state_148 => "assert false".

Definition items_of_state_149 : list item :=
  [ {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_89 |} ]%list.
Extract Inlined Constant items_of_state_149 => "assert false".

Definition items_of_state_150 : list item :=
  [ {| prod_item := Prod'additive_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 3; lookaheads_item := lookahead_set_98 |} ]%list.
Extract Inlined Constant items_of_state_150 => "assert false".

Definition items_of_state_151 : list item :=
  [ {| prod_item := Prod'additive_expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_151 => "assert false".

Definition items_of_state_152 : list item :=
  [ {| prod_item := Prod'additive_expression'1; dot_pos_item := 3; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 1; lookaheads_item := lookahead_set_89 |} ]%list.
Extract Inlined Constant items_of_state_152 => "assert false".

Definition items_of_state_153 : list item :=
  [ {| prod_item := Prod'additive_expression'2; dot_pos_item := 2; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_153 => "assert false".

Definition items_of_state_154 : list item :=
  [ {| prod_item := Prod'additive_expression'2; dot_pos_item := 3; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 1; lookaheads_item := lookahead_set_89 |} ]%list.
Extract Inlined Constant items_of_state_154 => "assert false".

Definition items_of_state_155 : list item :=
  [ {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_155 => "assert false".

Definition items_of_state_156 : list item :=
  [ {| prod_item := Prod'additive_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 3; lookaheads_item := lookahead_set_98 |} ]%list.
Extract Inlined Constant items_of_state_156 => "assert false".

Definition items_of_state_157 : list item :=
  [ {| prod_item := Prod'equality_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 1; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 1; lookaheads_item := lookahead_set_97 |} ]%list.
Extract Inlined Constant items_of_state_157 => "assert false".

Definition items_of_state_158 : list item :=
  [ {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_158 => "assert false".

Definition items_of_state_159 : list item :=
  [ {| prod_item := Prod'relational_expression'1; dot_pos_item := 3; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_98 |} ]%list.
Extract Inlined Constant items_of_state_159 => "assert false".

Definition items_of_state_160 : list item :=
  [ {| prod_item := Prod'additive_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_98 |} ]%list.
Extract Inlined Constant items_of_state_160 => "assert false".

Definition items_of_state_161 : list item :=
  [ {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 2; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_161 => "assert false".

Definition items_of_state_162 : list item :=
  [ {| prod_item := Prod'relational_expression'3; dot_pos_item := 3; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_98 |} ]%list.
Extract Inlined Constant items_of_state_162 => "assert false".

Definition items_of_state_163 : list item :=
  [ {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 2; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_163 => "assert false".

Definition items_of_state_164 : list item :=
  [ {| prod_item := Prod'relational_expression'2; dot_pos_item := 3; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_98 |} ]%list.
Extract Inlined Constant items_of_state_164 => "assert false".

Definition items_of_state_165 : list item :=
  [ {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 2; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_165 => "assert false".

Definition items_of_state_166 : list item :=
  [ {| prod_item := Prod'relational_expression'4; dot_pos_item := 3; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_98 |} ]%list.
Extract Inlined Constant items_of_state_166 => "assert false".

Definition items_of_state_167 : list item :=
  [ {| prod_item := Prod'conditional_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_88 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_88 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_96 |} ]%list.
Extract Inlined Constant items_of_state_167 => "assert false".

Definition items_of_state_168 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_100 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_100 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_101 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_101 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_101 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_102 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_102 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_103 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_103 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_102 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_102 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_88 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_104 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_104 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_104 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_105 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_105 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_102 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_102 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_106 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_106 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_107 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_107 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_108 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_108 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_103 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_103 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_103 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_103 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_109 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_110 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_110 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_110 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_110 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_110 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_111 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_111 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_111 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_112 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_112 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_112 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_112 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_112 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_112 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_112 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_168 => "assert false".

Definition items_of_state_169 : list item :=
  [ {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_95 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_96 |} ]%list.
Extract Inlined Constant items_of_state_169 => "assert false".

Definition items_of_state_170 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_93 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_93 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_94 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_94 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_95 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_170 => "assert false".

Definition items_of_state_171 : list item :=
  [ {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_94 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 3; lookaheads_item := lookahead_set_95 |} ]%list.
Extract Inlined Constant items_of_state_171 => "assert false".

Definition items_of_state_172 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_93 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_93 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_94 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_172 => "assert false".

Definition items_of_state_173 : list item :=
  [ {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_93 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 3; lookaheads_item := lookahead_set_94 |} ]%list.
Extract Inlined Constant items_of_state_173 => "assert false".

Definition items_of_state_174 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_93 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_174 => "assert false".

Definition items_of_state_175 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_92 |} ]%list.
Extract Inlined Constant items_of_state_175 => "assert false".

Definition items_of_state_176 : list item :=
  [ {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 2; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_176 => "assert false".

Definition items_of_state_177 : list item :=
  [ {| prod_item := Prod'equality_expression'2; dot_pos_item := 3; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 1; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 1; lookaheads_item := lookahead_set_97 |} ]%list.
Extract Inlined Constant items_of_state_177 => "assert false".

Definition items_of_state_178 : list item :=
  [ {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_178 => "assert false".

Definition items_of_state_179 : list item :=
  [ {| prod_item := Prod'equality_expression'1; dot_pos_item := 3; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 1; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 1; lookaheads_item := lookahead_set_97 |} ]%list.
Extract Inlined Constant items_of_state_179 => "assert false".

Definition items_of_state_180 : list item :=
  [ {| prod_item := Prod'AND_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 3; lookaheads_item := lookahead_set_93 |} ]%list.
Extract Inlined Constant items_of_state_180 => "assert false".

Definition items_of_state_181 : list item :=
  [ {| prod_item := Prod'AND_expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_181 => "assert false".

Definition items_of_state_182 : list item :=
  [ {| prod_item := Prod'AND_expression'1; dot_pos_item := 3; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 1; lookaheads_item := lookahead_set_92 |} ]%list.
Extract Inlined Constant items_of_state_182 => "assert false".

Definition items_of_state_183 : list item :=
  [ {| prod_item := Prod'AND_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_93 |} ]%list.
Extract Inlined Constant items_of_state_183 => "assert false".

Definition items_of_state_184 : list item :=
  [ {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_93 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_94 |} ]%list.
Extract Inlined Constant items_of_state_184 => "assert false".

Definition items_of_state_185 : list item :=
  [ {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_94 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_95 |} ]%list.
Extract Inlined Constant items_of_state_185 => "assert false".

Definition items_of_state_186 : list item :=
  [ {| prod_item := Prod'conditional_expression'1; dot_pos_item := 3; lookaheads_item := lookahead_set_88 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_102 |} ]%list.
Extract Inlined Constant items_of_state_186 => "assert false".

Definition items_of_state_187 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_113 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_113 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_114 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_114 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_114 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_115 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_115 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_116 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_116 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_115 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_115 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_117 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_117 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_117 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_118 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_118 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_115 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_119 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_119 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_120 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_120 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_121 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_121 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_116 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_116 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_116 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_116 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_122 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_123 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_123 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_123 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_123 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_123 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_124 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_124 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_124 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_125 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_125 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_125 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_125 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_125 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_125 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_125 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_187 => "assert false".

Definition items_of_state_188 : list item :=
  [ {| prod_item := Prod'assignment_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_88 |} ]%list.
Extract Inlined Constant items_of_state_188 => "assert false".

Definition items_of_state_189 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 3; lookaheads_item := lookahead_set_115 |} ]%list.
Extract Inlined Constant items_of_state_189 => "assert false".

Definition items_of_state_190 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_88 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_88 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 4; lookaheads_item := lookahead_set_88 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_93 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_93 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_94 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_94 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_95 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_95 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_96 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_96 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_190 => "assert false".

Definition items_of_state_191 : list item :=
  [ {| prod_item := Prod'conditional_expression'1; dot_pos_item := 5; lookaheads_item := lookahead_set_88 |} ]%list.
Extract Inlined Constant items_of_state_191 => "assert false".

Definition items_of_state_192 : list item :=
  [ {| prod_item := Prod'expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_115 |} ]%list.
Extract Inlined Constant items_of_state_192 => "assert false".

Definition items_of_state_193 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_90 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_91 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_92 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_93 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_93 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_94 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_94 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_95 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_95 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_96 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_99 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_97 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_98 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_89 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_193 => "assert false".

Definition items_of_state_194 : list item :=
  [ {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_95 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 3; lookaheads_item := lookahead_set_96 |} ]%list.
Extract Inlined Constant items_of_state_194 => "assert false".

Definition items_of_state_195 : list item :=
  [ {| prod_item := Prod'assignment_expression'1; dot_pos_item := 3; lookaheads_item := lookahead_set_88 |} ]%list.
Extract Inlined Constant items_of_state_195 => "assert false".

Definition items_of_state_196 : list item :=
  [ {| prod_item := Prod'argument_expression_list'0; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_196 => "assert false".

Definition items_of_state_197 : list item :=
  [ {| prod_item := Prod'argument_expression_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 3; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_197 => "assert false".

Definition items_of_state_198 : list item :=
  [ {| prod_item := Prod'postfix_expression'2; dot_pos_item := 4; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_198 => "assert false".

Definition items_of_state_199 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'argument_expression_list'1; dot_pos_item := 2; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_199 => "assert false".

Definition items_of_state_200 : list item :=
  [ {| prod_item := Prod'argument_expression_list'1; dot_pos_item := 3; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_200 => "assert false".

Definition items_of_state_201 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_126 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_126 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_127 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_127 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_127 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_128 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_128 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_129 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_129 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_128 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_128 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_130 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_130 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_130 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_131 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_131 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_128 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_128 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_132 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_132 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_133 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_133 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_134 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_134 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_129 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_129 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_129 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_129 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_135 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_136 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_136 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_136 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_136 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_136 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_137 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_137 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_137 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_138 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_138 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_138 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_138 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_138 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_138 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_138 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_201 => "assert false".

Definition items_of_state_202 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_128 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 3; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_202 => "assert false".

Definition items_of_state_203 : list item :=
  [ {| prod_item := Prod'postfix_expression'1; dot_pos_item := 4; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_203 => "assert false".

Definition items_of_state_204 : list item :=
  [ {| prod_item := Prod'postfix_expression'7; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_204 => "assert false".

Definition items_of_state_205 : list item :=
  [ {| prod_item := Prod'postfix_expression'5; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_205 => "assert false".

Definition items_of_state_206 : list item :=
  [ {| prod_item := Prod'postfix_expression'5; dot_pos_item := 3; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_206 => "assert false".

Definition items_of_state_207 : list item :=
  [ {| prod_item := Prod'postfix_expression'8; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_207 => "assert false".

Definition items_of_state_208 : list item :=
  [ {| prod_item := Prod'unary_expression'3; dot_pos_item := 2; lookaheads_item := lookahead_set_25 |} ]%list.
Extract Inlined Constant items_of_state_208 => "assert false".

Definition items_of_state_209 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_74 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_74 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'direct_abstract_declarator'2; dot_pos_item := 2; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'6; dot_pos_item := 2; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_80 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_80 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_81 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_81 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_82 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_82 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_83 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_83 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_209 => "assert false".

Definition items_of_state_210 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'6; dot_pos_item := 3; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_210 => "assert false".

Definition items_of_state_211 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'2; dot_pos_item := 3; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_211 => "assert false".

Definition items_of_state_212 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'2; dot_pos_item := 4; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_212 => "assert false".

Definition items_of_state_213 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'4; dot_pos_item := 2; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_213 => "assert false".

Definition items_of_state_214 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'4; dot_pos_item := 3; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_214 => "assert false".

Definition items_of_state_215 : list item :=
  [ {| prod_item := Prod'abstract_declarator'0; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'abstract_declarator'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'declarator_noattrend'1; dot_pos_item := 1; lookaheads_item := lookahead_set_69 |};
    {| prod_item := Prod'direct_abstract_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'9; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'10; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'11; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'12; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |};
    {| prod_item := Prod'direct_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_71 |} ]%list.
Extract Inlined Constant items_of_state_215 => "assert false".

Definition items_of_state_216 : list item :=
  [ {| prod_item := Prod'abstract_declarator'1; dot_pos_item := 2; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'direct_abstract_declarator'1; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'3; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'5; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'7; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'9; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'11; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_216 => "assert false".

Definition items_of_state_217 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'direct_abstract_declarator'9; dot_pos_item := 2; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'11; dot_pos_item := 2; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'parameter_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_type_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'parameter_type_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |} ]%list.
Extract Inlined Constant items_of_state_217 => "assert false".

Definition items_of_state_218 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'11; dot_pos_item := 3; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_218 => "assert false".

Definition items_of_state_219 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'9; dot_pos_item := 3; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_219 => "assert false".

Definition items_of_state_220 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'9; dot_pos_item := 4; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_220 => "assert false".

Definition items_of_state_221 : list item :=
  [ {| prod_item := Prod'parameter_list'0; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_221 => "assert false".

Definition items_of_state_222 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_74 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_74 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'direct_abstract_declarator'1; dot_pos_item := 2; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'3; dot_pos_item := 2; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'5; dot_pos_item := 2; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'7; dot_pos_item := 2; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_80 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_80 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_81 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_81 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_82 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_82 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_83 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_83 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_222 => "assert false".

Definition items_of_state_223 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'7; dot_pos_item := 3; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_223 => "assert false".

Definition items_of_state_224 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_74 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_74 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'direct_abstract_declarator'1; dot_pos_item := 3; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'5; dot_pos_item := 3; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_80 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_80 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_81 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_81 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_82 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_82 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_83 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_83 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_224 => "assert false".

Definition items_of_state_225 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'5; dot_pos_item := 4; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_225 => "assert false".

Definition items_of_state_226 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'1; dot_pos_item := 4; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_226 => "assert false".

Definition items_of_state_227 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'1; dot_pos_item := 5; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_227 => "assert false".

Definition items_of_state_228 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'3; dot_pos_item := 3; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_228 => "assert false".

Definition items_of_state_229 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'3; dot_pos_item := 4; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_229 => "assert false".

Definition items_of_state_230 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'10; dot_pos_item := 2; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_230 => "assert false".

Definition items_of_state_231 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'10; dot_pos_item := 3; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_231 => "assert false".

Definition items_of_state_232 : list item :=
  [ {| prod_item := Prod'declarator_noattrend'0; dot_pos_item := 1; lookaheads_item := lookahead_set_65 |};
    {| prod_item := Prod'direct_declarator'2; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'3; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'4; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'5; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'6; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'7; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'8; dot_pos_item := 1; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_232 => "assert false".

Definition items_of_state_233 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_74 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_74 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'direct_declarator'2; dot_pos_item := 2; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'3; dot_pos_item := 2; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'4; dot_pos_item := 2; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'5; dot_pos_item := 2; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_80 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_80 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_81 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_81 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_82 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_82 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_83 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_83 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_233 => "assert false".

Definition items_of_state_234 : list item :=
  [ {| prod_item := Prod'direct_declarator'5; dot_pos_item := 3; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_234 => "assert false".

Definition items_of_state_235 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_74 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_74 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'direct_declarator'2; dot_pos_item := 3; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'direct_declarator'4; dot_pos_item := 3; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_80 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_80 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_81 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_81 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_82 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_82 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_83 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_83 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_84 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_77 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_87 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_235 => "assert false".

Definition items_of_state_236 : list item :=
  [ {| prod_item := Prod'direct_declarator'4; dot_pos_item := 4; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_236 => "assert false".

Definition items_of_state_237 : list item :=
  [ {| prod_item := Prod'direct_declarator'2; dot_pos_item := 4; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_237 => "assert false".

Definition items_of_state_238 : list item :=
  [ {| prod_item := Prod'direct_declarator'2; dot_pos_item := 5; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_238 => "assert false".

Definition items_of_state_239 : list item :=
  [ {| prod_item := Prod'direct_declarator'3; dot_pos_item := 3; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_239 => "assert false".

Definition items_of_state_240 : list item :=
  [ {| prod_item := Prod'direct_declarator'3; dot_pos_item := 4; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_240 => "assert false".

Definition items_of_state_241 : list item :=
  [ {| prod_item := Prod'abstract_declarator'2; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'direct_abstract_declarator'1; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'3; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'5; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'7; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'9; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'11; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_241 => "assert false".

Definition items_of_state_242 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_139 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_139 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_139 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_139 |};
    {| prod_item := Prod'attribute_specifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_140 |};
    {| prod_item := Prod'attribute_specifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_140 |};
    {| prod_item := Prod'declarator'0; dot_pos_item := 1; lookaheads_item := lookahead_set_140 |} ]%list.
Extract Inlined Constant items_of_state_242 => "assert false".

Definition items_of_state_243 : list item :=
  [ {| prod_item := Prod'declarator'0; dot_pos_item := 2; lookaheads_item := lookahead_set_141 |} ]%list.
Extract Inlined Constant items_of_state_243 => "assert false".

Definition items_of_state_244 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_142 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_142 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_142 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_142 |};
    {| prod_item := Prod'attribute_specifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_143 |};
    {| prod_item := Prod'attribute_specifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_143 |};
    {| prod_item := Prod'attribute_specifier_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_143 |} ]%list.
Extract Inlined Constant items_of_state_244 => "assert false".

Definition items_of_state_245 : list item :=
  [ {| prod_item := Prod'attribute_specifier_list'1; dot_pos_item := 2; lookaheads_item := lookahead_set_143 |} ]%list.
Extract Inlined Constant items_of_state_245 => "assert false".

Definition items_of_state_246 : list item :=
  [ {| prod_item := Prod'direct_declarator'1; dot_pos_item := 2; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_246 => "assert false".

Definition items_of_state_247 : list item :=
  [ {| prod_item := Prod'direct_declarator'1; dot_pos_item := 3; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_247 => "assert false".

Definition items_of_state_248 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'0; dot_pos_item := 2; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_248 => "assert false".

Definition items_of_state_249 : list item :=
  [ {| prod_item := Prod'direct_abstract_declarator'0; dot_pos_item := 3; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_249 => "assert false".

Definition items_of_state_250 : list item :=
  [ {| prod_item := Prod'parameter_declaration'0; dot_pos_item := 2; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_250 => "assert false".

Definition items_of_state_251 : list item :=
  [ {| prod_item := Prod'parameter_declaration'1; dot_pos_item := 2; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_251 => "assert false".

Definition items_of_state_252 : list item :=
  [ {| prod_item := Prod'direct_declarator'8; dot_pos_item := 3; lookaheads_item := lookahead_set_59 |};
    {| prod_item := Prod'identifier_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_252 => "assert false".

Definition items_of_state_253 : list item :=
  [ {| prod_item := Prod'direct_declarator'8; dot_pos_item := 4; lookaheads_item := lookahead_set_59 |} ]%list.
Extract Inlined Constant items_of_state_253 => "assert false".

Definition items_of_state_254 : list item :=
  [ {| prod_item := Prod'identifier_list'1; dot_pos_item := 2; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_254 => "assert false".

Definition items_of_state_255 : list item :=
  [ {| prod_item := Prod'identifier_list'1; dot_pos_item := 3; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_255 => "assert false".

Definition items_of_state_256 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'constant_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'struct_declarator'2; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_256 => "assert false".

Definition items_of_state_257 : list item :=
  [ {| prod_item := Prod'struct_declarator'2; dot_pos_item := 2; lookaheads_item := lookahead_set_58 |} ]%list.
Extract Inlined Constant items_of_state_257 => "assert false".

Definition items_of_state_258 : list item :=
  [ {| prod_item := Prod'constant_expression'0; dot_pos_item := 1; lookaheads_item := lookahead_set_155 |} ]%list.
Extract Inlined Constant items_of_state_258 => "assert false".

Definition items_of_state_259 : list item :=
  [ {| prod_item := Prod'struct_declaration'0; dot_pos_item := 2; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_declarator_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |} ]%list.
Extract Inlined Constant items_of_state_259 => "assert false".

Definition items_of_state_260 : list item :=
  [ {| prod_item := Prod'struct_declaration'0; dot_pos_item := 3; lookaheads_item := lookahead_set_51 |} ]%list.
Extract Inlined Constant items_of_state_260 => "assert false".

Definition items_of_state_261 : list item :=
  [ {| prod_item := Prod'declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_54 |};
    {| prod_item := Prod'declarator_noattrend'0; dot_pos_item := 0; lookaheads_item := lookahead_set_55 |};
    {| prod_item := Prod'declarator_noattrend'1; dot_pos_item := 0; lookaheads_item := lookahead_set_55 |};
    {| prod_item := Prod'direct_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'direct_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_56 |};
    {| prod_item := Prod'pointer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'3; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'struct_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'struct_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'struct_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'struct_declarator_list'1; dot_pos_item := 2; lookaheads_item := lookahead_set_58 |} ]%list.
Extract Inlined Constant items_of_state_261 => "assert false".

Definition items_of_state_262 : list item :=
  [ {| prod_item := Prod'struct_declarator_list'1; dot_pos_item := 3; lookaheads_item := lookahead_set_58 |} ]%list.
Extract Inlined Constant items_of_state_262 => "assert false".

Definition items_of_state_263 : list item :=
  [ {| prod_item := Prod'struct_declarator'0; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'struct_declarator'1; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |} ]%list.
Extract Inlined Constant items_of_state_263 => "assert false".

Definition items_of_state_264 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'constant_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_152 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'struct_declarator'1; dot_pos_item := 2; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_264 => "assert false".

Definition items_of_state_265 : list item :=
  [ {| prod_item := Prod'struct_declarator'1; dot_pos_item := 3; lookaheads_item := lookahead_set_58 |} ]%list.
Extract Inlined Constant items_of_state_265 => "assert false".

Definition items_of_state_266 : list item :=
  [ {| prod_item := Prod'struct_declarator_list'0; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |} ]%list.
Extract Inlined Constant items_of_state_266 => "assert false".

Definition items_of_state_267 : list item :=
  [ {| prod_item := Prod'struct_declaration_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_declaration_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 3; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_267 => "assert false".

Definition items_of_state_268 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'specifier_qualifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_53 |};
    {| prod_item := Prod'specifier_qualifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_53 |};
    {| prod_item := Prod'specifier_qualifier_list'2; dot_pos_item := 0; lookaheads_item := lookahead_set_53 |};
    {| prod_item := Prod'specifier_qualifier_list'3; dot_pos_item := 0; lookaheads_item := lookahead_set_53 |};
    {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_declaration_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_51 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 4; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_52 |} ]%list.
Extract Inlined Constant items_of_state_268 => "assert false".

Definition items_of_state_269 : list item :=
  [ {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 5; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_269 => "assert false".

Definition items_of_state_270 : list item :=
  [ {| prod_item := Prod'specifier_qualifier_list'2; dot_pos_item := 2; lookaheads_item := lookahead_set_50 |} ]%list.
Extract Inlined Constant items_of_state_270 => "assert false".

Definition items_of_state_271 : list item :=
  [ {| prod_item := Prod'specifier_qualifier_list'0; dot_pos_item := 2; lookaheads_item := lookahead_set_50 |} ]%list.
Extract Inlined Constant items_of_state_271 => "assert false".

Definition items_of_state_272 : list item :=
  [ {| prod_item := Prod'unary_expression'6; dot_pos_item := 3; lookaheads_item := lookahead_set_25 |} ]%list.
Extract Inlined Constant items_of_state_272 => "assert false".

Definition items_of_state_273 : list item :=
  [ {| prod_item := Prod'unary_expression'6; dot_pos_item := 4; lookaheads_item := lookahead_set_25 |} ]%list.
Extract Inlined Constant items_of_state_273 => "assert false".

Definition items_of_state_274 : list item :=
  [ {| prod_item := Prod'abstract_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'abstract_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'abstract_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'direct_abstract_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'9; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'10; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'11; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'12; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'pointer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'pointer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'pointer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'pointer'3; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'type_name'0; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'type_name'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_274 => "assert false".

Definition items_of_state_275 : list item :=
  [ {| prod_item := Prod'abstract_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'abstract_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'abstract_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_66 |};
    {| prod_item := Prod'direct_abstract_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'0; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'9; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'10; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'10; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'11; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'12; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'direct_abstract_declarator'12; dot_pos_item := 1; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'parameter_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'parameter_type_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'parameter_type_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'pointer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'pointer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'pointer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'pointer'3; dot_pos_item := 0; lookaheads_item := lookahead_set_72 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_67 |} ]%list.
Extract Inlined Constant items_of_state_275 => "assert false".

Definition items_of_state_276 : list item :=
  [ {| prod_item := Prod'abstract_declarator'0; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'abstract_declarator'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'direct_abstract_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'9; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'10; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'11; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |};
    {| prod_item := Prod'direct_abstract_declarator'12; dot_pos_item := 0; lookaheads_item := lookahead_set_70 |} ]%list.
Extract Inlined Constant items_of_state_276 => "assert false".

Definition items_of_state_277 : list item :=
  [ {| prod_item := Prod'type_name'1; dot_pos_item := 2; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_277 => "assert false".

Definition items_of_state_278 : list item :=
  [ {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 3; lookaheads_item := lookahead_set_42 |} ]%list.
Extract Inlined Constant items_of_state_278 => "assert false".

Definition items_of_state_279 : list item :=
  [ {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 4; lookaheads_item := lookahead_set_42 |} ]%list.
Extract Inlined Constant items_of_state_279 => "assert false".

Definition items_of_state_280 : list item :=
  [ {| prod_item := Prod'argument_expression_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 3; lookaheads_item := lookahead_set_42 |} ]%list.
Extract Inlined Constant items_of_state_280 => "assert false".

Definition items_of_state_281 : list item :=
  [ {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 4; lookaheads_item := lookahead_set_42 |} ]%list.
Extract Inlined Constant items_of_state_281 => "assert false".

Definition items_of_state_282 : list item :=
  [ {| prod_item := Prod'postfix_expression'11; dot_pos_item := 3; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 3; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_282 => "assert false".

Definition items_of_state_283 : list item :=
  [ {| prod_item := Prod'postfix_expression'11; dot_pos_item := 4; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 4; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_283 => "assert false".

Definition items_of_state_284 : list item :=
  [ {| prod_item := Prod'designator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_156 |};
    {| prod_item := Prod'designator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_156 |};
    {| prod_item := Prod'designator_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_156 |};
    {| prod_item := Prod'designator_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_156 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 5; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 5; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_284 => "assert false".

Definition items_of_state_285 : list item :=
  [ {| prod_item := Prod'postfix_expression'12; dot_pos_item := 6; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_285 => "assert false".

Definition items_of_state_286 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_74 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_74 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_75 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'constant_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_76 |};
    {| prod_item := Prod'designator'0; dot_pos_item := 1; lookaheads_item := lookahead_set_157 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_79 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_80 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_80 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_81 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_81 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_82 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_82 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_83 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_83 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_158 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_85 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_86 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_78 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_286 => "assert false".

Definition items_of_state_287 : list item :=
  [ {| prod_item := Prod'designator'0; dot_pos_item := 2; lookaheads_item := lookahead_set_157 |} ]%list.
Extract Inlined Constant items_of_state_287 => "assert false".

Definition items_of_state_288 : list item :=
  [ {| prod_item := Prod'designator'0; dot_pos_item := 3; lookaheads_item := lookahead_set_157 |} ]%list.
Extract Inlined Constant items_of_state_288 => "assert false".

Definition items_of_state_289 : list item :=
  [ {| prod_item := Prod'designator'1; dot_pos_item := 1; lookaheads_item := lookahead_set_157 |} ]%list.
Extract Inlined Constant items_of_state_289 => "assert false".

Definition items_of_state_290 : list item :=
  [ {| prod_item := Prod'designator'1; dot_pos_item := 2; lookaheads_item := lookahead_set_157 |} ]%list.
Extract Inlined Constant items_of_state_290 => "assert false".

Definition items_of_state_291 : list item :=
  [ {| prod_item := Prod'designator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_156 |};
    {| prod_item := Prod'designator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_156 |};
    {| prod_item := Prod'designator_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_156 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 6; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_291 => "assert false".

Definition items_of_state_292 : list item :=
  [ {| prod_item := Prod'postfix_expression'11; dot_pos_item := 7; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_292 => "assert false".

Definition items_of_state_293 : list item :=
  [ {| prod_item := Prod'designator_list'1; dot_pos_item := 2; lookaheads_item := lookahead_set_157 |} ]%list.
Extract Inlined Constant items_of_state_293 => "assert false".

Definition items_of_state_294 : list item :=
  [ {| prod_item := Prod'designator_list'0; dot_pos_item := 1; lookaheads_item := lookahead_set_157 |} ]%list.
Extract Inlined Constant items_of_state_294 => "assert false".

Definition items_of_state_295 : list item :=
  [ {| prod_item := Prod'postfix_expression'4; dot_pos_item := 3; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_295 => "assert false".

Definition items_of_state_296 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 4; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'specifier_qualifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'2; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'specifier_qualifier_list'3; dot_pos_item := 0; lookaheads_item := lookahead_set_39 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_name'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'type_name'1; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'type_qualifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_29 |} ]%list.
Extract Inlined Constant items_of_state_296 => "assert false".

Definition items_of_state_297 : list item :=
  [ {| prod_item := Prod'postfix_expression'4; dot_pos_item := 5; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_297 => "assert false".

Definition items_of_state_298 : list item :=
  [ {| prod_item := Prod'postfix_expression'4; dot_pos_item := 6; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_298 => "assert false".

Definition items_of_state_299 : list item :=
  [ {| prod_item := Prod'unary_expression'2; dot_pos_item := 2; lookaheads_item := lookahead_set_25 |} ]%list.
Extract Inlined Constant items_of_state_299 => "assert false".

Definition items_of_state_300 : list item :=
  [ {| prod_item := Prod'argument_expression_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'gcc_attribute'3; dot_pos_item := 3; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_300 => "assert false".

Definition items_of_state_301 : list item :=
  [ {| prod_item := Prod'gcc_attribute'3; dot_pos_item := 4; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_301 => "assert false".

Definition items_of_state_302 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 4; lookaheads_item := lookahead_set_42 |};
    {| prod_item := Prod'gcc_attribute_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_302 => "assert false".

Definition items_of_state_303 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 5; lookaheads_item := lookahead_set_42 |} ]%list.
Extract Inlined Constant items_of_state_303 => "assert false".

Definition items_of_state_304 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 6; lookaheads_item := lookahead_set_42 |} ]%list.
Extract Inlined Constant items_of_state_304 => "assert false".

Definition items_of_state_305 : list item :=
  [ {| prod_item := Prod'gcc_attribute'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'gcc_attribute'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'gcc_attribute'2; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'gcc_attribute'3; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'gcc_attribute_list'1; dot_pos_item := 2; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'gcc_attribute_word'0; dot_pos_item := 0; lookaheads_item := lookahead_set_44 |};
    {| prod_item := Prod'gcc_attribute_word'1; dot_pos_item := 0; lookaheads_item := lookahead_set_44 |};
    {| prod_item := Prod'gcc_attribute_word'2; dot_pos_item := 0; lookaheads_item := lookahead_set_44 |} ]%list.
Extract Inlined Constant items_of_state_305 => "assert false".

Definition items_of_state_306 : list item :=
  [ {| prod_item := Prod'gcc_attribute_list'1; dot_pos_item := 3; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_306 => "assert false".

Definition items_of_state_307 : list item :=
  [ {| prod_item := Prod'gcc_attribute_list'0; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_307 => "assert false".

Definition items_of_state_308 : list item :=
  [ {| prod_item := Prod'enum_specifier'0; dot_pos_item := 2; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 2; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 2; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 2; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 2; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_308 => "assert false".

Definition items_of_state_309 : list item :=
  [ {| prod_item := Prod'enum_specifier'0; dot_pos_item := 3; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 3; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 3; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_309 => "assert false".

Definition items_of_state_310 : list item :=
  [ {| prod_item := Prod'enum_specifier'0; dot_pos_item := 4; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 4; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enumeration_constant'0; dot_pos_item := 0; lookaheads_item := lookahead_set_159 |};
    {| prod_item := Prod'enumerator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'enumerator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'enumerator_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'enumerator_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |} ]%list.
Extract Inlined Constant items_of_state_310 => "assert false".

Definition items_of_state_311 : list item :=
  [ {| prod_item := Prod'enumeration_constant'0; dot_pos_item := 1; lookaheads_item := lookahead_set_159 |} ]%list.
Extract Inlined Constant items_of_state_311 => "assert false".

Definition items_of_state_312 : list item :=
  [ {| prod_item := Prod'enum_specifier'0; dot_pos_item := 5; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 5; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enumerator_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_160 |} ]%list.
Extract Inlined Constant items_of_state_312 => "assert false".

Definition items_of_state_313 : list item :=
  [ {| prod_item := Prod'enum_specifier'0; dot_pos_item := 6; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_313 => "assert false".

Definition items_of_state_314 : list item :=
  [ {| prod_item := Prod'enum_specifier'2; dot_pos_item := 6; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enumeration_constant'0; dot_pos_item := 0; lookaheads_item := lookahead_set_159 |};
    {| prod_item := Prod'enumerator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'enumerator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'enumerator_list'1; dot_pos_item := 2; lookaheads_item := lookahead_set_160 |} ]%list.
Extract Inlined Constant items_of_state_314 => "assert false".

Definition items_of_state_315 : list item :=
  [ {| prod_item := Prod'enum_specifier'2; dot_pos_item := 7; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_315 => "assert false".

Definition items_of_state_316 : list item :=
  [ {| prod_item := Prod'enumerator_list'1; dot_pos_item := 3; lookaheads_item := lookahead_set_160 |} ]%list.
Extract Inlined Constant items_of_state_316 => "assert false".

Definition items_of_state_317 : list item :=
  [ {| prod_item := Prod'enumerator'0; dot_pos_item := 1; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'enumerator'1; dot_pos_item := 1; lookaheads_item := lookahead_set_160 |} ]%list.
Extract Inlined Constant items_of_state_317 => "assert false".

Definition items_of_state_318 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_161 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_161 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'constant_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'enumerator'1; dot_pos_item := 2; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_165 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_165 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_166 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_166 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_167 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_167 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_168 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_168 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_169 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_318 => "assert false".

Definition items_of_state_319 : list item :=
  [ {| prod_item := Prod'enumerator'1; dot_pos_item := 3; lookaheads_item := lookahead_set_160 |} ]%list.
Extract Inlined Constant items_of_state_319 => "assert false".

Definition items_of_state_320 : list item :=
  [ {| prod_item := Prod'enumerator_list'0; dot_pos_item := 1; lookaheads_item := lookahead_set_160 |} ]%list.
Extract Inlined Constant items_of_state_320 => "assert false".

Definition items_of_state_321 : list item :=
  [ {| prod_item := Prod'enum_specifier'1; dot_pos_item := 3; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 3; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enumeration_constant'0; dot_pos_item := 0; lookaheads_item := lookahead_set_159 |};
    {| prod_item := Prod'enumerator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'enumerator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'enumerator_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'enumerator_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |} ]%list.
Extract Inlined Constant items_of_state_321 => "assert false".

Definition items_of_state_322 : list item :=
  [ {| prod_item := Prod'enum_specifier'1; dot_pos_item := 4; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 4; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enumerator_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_160 |} ]%list.
Extract Inlined Constant items_of_state_322 => "assert false".

Definition items_of_state_323 : list item :=
  [ {| prod_item := Prod'enum_specifier'1; dot_pos_item := 5; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_323 => "assert false".

Definition items_of_state_324 : list item :=
  [ {| prod_item := Prod'enum_specifier'3; dot_pos_item := 5; lookaheads_item := lookahead_set_8 |};
    {| prod_item := Prod'enumeration_constant'0; dot_pos_item := 0; lookaheads_item := lookahead_set_159 |};
    {| prod_item := Prod'enumerator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'enumerator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'enumerator_list'1; dot_pos_item := 2; lookaheads_item := lookahead_set_160 |} ]%list.
Extract Inlined Constant items_of_state_324 => "assert false".

Definition items_of_state_325 : list item :=
  [ {| prod_item := Prod'enum_specifier'3; dot_pos_item := 6; lookaheads_item := lookahead_set_8 |} ]%list.
Extract Inlined Constant items_of_state_325 => "assert false".

Definition items_of_state_326 : list item :=
  [ {| prod_item := Prod'postfix_expression'9; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_326 => "assert false".

Definition items_of_state_327 : list item :=
  [ {| prod_item := Prod'postfix_expression'9; dot_pos_item := 3; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 3; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_327 => "assert false".

Definition items_of_state_328 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_161 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_161 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'designation'0; dot_pos_item := 0; lookaheads_item := lookahead_set_172 |};
    {| prod_item := Prod'designator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'designator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'designator_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'designator_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_165 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_165 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_166 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_166 |};
    {| prod_item := Prod'initializer_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'initializer_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'initializer_list'2; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'initializer_list'3; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_167 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_167 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_168 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_168 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 4; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 4; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_328 => "assert false".

Definition items_of_state_329 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_161 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_161 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'1; dot_pos_item := 1; lookaheads_item := lookahead_set_176 |};
    {| prod_item := Prod'c_initializer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'2; dot_pos_item := 1; lookaheads_item := lookahead_set_176 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'designation'0; dot_pos_item := 0; lookaheads_item := lookahead_set_172 |};
    {| prod_item := Prod'designator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'designator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'designator_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'designator_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_165 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_165 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_166 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_166 |};
    {| prod_item := Prod'initializer_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'initializer_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'initializer_list'2; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'initializer_list'3; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_167 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_167 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_168 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_168 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_329 => "assert false".

Definition items_of_state_330 : list item :=
  [ {| prod_item := Prod'c_initializer'1; dot_pos_item := 2; lookaheads_item := lookahead_set_176 |};
    {| prod_item := Prod'c_initializer'2; dot_pos_item := 2; lookaheads_item := lookahead_set_176 |};
    {| prod_item := Prod'initializer_list'2; dot_pos_item := 1; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'initializer_list'3; dot_pos_item := 1; lookaheads_item := lookahead_set_160 |} ]%list.
Extract Inlined Constant items_of_state_330 => "assert false".

Definition items_of_state_331 : list item :=
  [ {| prod_item := Prod'c_initializer'1; dot_pos_item := 3; lookaheads_item := lookahead_set_176 |} ]%list.
Extract Inlined Constant items_of_state_331 => "assert false".

Definition items_of_state_332 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_161 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_161 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'2; dot_pos_item := 3; lookaheads_item := lookahead_set_176 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'designation'0; dot_pos_item := 0; lookaheads_item := lookahead_set_172 |};
    {| prod_item := Prod'designator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'designator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'designator_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'designator_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_165 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_165 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_166 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_166 |};
    {| prod_item := Prod'initializer_list'2; dot_pos_item := 2; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'initializer_list'3; dot_pos_item := 2; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_167 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_167 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_168 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_168 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_332 => "assert false".

Definition items_of_state_333 : list item :=
  [ {| prod_item := Prod'c_initializer'2; dot_pos_item := 4; lookaheads_item := lookahead_set_176 |} ]%list.
Extract Inlined Constant items_of_state_333 => "assert false".

Definition items_of_state_334 : list item :=
  [ {| prod_item := Prod'designation'0; dot_pos_item := 1; lookaheads_item := lookahead_set_172 |};
    {| prod_item := Prod'designator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'designator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'designator_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_173 |} ]%list.
Extract Inlined Constant items_of_state_334 => "assert false".

Definition items_of_state_335 : list item :=
  [ {| prod_item := Prod'designation'0; dot_pos_item := 2; lookaheads_item := lookahead_set_172 |} ]%list.
Extract Inlined Constant items_of_state_335 => "assert false".

Definition items_of_state_336 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_161 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_161 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_165 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_165 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_166 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_166 |};
    {| prod_item := Prod'initializer_list'2; dot_pos_item := 3; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_167 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_167 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_168 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_168 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_336 => "assert false".

Definition items_of_state_337 : list item :=
  [ {| prod_item := Prod'initializer_list'2; dot_pos_item := 4; lookaheads_item := lookahead_set_160 |} ]%list.
Extract Inlined Constant items_of_state_337 => "assert false".

Definition items_of_state_338 : list item :=
  [ {| prod_item := Prod'c_initializer'0; dot_pos_item := 1; lookaheads_item := lookahead_set_176 |} ]%list.
Extract Inlined Constant items_of_state_338 => "assert false".

Definition items_of_state_339 : list item :=
  [ {| prod_item := Prod'initializer_list'3; dot_pos_item := 3; lookaheads_item := lookahead_set_160 |} ]%list.
Extract Inlined Constant items_of_state_339 => "assert false".

Definition items_of_state_340 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_161 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_161 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_165 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_165 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_166 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_166 |};
    {| prod_item := Prod'initializer_list'0; dot_pos_item := 1; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_167 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_167 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_168 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_168 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_340 => "assert false".

Definition items_of_state_341 : list item :=
  [ {| prod_item := Prod'initializer_list'0; dot_pos_item := 2; lookaheads_item := lookahead_set_160 |} ]%list.
Extract Inlined Constant items_of_state_341 => "assert false".

Definition items_of_state_342 : list item :=
  [ {| prod_item := Prod'initializer_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_160 |} ]%list.
Extract Inlined Constant items_of_state_342 => "assert false".

Definition items_of_state_343 : list item :=
  [ {| prod_item := Prod'initializer_list'2; dot_pos_item := 1; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'initializer_list'3; dot_pos_item := 1; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 5; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 5; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_343 => "assert false".

Definition items_of_state_344 : list item :=
  [ {| prod_item := Prod'postfix_expression'9; dot_pos_item := 6; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_344 => "assert false".

Definition items_of_state_345 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_161 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_161 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_162 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'c_initializer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'designation'0; dot_pos_item := 0; lookaheads_item := lookahead_set_172 |};
    {| prod_item := Prod'designator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'designator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'designator_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'designator_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_173 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_164 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_165 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_165 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_166 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_166 |};
    {| prod_item := Prod'initializer_list'2; dot_pos_item := 2; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'initializer_list'3; dot_pos_item := 2; lookaheads_item := lookahead_set_160 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_167 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_167 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_168 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_168 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_163 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 6; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_174 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_170 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_171 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_175 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_345 => "assert false".

Definition items_of_state_346 : list item :=
  [ {| prod_item := Prod'postfix_expression'10; dot_pos_item := 7; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_346 => "assert false".

Definition items_of_state_347 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_347 => "assert false".

Definition items_of_state_348 : list item :=
  [ {| prod_item := Prod'primary_expression'3; dot_pos_item := 3; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_348 => "assert false".

Definition items_of_state_349 : list item :=
  [ {| prod_item := Prod'unary_expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_25 |} ]%list.
Extract Inlined Constant items_of_state_349 => "assert false".

Definition items_of_state_350 : list item :=
  [ {| prod_item := Prod'cast_expression'1; dot_pos_item := 2; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |} ]%list.
Extract Inlined Constant items_of_state_350 => "assert false".

Definition items_of_state_351 : list item :=
  [ {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 3; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 3; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 3; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_25 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_351 => "assert false".

Definition items_of_state_352 : list item :=
  [ {| prod_item := Prod'cast_expression'1; dot_pos_item := 4; lookaheads_item := lookahead_set_25 |} ]%list.
Extract Inlined Constant items_of_state_352 => "assert false".

Definition items_of_state_353 : list item :=
  [ {| prod_item := Prod'argument_expression_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 3; lookaheads_item := lookahead_set_42 |} ]%list.
Extract Inlined Constant items_of_state_353 => "assert false".

Definition items_of_state_354 : list item :=
  [ {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 4; lookaheads_item := lookahead_set_42 |} ]%list.
Extract Inlined Constant items_of_state_354 => "assert false".

Definition items_of_state_355 : list item :=
  [ {| prod_item := Prod'postfix_expression'9; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 2; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 3; lookaheads_item := lookahead_set_25 |} ]%list.
Extract Inlined Constant items_of_state_355 => "assert false".

Definition items_of_state_356 : list item :=
  [ {| prod_item := Prod'postfix_expression'9; dot_pos_item := 3; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 3; lookaheads_item := lookahead_set_24 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 4; lookaheads_item := lookahead_set_25 |} ]%list.
Extract Inlined Constant items_of_state_356 => "assert false".

Definition items_of_state_357 : list item :=
  [ {| prod_item := Prod'unary_expression'4; dot_pos_item := 2; lookaheads_item := lookahead_set_25 |} ]%list.
Extract Inlined Constant items_of_state_357 => "assert false".

Definition items_of_state_358 : list item :=
  [ {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 3; lookaheads_item := lookahead_set_10 |} ]%list.
Extract Inlined Constant items_of_state_358 => "assert false".

Definition items_of_state_359 : list item :=
  [ {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 4; lookaheads_item := lookahead_set_10 |} ]%list.
Extract Inlined Constant items_of_state_359 => "assert false".

Definition items_of_state_360 : list item :=
  [ {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 5; lookaheads_item := lookahead_set_10 |} ]%list.
Extract Inlined Constant items_of_state_360 => "assert false".

Definition items_of_state_361 : list item :=
  [ {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 6; lookaheads_item := lookahead_set_10 |} ]%list.
Extract Inlined Constant items_of_state_361 => "assert false".

Definition items_of_state_362 : list item :=
  [ {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 7; lookaheads_item := lookahead_set_10 |} ]%list.
Extract Inlined Constant items_of_state_362 => "assert false".

Definition items_of_state_363 : list item :=
  [ {| prod_item := Prod'translation_unit'3; dot_pos_item := 1; lookaheads_item := lookahead_set_2 |} ]%list.
Extract Inlined Constant items_of_state_363 => "assert false".

Definition items_of_state_364 : list item :=
  [ {| prod_item := Prod'external_declaration'2; dot_pos_item := 1; lookaheads_item := lookahead_set_2 |} ]%list.
Extract Inlined Constant items_of_state_364 => "assert false".

Definition items_of_state_365 : list item :=
  [ {| prod_item := Prod'translation_unit_file'1; dot_pos_item := 1; lookaheads_item := lookahead_set_6 |} ]%list.
Extract Inlined Constant items_of_state_365 => "assert false".

Definition items_of_state_367 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'external_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'external_declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'external_declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'function_definition'0; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'function_definition'1; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'translation_unit'1; dot_pos_item := 1; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'translation_unit'2; dot_pos_item := 1; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'translation_unit_file'0; dot_pos_item := 1; lookaheads_item := lookahead_set_6 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |} ]%list.
Extract Inlined Constant items_of_state_367 => "assert false".

Definition items_of_state_368 : list item :=
  [ {| prod_item := Prod'translation_unit'2; dot_pos_item := 2; lookaheads_item := lookahead_set_2 |} ]%list.
Extract Inlined Constant items_of_state_368 => "assert false".

Definition items_of_state_369 : list item :=
  [ {| prod_item := Prod'translation_unit_file'0; dot_pos_item := 2; lookaheads_item := lookahead_set_6 |} ]%list.
Extract Inlined Constant items_of_state_369 => "assert false".

Definition items_of_state_370 : list item :=
  [ {| prod_item := Prod'declaration'2; dot_pos_item := 1; lookaheads_item := lookahead_set_10 |} ]%list.
Extract Inlined Constant items_of_state_370 => "assert false".

Definition items_of_state_371 : list item :=
  [ {| prod_item := Prod'external_declaration'0; dot_pos_item := 1; lookaheads_item := lookahead_set_2 |} ]%list.
Extract Inlined Constant items_of_state_371 => "assert false".

Definition items_of_state_372 : list item :=
  [ {| prod_item := Prod'translation_unit'1; dot_pos_item := 2; lookaheads_item := lookahead_set_2 |} ]%list.
Extract Inlined Constant items_of_state_372 => "assert false".

Definition items_of_state_373 : list item :=
  [ {| prod_item := Prod'declaration'0; dot_pos_item := 1; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'declaration'1; dot_pos_item := 1; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_177 |};
    {| prod_item := Prod'declarator_noattrend'0; dot_pos_item := 0; lookaheads_item := lookahead_set_178 |};
    {| prod_item := Prod'declarator_noattrend'1; dot_pos_item := 0; lookaheads_item := lookahead_set_178 |};
    {| prod_item := Prod'direct_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_179 |};
    {| prod_item := Prod'direct_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_179 |};
    {| prod_item := Prod'direct_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_179 |};
    {| prod_item := Prod'direct_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_179 |};
    {| prod_item := Prod'direct_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_179 |};
    {| prod_item := Prod'direct_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_179 |};
    {| prod_item := Prod'direct_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_179 |};
    {| prod_item := Prod'direct_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_179 |};
    {| prod_item := Prod'direct_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_179 |};
    {| prod_item := Prod'function_definition'0; dot_pos_item := 1; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'function_definition'1; dot_pos_item := 1; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'init_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'init_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'init_declarator_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'init_declarator_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'pointer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'3; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |} ]%list.
Extract Inlined Constant items_of_state_373 => "assert false".

Definition items_of_state_374 : list item :=
  [ {| prod_item := Prod'declaration'1; dot_pos_item := 2; lookaheads_item := lookahead_set_10 |} ]%list.
Extract Inlined Constant items_of_state_374 => "assert false".

Definition items_of_state_375 : list item :=
  [ {| prod_item := Prod'declaration'0; dot_pos_item := 2; lookaheads_item := lookahead_set_10 |};
    {| prod_item := Prod'init_declarator_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |} ]%list.
Extract Inlined Constant items_of_state_375 => "assert false".

Definition items_of_state_376 : list item :=
  [ {| prod_item := Prod'declaration'0; dot_pos_item := 3; lookaheads_item := lookahead_set_10 |} ]%list.
Extract Inlined Constant items_of_state_376 => "assert false".

Definition items_of_state_377 : list item :=
  [ {| prod_item := Prod'declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_180 |};
    {| prod_item := Prod'declarator_noattrend'0; dot_pos_item := 0; lookaheads_item := lookahead_set_181 |};
    {| prod_item := Prod'declarator_noattrend'1; dot_pos_item := 0; lookaheads_item := lookahead_set_181 |};
    {| prod_item := Prod'direct_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'init_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'init_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'init_declarator_list'1; dot_pos_item := 2; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'pointer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'3; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |} ]%list.
Extract Inlined Constant items_of_state_377 => "assert false".

Definition items_of_state_378 : list item :=
  [ {| prod_item := Prod'init_declarator_list'1; dot_pos_item := 3; lookaheads_item := lookahead_set_58 |} ]%list.
Extract Inlined Constant items_of_state_378 => "assert false".

Definition items_of_state_379 : list item :=
  [ {| prod_item := Prod'init_declarator'0; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'init_declarator'1; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |} ]%list.
Extract Inlined Constant items_of_state_379 => "assert false".

Definition items_of_state_380 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'c_initializer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'c_initializer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'c_initializer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'init_declarator'1; dot_pos_item := 2; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_380 => "assert false".

Definition items_of_state_381 : list item :=
  [ {| prod_item := Prod'init_declarator'1; dot_pos_item := 3; lookaheads_item := lookahead_set_58 |} ]%list.
Extract Inlined Constant items_of_state_381 => "assert false".

Definition items_of_state_382 : list item :=
  [ {| prod_item := Prod'init_declarator_list'0; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |} ]%list.
Extract Inlined Constant items_of_state_382 => "assert false".

Definition items_of_state_383 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_185 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_185 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_185 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_185 |};
    {| prod_item := Prod'attribute_specifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_177 |};
    {| prod_item := Prod'attribute_specifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_177 |};
    {| prod_item := Prod'declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_186 |};
    {| prod_item := Prod'declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_186 |};
    {| prod_item := Prod'declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_186 |};
    {| prod_item := Prod'declaration_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_186 |};
    {| prod_item := Prod'declaration_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_186 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declarator'0; dot_pos_item := 1; lookaheads_item := lookahead_set_177 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'function_definition'0; dot_pos_item := 2; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_186 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |} ]%list.
Extract Inlined Constant items_of_state_383 => "assert false".

Definition items_of_state_384 : list item :=
  [ {| prod_item := Prod'declaration'0; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'declaration'1; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_180 |};
    {| prod_item := Prod'declarator_noattrend'0; dot_pos_item := 0; lookaheads_item := lookahead_set_181 |};
    {| prod_item := Prod'declarator_noattrend'1; dot_pos_item := 0; lookaheads_item := lookahead_set_181 |};
    {| prod_item := Prod'direct_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'6; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'7; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'direct_declarator'8; dot_pos_item := 0; lookaheads_item := lookahead_set_182 |};
    {| prod_item := Prod'init_declarator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'init_declarator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'init_declarator_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'init_declarator_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'pointer'0; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'1; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'2; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |};
    {| prod_item := Prod'pointer'3; dot_pos_item := 0; lookaheads_item := lookahead_set_57 |} ]%list.
Extract Inlined Constant items_of_state_384 => "assert false".

Definition items_of_state_385 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_186 |};
    {| prod_item := Prod'declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_186 |};
    {| prod_item := Prod'declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_186 |};
    {| prod_item := Prod'declaration_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_186 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'function_definition'0; dot_pos_item := 3; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_186 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |} ]%list.
Extract Inlined Constant items_of_state_385 => "assert false".

Definition items_of_state_386 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'block_item'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'block_item'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'block_item'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'block_item_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'block_item_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 1; lookaheads_item := lookahead_set_188 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 1; lookaheads_item := lookahead_set_188 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_386 => "assert false".

Definition items_of_state_387 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_387 => "assert false".

Definition items_of_state_388 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_388 => "assert false".

Definition items_of_state_389 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_389 => "assert false".

Definition items_of_state_390 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_390 => "assert false".

Definition items_of_state_391 : list item :=
  [ {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_391 => "assert false".

Definition items_of_state_392 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_392 => "assert false".

Definition items_of_state_393 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_393 => "assert false".

Definition items_of_state_394 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_394 => "assert false".

Definition items_of_state_395 : list item :=
  [ {| prod_item := Prod'expression_statement'1; dot_pos_item := 1; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_395 => "assert false".

Definition items_of_state_396 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 1; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 1; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_396 => "assert false".

Definition items_of_state_397 : list item :=
  [ {| prod_item := Prod'jump_statement'4; dot_pos_item := 2; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_397 => "assert false".

Definition items_of_state_398 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 2; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_398 => "assert false".

Definition items_of_state_399 : list item :=
  [ {| prod_item := Prod'jump_statement'3; dot_pos_item := 3; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_399 => "assert false".

Definition items_of_state_400 : list item :=
  [ {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_400 => "assert false".

Definition items_of_state_401 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_401 => "assert false".

Definition items_of_state_402 : list item :=
  [ {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_402 => "assert false".

Definition items_of_state_403 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_403 => "assert false".

Definition items_of_state_404 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_404 => "assert false".

Definition items_of_state_405 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_405 => "assert false".

Definition items_of_state_406 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_406 => "assert false".

Definition items_of_state_407 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_407 => "assert false".

Definition items_of_state_408 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_408 => "assert false".

Definition items_of_state_409 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_409 => "assert false".

Definition items_of_state_410 : list item :=
  [ {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_410 => "assert false".

Definition items_of_state_411 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_411 => "assert false".

Definition items_of_state_412 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_412 => "assert false".

Definition items_of_state_413 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_413 => "assert false".

Definition items_of_state_414 : list item :=
  [ {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_414 => "assert false".

Definition items_of_state_415 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_415 => "assert false".

Definition items_of_state_416 : list item :=
  [ {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_416 => "assert false".

Definition items_of_state_417 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_417 => "assert false".

Definition items_of_state_418 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_418 => "assert false".

Definition items_of_state_419 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_419 => "assert false".

Definition items_of_state_420 : list item :=
  [ {| prod_item := Prod'jump_statement'0; dot_pos_item := 1; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_420 => "assert false".

Definition items_of_state_421 : list item :=
  [ {| prod_item := Prod'jump_statement'0; dot_pos_item := 2; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_421 => "assert false".

Definition items_of_state_422 : list item :=
  [ {| prod_item := Prod'jump_statement'0; dot_pos_item := 3; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_422 => "assert false".

Definition items_of_state_423 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_423 => "assert false".

Definition items_of_state_424 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_191 |};
    {| prod_item := Prod'declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_191 |};
    {| prod_item := Prod'declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_191 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_191 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_424 => "assert false".

Definition items_of_state_425 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_425 => "assert false".

Definition items_of_state_426 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_426 => "assert false".

Definition items_of_state_427 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_427 => "assert false".

Definition items_of_state_428 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_428 => "assert false".

Definition items_of_state_429 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_429 => "assert false".

Definition items_of_state_430 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_191 |};
    {| prod_item := Prod'declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_191 |};
    {| prod_item := Prod'declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_191 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_191 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_430 => "assert false".

Definition items_of_state_431 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_431 => "assert false".

Definition items_of_state_432 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_432 => "assert false".

Definition items_of_state_433 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_433 => "assert false".

Definition items_of_state_434 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_192 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_434 => "assert false".

Definition items_of_state_435 : list item :=
  [ {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_435 => "assert false".

Definition items_of_state_436 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_436 => "assert false".

Definition items_of_state_437 : list item :=
  [ {| prod_item := Prod'jump_statement'1; dot_pos_item := 1; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_437 => "assert false".

Definition items_of_state_438 : list item :=
  [ {| prod_item := Prod'jump_statement'1; dot_pos_item := 2; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_438 => "assert false".

Definition items_of_state_439 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_193 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_193 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_194 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_194 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_194 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_196 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_196 |};
    {| prod_item := Prod'constant_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_196 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_197 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_197 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_197 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_198 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_198 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_199 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_199 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_200 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_200 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_201 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_201 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_203 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_203 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_203 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_203 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_203 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_204 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_204 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_204 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_439 => "assert false".

Definition items_of_state_440 : list item :=
  [ {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_440 => "assert false".

Definition items_of_state_441 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_441 => "assert false".

Definition items_of_state_442 : list item :=
  [ {| prod_item := Prod'jump_statement'2; dot_pos_item := 1; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_442 => "assert false".

Definition items_of_state_443 : list item :=
  [ {| prod_item := Prod'jump_statement'2; dot_pos_item := 2; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_443 => "assert false".

Definition items_of_state_444 : list item :=
  [ {| prod_item := Prod'asm_attributes'0; dot_pos_item := 0; lookaheads_item := lookahead_set_205 |};
    {| prod_item := Prod'asm_attributes'1; dot_pos_item := 0; lookaheads_item := lookahead_set_205 |};
    {| prod_item := Prod'asm_attributes'2; dot_pos_item := 0; lookaheads_item := lookahead_set_205 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 1; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_444 => "assert false".

Definition items_of_state_445 : list item :=
  [ {| prod_item := Prod'asm_attributes'0; dot_pos_item := 0; lookaheads_item := lookahead_set_205 |};
    {| prod_item := Prod'asm_attributes'1; dot_pos_item := 0; lookaheads_item := lookahead_set_205 |};
    {| prod_item := Prod'asm_attributes'2; dot_pos_item := 0; lookaheads_item := lookahead_set_205 |};
    {| prod_item := Prod'asm_attributes'2; dot_pos_item := 1; lookaheads_item := lookahead_set_205 |} ]%list.
Extract Inlined Constant items_of_state_445 => "assert false".

Definition items_of_state_446 : list item :=
  [ {| prod_item := Prod'asm_attributes'0; dot_pos_item := 0; lookaheads_item := lookahead_set_205 |};
    {| prod_item := Prod'asm_attributes'1; dot_pos_item := 0; lookaheads_item := lookahead_set_205 |};
    {| prod_item := Prod'asm_attributes'1; dot_pos_item := 1; lookaheads_item := lookahead_set_205 |};
    {| prod_item := Prod'asm_attributes'2; dot_pos_item := 0; lookaheads_item := lookahead_set_205 |} ]%list.
Extract Inlined Constant items_of_state_446 => "assert false".

Definition items_of_state_447 : list item :=
  [ {| prod_item := Prod'asm_attributes'1; dot_pos_item := 2; lookaheads_item := lookahead_set_205 |} ]%list.
Extract Inlined Constant items_of_state_447 => "assert false".

Definition items_of_state_448 : list item :=
  [ {| prod_item := Prod'asm_attributes'2; dot_pos_item := 2; lookaheads_item := lookahead_set_205 |} ]%list.
Extract Inlined Constant items_of_state_448 => "assert false".

Definition items_of_state_449 : list item :=
  [ {| prod_item := Prod'asm_statement'0; dot_pos_item := 2; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_449 => "assert false".

Definition items_of_state_450 : list item :=
  [ {| prod_item := Prod'asm_statement'0; dot_pos_item := 3; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_450 => "assert false".

Definition items_of_state_451 : list item :=
  [ {| prod_item := Prod'asm_arguments'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_arguments'1; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_arguments'2; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_arguments'3; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 4; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_451 => "assert false".

Definition items_of_state_452 : list item :=
  [ {| prod_item := Prod'asm_arguments'1; dot_pos_item := 1; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_arguments'2; dot_pos_item := 1; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_arguments'3; dot_pos_item := 1; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_op_name'0; dot_pos_item := 0; lookaheads_item := lookahead_set_206 |};
    {| prod_item := Prod'asm_op_name'1; dot_pos_item := 0; lookaheads_item := lookahead_set_206 |};
    {| prod_item := Prod'asm_operand'0; dot_pos_item := 0; lookaheads_item := lookahead_set_207 |};
    {| prod_item := Prod'asm_operands'0; dot_pos_item := 0; lookaheads_item := lookahead_set_208 |};
    {| prod_item := Prod'asm_operands'1; dot_pos_item := 0; lookaheads_item := lookahead_set_208 |};
    {| prod_item := Prod'asm_operands_ne'0; dot_pos_item := 0; lookaheads_item := lookahead_set_207 |};
    {| prod_item := Prod'asm_operands_ne'1; dot_pos_item := 0; lookaheads_item := lookahead_set_207 |} ]%list.
Extract Inlined Constant items_of_state_452 => "assert false".

Definition items_of_state_453 : list item :=
  [ {| prod_item := Prod'asm_op_name'1; dot_pos_item := 1; lookaheads_item := lookahead_set_206 |} ]%list.
Extract Inlined Constant items_of_state_453 => "assert false".

Definition items_of_state_454 : list item :=
  [ {| prod_item := Prod'asm_op_name'1; dot_pos_item := 2; lookaheads_item := lookahead_set_206 |} ]%list.
Extract Inlined Constant items_of_state_454 => "assert false".

Definition items_of_state_455 : list item :=
  [ {| prod_item := Prod'asm_op_name'1; dot_pos_item := 3; lookaheads_item := lookahead_set_206 |} ]%list.
Extract Inlined Constant items_of_state_455 => "assert false".

Definition items_of_state_456 : list item :=
  [ {| prod_item := Prod'asm_operands'1; dot_pos_item := 1; lookaheads_item := lookahead_set_208 |};
    {| prod_item := Prod'asm_operands_ne'0; dot_pos_item := 1; lookaheads_item := lookahead_set_207 |} ]%list.
Extract Inlined Constant items_of_state_456 => "assert false".

Definition items_of_state_457 : list item :=
  [ {| prod_item := Prod'asm_op_name'0; dot_pos_item := 0; lookaheads_item := lookahead_set_206 |};
    {| prod_item := Prod'asm_op_name'1; dot_pos_item := 0; lookaheads_item := lookahead_set_206 |};
    {| prod_item := Prod'asm_operand'0; dot_pos_item := 0; lookaheads_item := lookahead_set_207 |};
    {| prod_item := Prod'asm_operands_ne'0; dot_pos_item := 2; lookaheads_item := lookahead_set_207 |} ]%list.
Extract Inlined Constant items_of_state_457 => "assert false".

Definition items_of_state_458 : list item :=
  [ {| prod_item := Prod'asm_operands_ne'0; dot_pos_item := 3; lookaheads_item := lookahead_set_207 |} ]%list.
Extract Inlined Constant items_of_state_458 => "assert false".

Definition items_of_state_459 : list item :=
  [ {| prod_item := Prod'asm_operand'0; dot_pos_item := 1; lookaheads_item := lookahead_set_207 |} ]%list.
Extract Inlined Constant items_of_state_459 => "assert false".

Definition items_of_state_460 : list item :=
  [ {| prod_item := Prod'asm_operand'0; dot_pos_item := 2; lookaheads_item := lookahead_set_207 |} ]%list.
Extract Inlined Constant items_of_state_460 => "assert false".

Definition items_of_state_461 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'asm_operand'0; dot_pos_item := 3; lookaheads_item := lookahead_set_207 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_461 => "assert false".

Definition items_of_state_462 : list item :=
  [ {| prod_item := Prod'asm_operand'0; dot_pos_item := 4; lookaheads_item := lookahead_set_207 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |} ]%list.
Extract Inlined Constant items_of_state_462 => "assert false".

Definition items_of_state_463 : list item :=
  [ {| prod_item := Prod'asm_operand'0; dot_pos_item := 5; lookaheads_item := lookahead_set_207 |} ]%list.
Extract Inlined Constant items_of_state_463 => "assert false".

Definition items_of_state_464 : list item :=
  [ {| prod_item := Prod'asm_arguments'1; dot_pos_item := 2; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_arguments'2; dot_pos_item := 2; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_arguments'3; dot_pos_item := 2; lookaheads_item := lookahead_set_40 |} ]%list.
Extract Inlined Constant items_of_state_464 => "assert false".

Definition items_of_state_465 : list item :=
  [ {| prod_item := Prod'asm_arguments'2; dot_pos_item := 3; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_arguments'3; dot_pos_item := 3; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_op_name'0; dot_pos_item := 0; lookaheads_item := lookahead_set_206 |};
    {| prod_item := Prod'asm_op_name'1; dot_pos_item := 0; lookaheads_item := lookahead_set_206 |};
    {| prod_item := Prod'asm_operand'0; dot_pos_item := 0; lookaheads_item := lookahead_set_207 |};
    {| prod_item := Prod'asm_operands'0; dot_pos_item := 0; lookaheads_item := lookahead_set_208 |};
    {| prod_item := Prod'asm_operands'1; dot_pos_item := 0; lookaheads_item := lookahead_set_208 |};
    {| prod_item := Prod'asm_operands_ne'0; dot_pos_item := 0; lookaheads_item := lookahead_set_207 |};
    {| prod_item := Prod'asm_operands_ne'1; dot_pos_item := 0; lookaheads_item := lookahead_set_207 |} ]%list.
Extract Inlined Constant items_of_state_465 => "assert false".

Definition items_of_state_466 : list item :=
  [ {| prod_item := Prod'asm_arguments'2; dot_pos_item := 4; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_arguments'3; dot_pos_item := 4; lookaheads_item := lookahead_set_40 |} ]%list.
Extract Inlined Constant items_of_state_466 => "assert false".

Definition items_of_state_467 : list item :=
  [ {| prod_item := Prod'asm_arguments'3; dot_pos_item := 5; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_flags'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_flags'1; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |} ]%list.
Extract Inlined Constant items_of_state_467 => "assert false".

Definition items_of_state_468 : list item :=
  [ {| prod_item := Prod'asm_flags'0; dot_pos_item := 1; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_flags'1; dot_pos_item := 1; lookaheads_item := lookahead_set_40 |} ]%list.
Extract Inlined Constant items_of_state_468 => "assert false".

Definition items_of_state_469 : list item :=
  [ {| prod_item := Prod'asm_flags'0; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_flags'1; dot_pos_item := 0; lookaheads_item := lookahead_set_40 |};
    {| prod_item := Prod'asm_flags'1; dot_pos_item := 2; lookaheads_item := lookahead_set_40 |} ]%list.
Extract Inlined Constant items_of_state_469 => "assert false".

Definition items_of_state_470 : list item :=
  [ {| prod_item := Prod'asm_flags'1; dot_pos_item := 3; lookaheads_item := lookahead_set_40 |} ]%list.
Extract Inlined Constant items_of_state_470 => "assert false".

Definition items_of_state_471 : list item :=
  [ {| prod_item := Prod'asm_arguments'3; dot_pos_item := 6; lookaheads_item := lookahead_set_40 |} ]%list.
Extract Inlined Constant items_of_state_471 => "assert false".

Definition items_of_state_472 : list item :=
  [ {| prod_item := Prod'asm_operands_ne'1; dot_pos_item := 1; lookaheads_item := lookahead_set_207 |} ]%list.
Extract Inlined Constant items_of_state_472 => "assert false".

Definition items_of_state_473 : list item :=
  [ {| prod_item := Prod'asm_statement'0; dot_pos_item := 5; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_473 => "assert false".

Definition items_of_state_474 : list item :=
  [ {| prod_item := Prod'asm_statement'0; dot_pos_item := 6; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_474 => "assert false".

Definition items_of_state_475 : list item :=
  [ {| prod_item := Prod'asm_statement'0; dot_pos_item := 7; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_475 => "assert false".

Definition items_of_state_476 : list item :=
  [ {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_476 => "assert false".

Definition items_of_state_477 : list item :=
  [ {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_477 => "assert false".

Definition items_of_state_478 : list item :=
  [ {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_478 => "assert false".

Definition items_of_state_479 : list item :=
  [ {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_479 => "assert false".

Definition items_of_state_480 : list item :=
  [ {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_480 => "assert false".

Definition items_of_state_481 : list item :=
  [ {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_481 => "assert false".

Definition items_of_state_482 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 1; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_482 => "assert false".

Definition items_of_state_483 : list item :=
  [ {| prod_item := Prod'expression_statement'0; dot_pos_item := 2; lookaheads_item := lookahead_set_189 |} ]%list.
Extract Inlined Constant items_of_state_483 => "assert false".

Definition items_of_state_484 : list item :=
  [ {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_484 => "assert false".

Definition items_of_state_485 : list item :=
  [ {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_485 => "assert false".

Definition items_of_state_486 : list item :=
  [ {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_486 => "assert false".

Definition items_of_state_487 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_487 => "assert false".

Definition items_of_state_488 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_488 => "assert false".

Definition items_of_state_489 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_489 => "assert false".

Definition items_of_state_490 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_490 => "assert false".

Definition items_of_state_491 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_491 => "assert false".

Definition items_of_state_492 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_492 => "assert false".

Definition items_of_state_493 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_493 => "assert false".

Definition items_of_state_494 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_494 => "assert false".

Definition items_of_state_495 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_495 => "assert false".

Definition items_of_state_496 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_496 => "assert false".

Definition items_of_state_497 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_497 => "assert false".

Definition items_of_state_498 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_498 => "assert false".

Definition items_of_state_499 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_499 => "assert false".

Definition items_of_state_500 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_500 => "assert false".

Definition items_of_state_501 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_501 => "assert false".

Definition items_of_state_502 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_502 => "assert false".

Definition items_of_state_503 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 8; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_503 => "assert false".

Definition items_of_state_504 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_504 => "assert false".

Definition items_of_state_505 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_505 => "assert false".

Definition items_of_state_506 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_506 => "assert false".

Definition items_of_state_507 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_507 => "assert false".

Definition items_of_state_508 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_508 => "assert false".

Definition items_of_state_509 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_509 => "assert false".

Definition items_of_state_510 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_510 => "assert false".

Definition items_of_state_511 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 8; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_511 => "assert false".

Definition items_of_state_512 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_512 => "assert false".

Definition items_of_state_513 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_513 => "assert false".

Definition items_of_state_514 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_514 => "assert false".

Definition items_of_state_515 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 8; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_515 => "assert false".

Definition items_of_state_516 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_516 => "assert false".

Definition items_of_state_517 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 8; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_517 => "assert false".

Definition items_of_state_518 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 9; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_518 => "assert false".

Definition items_of_state_519 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_519 => "assert false".

Definition items_of_state_520 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_520 => "assert false".

Definition items_of_state_521 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_521 => "assert false".

Definition items_of_state_522 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_522 => "assert false".

Definition items_of_state_523 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_523 => "assert false".

Definition items_of_state_524 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_524 => "assert false".

Definition items_of_state_525 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_525 => "assert false".

Definition items_of_state_526 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_526 => "assert false".

Definition items_of_state_527 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_527 => "assert false".

Definition items_of_state_528 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_528 => "assert false".

Definition items_of_state_529 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_529 => "assert false".

Definition items_of_state_530 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_530 => "assert false".

Definition items_of_state_531 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_531 => "assert false".

Definition items_of_state_532 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 8; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_532 => "assert false".

Definition items_of_state_533 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_533 => "assert false".

Definition items_of_state_534 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_534 => "assert false".

Definition items_of_state_535 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_535 => "assert false".

Definition items_of_state_536 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_536 => "assert false".

Definition items_of_state_537 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 6; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_537 => "assert false".

Definition items_of_state_538 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 7; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_538 => "assert false".

Definition items_of_state_539 : list item :=
  [ {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_539 => "assert false".

Definition items_of_state_540 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_540 => "assert false".

Definition items_of_state_541 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_193 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_193 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_194 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_194 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_194 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_196 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_196 |};
    {| prod_item := Prod'constant_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_196 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_197 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_197 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_197 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_198 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_198 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_199 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_199 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_200 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_200 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_201 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_201 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_202 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_203 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_203 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_203 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_203 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_203 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_204 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_204 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_204 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_195 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_541 => "assert false".

Definition items_of_state_542 : list item :=
  [ {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 2; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_542 => "assert false".

Definition items_of_state_543 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_543 => "assert false".

Definition items_of_state_544 : list item :=
  [ {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_544 => "assert false".

Definition items_of_state_545 : list item :=
  [ {| prod_item := Prod'statement_safe'3; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_545 => "assert false".

Definition items_of_state_546 : list item :=
  [ {| prod_item := Prod'statement_safe'0; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_546 => "assert false".

Definition items_of_state_547 : list item :=
  [ {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_547 => "assert false".

Definition items_of_state_548 : list item :=
  [ {| prod_item := Prod'statement_safe'4; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_548 => "assert false".

Definition items_of_state_549 : list item :=
  [ {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_549 => "assert false".

Definition items_of_state_550 : list item :=
  [ {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_550 => "assert false".

Definition items_of_state_551 : list item :=
  [ {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 1; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_551 => "assert false".

Definition items_of_state_552 : list item :=
  [ {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_552 => "assert false".

Definition items_of_state_553 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 6; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_553 => "assert false".

Definition items_of_state_554 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_554 => "assert false".

Definition items_of_state_555 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 6; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_555 => "assert false".

Definition items_of_state_556 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 7; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_556 => "assert false".

Definition items_of_state_557 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_557 => "assert false".

Definition items_of_state_558 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_558 => "assert false".

Definition items_of_state_559 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 6; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_559 => "assert false".

Definition items_of_state_560 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 7; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_560 => "assert false".

Definition items_of_state_561 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 6; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_561 => "assert false".

Definition items_of_state_562 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 7; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_562 => "assert false".

Definition items_of_state_563 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 8; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_563 => "assert false".

Definition items_of_state_564 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_564 => "assert false".

Definition items_of_state_565 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_565 => "assert false".

Definition items_of_state_566 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_566 => "assert false".

Definition items_of_state_567 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 6; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_567 => "assert false".

Definition items_of_state_568 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 7; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_568 => "assert false".

Definition items_of_state_569 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 6; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_569 => "assert false".

Definition items_of_state_570 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 7; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_570 => "assert false".

Definition items_of_state_571 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 8; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_571 => "assert false".

Definition items_of_state_572 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_572 => "assert false".

Definition items_of_state_573 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 6; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 6; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_573 => "assert false".

Definition items_of_state_574 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 7; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_574 => "assert false".

Definition items_of_state_575 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 8; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_575 => "assert false".

Definition items_of_state_576 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 7; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_576 => "assert false".

Definition items_of_state_577 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 8; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 8; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_577 => "assert false".

Definition items_of_state_578 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 9; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_578 => "assert false".

Definition items_of_state_579 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_579 => "assert false".

Definition items_of_state_580 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_580 => "assert false".

Definition items_of_state_581 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_581 => "assert false".

Definition items_of_state_582 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 6; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_582 => "assert false".

Definition items_of_state_583 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_583 => "assert false".

Definition items_of_state_584 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 6; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_584 => "assert false".

Definition items_of_state_585 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 7; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_585 => "assert false".

Definition items_of_state_586 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 4; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 4; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_586 => "assert false".

Definition items_of_state_587 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_26 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_27 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_31 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_32 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_33 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_34 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_35 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_30 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_36 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_37 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_38 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_41 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_587 => "assert false".

Definition items_of_state_588 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 6; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_588 => "assert false".

Definition items_of_state_589 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 7; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_589 => "assert false".

Definition items_of_state_590 : list item :=
  [ {| prod_item := Prod'expression'1; dot_pos_item := 1; lookaheads_item := lookahead_set_28 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 6; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_590 => "assert false".

Definition items_of_state_591 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 7; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_591 => "assert false".

Definition items_of_state_592 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 8; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_592 => "assert false".

Definition items_of_state_593 : list item :=
  [ {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_593 => "assert false".

Definition items_of_state_594 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'iteration_statement_statement_safe_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_189 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'labeled_statement_statement_safe_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 6; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_safe'0; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'1; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'2; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'3; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'4; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'5; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'statement_safe'6; dot_pos_item := 0; lookaheads_item := lookahead_set_190 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_594 => "assert false".

Definition items_of_state_595 : list item :=
  [ {| prod_item := Prod'selection_statement_safe'0; dot_pos_item := 7; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_595 => "assert false".

Definition items_of_state_596 : list item :=
  [ {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 7; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_596 => "assert false".

Definition items_of_state_597 : list item :=
  [ {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_597 => "assert false".

Definition items_of_state_598 : list item :=
  [ {| prod_item := Prod'labeled_statement_statement_safe_'0; dot_pos_item := 3; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_598 => "assert false".

Definition items_of_state_599 : list item :=
  [ {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 3; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_599 => "assert false".

Definition items_of_state_600 : list item :=
  [ {| prod_item := Prod'selection_statement_safe'1; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_600 => "assert false".

Definition items_of_state_601 : list item :=
  [ {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_601 => "assert false".

Definition items_of_state_602 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_safe_'0; dot_pos_item := 5; lookaheads_item := lookahead_set_190 |} ]%list.
Extract Inlined Constant items_of_state_602 => "assert false".

Definition items_of_state_603 : list item :=
  [ {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_603 => "assert false".

Definition items_of_state_604 : list item :=
  [ {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 5; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_604 => "assert false".

Definition items_of_state_605 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 6; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_605 => "assert false".

Definition items_of_state_606 : list item :=
  [ {| prod_item := Prod'compound_statement'1; dot_pos_item := 2; lookaheads_item := lookahead_set_188 |} ]%list.
Extract Inlined Constant items_of_state_606 => "assert false".

Definition items_of_state_607 : list item :=
  [ {| prod_item := Prod'block_item'2; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_607 => "assert false".

Definition items_of_state_608 : list item :=
  [ {| prod_item := Prod'block_item'1; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_608 => "assert false".

Definition items_of_state_609 : list item :=
  [ {| prod_item := Prod'block_item'0; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_609 => "assert false".

Definition items_of_state_610 : list item :=
  [ {| prod_item := Prod'AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_144 |};
    {| prod_item := Prod'additive_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'additive_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_145 |};
    {| prod_item := Prod'asm_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'assignment_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'assignment_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'block_item'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'block_item'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'block_item'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'block_item_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'cast_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'cast_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'compound_statement'0; dot_pos_item := 2; lookaheads_item := lookahead_set_188 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'conditional_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'conditional_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'declaration'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'declaration'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'equality_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'equality_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_147 |};
    {| prod_item := Prod'exclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'exclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_148 |};
    {| prod_item := Prod'expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'expression_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'expression_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'inclusive_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'inclusive_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_149 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'7; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'8; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'9; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'10; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'11; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'12; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'iteration_statement_statement_dangerous_'13; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'jump_statement'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'labeled_statement_statement_dangerous_'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'logical_AND_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_AND_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_150 |};
    {| prod_item := Prod'logical_OR_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'logical_OR_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_151 |};
    {| prod_item := Prod'multiplicative_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'multiplicative_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_146 |};
    {| prod_item := Prod'postfix_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'7; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'8; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'9; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'10; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'11; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'postfix_expression'12; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'primary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_183 |};
    {| prod_item := Prod'relational_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'relational_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_153 |};
    {| prod_item := Prod'selection_statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'selection_statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'shift_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'shift_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_154 |};
    {| prod_item := Prod'statement_dangerous'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'1; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'2; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'3; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'4; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'5; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'statement_dangerous'6; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'static_assert_declaration'0; dot_pos_item := 0; lookaheads_item := lookahead_set_187 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'unary_expression'0; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'1; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'2; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'3; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'4; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'5; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_expression'6; dot_pos_item := 0; lookaheads_item := lookahead_set_184 |};
    {| prod_item := Prod'unary_operator'0; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'1; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'2; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'3; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'4; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |};
    {| prod_item := Prod'unary_operator'5; dot_pos_item := 0; lookaheads_item := lookahead_set_23 |} ]%list.
Extract Inlined Constant items_of_state_610 => "assert false".

Definition items_of_state_611 : list item :=
  [ {| prod_item := Prod'compound_statement'0; dot_pos_item := 3; lookaheads_item := lookahead_set_188 |} ]%list.
Extract Inlined Constant items_of_state_611 => "assert false".

Definition items_of_state_612 : list item :=
  [ {| prod_item := Prod'block_item_list'1; dot_pos_item := 2; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_612 => "assert false".

Definition items_of_state_613 : list item :=
  [ {| prod_item := Prod'block_item_list'0; dot_pos_item := 1; lookaheads_item := lookahead_set_187 |} ]%list.
Extract Inlined Constant items_of_state_613 => "assert false".

Definition items_of_state_614 : list item :=
  [ {| prod_item := Prod'declaration_list'1; dot_pos_item := 2; lookaheads_item := lookahead_set_186 |} ]%list.
Extract Inlined Constant items_of_state_614 => "assert false".

Definition items_of_state_615 : list item :=
  [ {| prod_item := Prod'function_definition'0; dot_pos_item := 4; lookaheads_item := lookahead_set_2 |} ]%list.
Extract Inlined Constant items_of_state_615 => "assert false".

Definition items_of_state_616 : list item :=
  [ {| prod_item := Prod'declaration_list'0; dot_pos_item := 1; lookaheads_item := lookahead_set_186 |} ]%list.
Extract Inlined Constant items_of_state_616 => "assert false".

Definition items_of_state_617 : list item :=
  [ {| prod_item := Prod'attribute_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_185 |};
    {| prod_item := Prod'attribute_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_185 |};
    {| prod_item := Prod'attribute_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_185 |};
    {| prod_item := Prod'attribute_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_185 |};
    {| prod_item := Prod'attribute_specifier_list'0; dot_pos_item := 0; lookaheads_item := lookahead_set_177 |};
    {| prod_item := Prod'attribute_specifier_list'1; dot_pos_item := 0; lookaheads_item := lookahead_set_177 |};
    {| prod_item := Prod'attribute_specifier_list'1; dot_pos_item := 1; lookaheads_item := lookahead_set_177 |};
    {| prod_item := Prod'declaration_specifiers'0; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'1; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'2; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'3; dot_pos_item := 1; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'declaration_specifiers'4; dot_pos_item := 0; lookaheads_item := lookahead_set_3 |};
    {| prod_item := Prod'enum_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'enum_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'function_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'function_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'storage_class_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'struct_or_union'0; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union'1; dot_pos_item := 0; lookaheads_item := lookahead_set_5 |};
    {| prod_item := Prod'struct_or_union_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'struct_or_union_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_qualifier_noattr'0; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'1; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_qualifier_noattr'2; dot_pos_item := 0; lookaheads_item := lookahead_set_1 |};
    {| prod_item := Prod'type_specifier'0; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'1; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'2; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'3; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'4; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'5; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'6; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'7; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'8; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'9; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'10; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'11; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |};
    {| prod_item := Prod'type_specifier'12; dot_pos_item := 0; lookaheads_item := lookahead_set_4 |} ]%list.
Extract Inlined Constant items_of_state_617 => "assert false".

Definition items_of_state_618 : list item :=
  [ {| prod_item := Prod'compound_statement'0; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'compound_statement'1; dot_pos_item := 0; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'function_definition'1; dot_pos_item := 2; lookaheads_item := lookahead_set_2 |};
    {| prod_item := Prod'init_declarator'0; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |};
    {| prod_item := Prod'init_declarator'1; dot_pos_item := 1; lookaheads_item := lookahead_set_58 |} ]%list.
Extract Inlined Constant items_of_state_618 => "assert false".

Definition items_of_state_619 : list item :=
  [ {| prod_item := Prod'function_definition'1; dot_pos_item := 3; lookaheads_item := lookahead_set_2 |} ]%list.
Extract Inlined Constant items_of_state_619 => "assert false".

Definition items_of_state_620 : list item :=
  [ {| prod_item := Prod'external_declaration'1; dot_pos_item := 1; lookaheads_item := lookahead_set_2 |} ]%list.
Extract Inlined Constant items_of_state_620 => "assert false".

Definition items_of_state_621 : list item :=
  [ {| prod_item := Prod'translation_unit'0; dot_pos_item := 1; lookaheads_item := lookahead_set_2 |} ]%list.
Extract Inlined Constant items_of_state_621 => "assert false".

Definition items_of_state (s:state) : list item :=
  match s with
  | Init Init'0 => items_of_state_0
  | Ninit Nis'1 => items_of_state_1
  | Ninit Nis'2 => items_of_state_2
  | Ninit Nis'3 => items_of_state_3
  | Ninit Nis'4 => items_of_state_4
  | Ninit Nis'5 => items_of_state_5
  | Ninit Nis'6 => items_of_state_6
  | Ninit Nis'7 => items_of_state_7
  | Ninit Nis'8 => items_of_state_8
  | Ninit Nis'9 => items_of_state_9
  | Ninit Nis'10 => items_of_state_10
  | Ninit Nis'11 => items_of_state_11
  | Ninit Nis'12 => items_of_state_12
  | Ninit Nis'13 => items_of_state_13
  | Ninit Nis'14 => items_of_state_14
  | Ninit Nis'15 => items_of_state_15
  | Ninit Nis'16 => items_of_state_16
  | Ninit Nis'17 => items_of_state_17
  | Ninit Nis'18 => items_of_state_18
  | Ninit Nis'19 => items_of_state_19
  | Ninit Nis'20 => items_of_state_20
  | Ninit Nis'21 => items_of_state_21
  | Ninit Nis'22 => items_of_state_22
  | Ninit Nis'23 => items_of_state_23
  | Ninit Nis'24 => items_of_state_24
  | Ninit Nis'25 => items_of_state_25
  | Ninit Nis'26 => items_of_state_26
  | Ninit Nis'27 => items_of_state_27
  | Ninit Nis'28 => items_of_state_28
  | Ninit Nis'29 => items_of_state_29
  | Ninit Nis'30 => items_of_state_30
  | Ninit Nis'31 => items_of_state_31
  | Ninit Nis'32 => items_of_state_32
  | Ninit Nis'33 => items_of_state_33
  | Ninit Nis'34 => items_of_state_34
  | Ninit Nis'35 => items_of_state_35
  | Ninit Nis'36 => items_of_state_36
  | Ninit Nis'37 => items_of_state_37
  | Ninit Nis'38 => items_of_state_38
  | Ninit Nis'39 => items_of_state_39
  | Ninit Nis'40 => items_of_state_40
  | Ninit Nis'41 => items_of_state_41
  | Ninit Nis'42 => items_of_state_42
  | Ninit Nis'43 => items_of_state_43
  | Ninit Nis'44 => items_of_state_44
  | Ninit Nis'45 => items_of_state_45
  | Ninit Nis'46 => items_of_state_46
  | Ninit Nis'47 => items_of_state_47
  | Ninit Nis'48 => items_of_state_48
  | Ninit Nis'49 => items_of_state_49
  | Ninit Nis'50 => items_of_state_50
  | Ninit Nis'51 => items_of_state_51
  | Ninit Nis'52 => items_of_state_52
  | Ninit Nis'53 => items_of_state_53
  | Ninit Nis'54 => items_of_state_54
  | Ninit Nis'55 => items_of_state_55
  | Ninit Nis'56 => items_of_state_56
  | Ninit Nis'57 => items_of_state_57
  | Ninit Nis'58 => items_of_state_58
  | Ninit Nis'59 => items_of_state_59
  | Ninit Nis'60 => items_of_state_60
  | Ninit Nis'61 => items_of_state_61
  | Ninit Nis'62 => items_of_state_62
  | Ninit Nis'63 => items_of_state_63
  | Ninit Nis'64 => items_of_state_64
  | Ninit Nis'65 => items_of_state_65
  | Ninit Nis'66 => items_of_state_66
  | Ninit Nis'67 => items_of_state_67
  | Ninit Nis'68 => items_of_state_68
  | Ninit Nis'69 => items_of_state_69
  | Ninit Nis'70 => items_of_state_70
  | Ninit Nis'71 => items_of_state_71
  | Ninit Nis'72 => items_of_state_72
  | Ninit Nis'73 => items_of_state_73
  | Ninit Nis'74 => items_of_state_74
  | Ninit Nis'75 => items_of_state_75
  | Ninit Nis'76 => items_of_state_76
  | Ninit Nis'77 => items_of_state_77
  | Ninit Nis'78 => items_of_state_78
  | Ninit Nis'79 => items_of_state_79
  | Ninit Nis'80 => items_of_state_80
  | Ninit Nis'81 => items_of_state_81
  | Ninit Nis'82 => items_of_state_82
  | Ninit Nis'83 => items_of_state_83
  | Ninit Nis'84 => items_of_state_84
  | Ninit Nis'85 => items_of_state_85
  | Ninit Nis'86 => items_of_state_86
  | Ninit Nis'87 => items_of_state_87
  | Ninit Nis'88 => items_of_state_88
  | Ninit Nis'89 => items_of_state_89
  | Ninit Nis'90 => items_of_state_90
  | Ninit Nis'91 => items_of_state_91
  | Ninit Nis'92 => items_of_state_92
  | Ninit Nis'93 => items_of_state_93
  | Ninit Nis'94 => items_of_state_94
  | Ninit Nis'95 => items_of_state_95
  | Ninit Nis'96 => items_of_state_96
  | Ninit Nis'97 => items_of_state_97
  | Ninit Nis'98 => items_of_state_98
  | Ninit Nis'99 => items_of_state_99
  | Ninit Nis'100 => items_of_state_100
  | Ninit Nis'101 => items_of_state_101
  | Ninit Nis'102 => items_of_state_102
  | Ninit Nis'103 => items_of_state_103
  | Ninit Nis'104 => items_of_state_104
  | Ninit Nis'105 => items_of_state_105
  | Ninit Nis'106 => items_of_state_106
  | Ninit Nis'107 => items_of_state_107
  | Ninit Nis'108 => items_of_state_108
  | Ninit Nis'109 => items_of_state_109
  | Ninit Nis'110 => items_of_state_110
  | Ninit Nis'111 => items_of_state_111
  | Ninit Nis'112 => items_of_state_112
  | Ninit Nis'113 => items_of_state_113
  | Ninit Nis'114 => items_of_state_114
  | Ninit Nis'115 => items_of_state_115
  | Ninit Nis'116 => items_of_state_116
  | Ninit Nis'117 => items_of_state_117
  | Ninit Nis'118 => items_of_state_118
  | Ninit Nis'119 => items_of_state_119
  | Ninit Nis'120 => items_of_state_120
  | Ninit Nis'121 => items_of_state_121
  | Ninit Nis'122 => items_of_state_122
  | Ninit Nis'123 => items_of_state_123
  | Ninit Nis'124 => items_of_state_124
  | Ninit Nis'125 => items_of_state_125
  | Ninit Nis'126 => items_of_state_126
  | Ninit Nis'127 => items_of_state_127
  | Ninit Nis'128 => items_of_state_128
  | Ninit Nis'129 => items_of_state_129
  | Ninit Nis'130 => items_of_state_130
  | Ninit Nis'131 => items_of_state_131
  | Ninit Nis'132 => items_of_state_132
  | Ninit Nis'133 => items_of_state_133
  | Ninit Nis'134 => items_of_state_134
  | Ninit Nis'135 => items_of_state_135
  | Ninit Nis'136 => items_of_state_136
  | Ninit Nis'137 => items_of_state_137
  | Ninit Nis'138 => items_of_state_138
  | Ninit Nis'139 => items_of_state_139
  | Ninit Nis'140 => items_of_state_140
  | Ninit Nis'141 => items_of_state_141
  | Ninit Nis'142 => items_of_state_142
  | Ninit Nis'143 => items_of_state_143
  | Ninit Nis'144 => items_of_state_144
  | Ninit Nis'145 => items_of_state_145
  | Ninit Nis'146 => items_of_state_146
  | Ninit Nis'147 => items_of_state_147
  | Ninit Nis'148 => items_of_state_148
  | Ninit Nis'149 => items_of_state_149
  | Ninit Nis'150 => items_of_state_150
  | Ninit Nis'151 => items_of_state_151
  | Ninit Nis'152 => items_of_state_152
  | Ninit Nis'153 => items_of_state_153
  | Ninit Nis'154 => items_of_state_154
  | Ninit Nis'155 => items_of_state_155
  | Ninit Nis'156 => items_of_state_156
  | Ninit Nis'157 => items_of_state_157
  | Ninit Nis'158 => items_of_state_158
  | Ninit Nis'159 => items_of_state_159
  | Ninit Nis'160 => items_of_state_160
  | Ninit Nis'161 => items_of_state_161
  | Ninit Nis'162 => items_of_state_162
  | Ninit Nis'163 => items_of_state_163
  | Ninit Nis'164 => items_of_state_164
  | Ninit Nis'165 => items_of_state_165
  | Ninit Nis'166 => items_of_state_166
  | Ninit Nis'167 => items_of_state_167
  | Ninit Nis'168 => items_of_state_168
  | Ninit Nis'169 => items_of_state_169
  | Ninit Nis'170 => items_of_state_170
  | Ninit Nis'171 => items_of_state_171
  | Ninit Nis'172 => items_of_state_172
  | Ninit Nis'173 => items_of_state_173
  | Ninit Nis'174 => items_of_state_174
  | Ninit Nis'175 => items_of_state_175
  | Ninit Nis'176 => items_of_state_176
  | Ninit Nis'177 => items_of_state_177
  | Ninit Nis'178 => items_of_state_178
  | Ninit Nis'179 => items_of_state_179
  | Ninit Nis'180 => items_of_state_180
  | Ninit Nis'181 => items_of_state_181
  | Ninit Nis'182 => items_of_state_182
  | Ninit Nis'183 => items_of_state_183
  | Ninit Nis'184 => items_of_state_184
  | Ninit Nis'185 => items_of_state_185
  | Ninit Nis'186 => items_of_state_186
  | Ninit Nis'187 => items_of_state_187
  | Ninit Nis'188 => items_of_state_188
  | Ninit Nis'189 => items_of_state_189
  | Ninit Nis'190 => items_of_state_190
  | Ninit Nis'191 => items_of_state_191
  | Ninit Nis'192 => items_of_state_192
  | Ninit Nis'193 => items_of_state_193
  | Ninit Nis'194 => items_of_state_194
  | Ninit Nis'195 => items_of_state_195
  | Ninit Nis'196 => items_of_state_196
  | Ninit Nis'197 => items_of_state_197
  | Ninit Nis'198 => items_of_state_198
  | Ninit Nis'199 => items_of_state_199
  | Ninit Nis'200 => items_of_state_200
  | Ninit Nis'201 => items_of_state_201
  | Ninit Nis'202 => items_of_state_202
  | Ninit Nis'203 => items_of_state_203
  | Ninit Nis'204 => items_of_state_204
  | Ninit Nis'205 => items_of_state_205
  | Ninit Nis'206 => items_of_state_206
  | Ninit Nis'207 => items_of_state_207
  | Ninit Nis'208 => items_of_state_208
  | Ninit Nis'209 => items_of_state_209
  | Ninit Nis'210 => items_of_state_210
  | Ninit Nis'211 => items_of_state_211
  | Ninit Nis'212 => items_of_state_212
  | Ninit Nis'213 => items_of_state_213
  | Ninit Nis'214 => items_of_state_214
  | Ninit Nis'215 => items_of_state_215
  | Ninit Nis'216 => items_of_state_216
  | Ninit Nis'217 => items_of_state_217
  | Ninit Nis'218 => items_of_state_218
  | Ninit Nis'219 => items_of_state_219
  | Ninit Nis'220 => items_of_state_220
  | Ninit Nis'221 => items_of_state_221
  | Ninit Nis'222 => items_of_state_222
  | Ninit Nis'223 => items_of_state_223
  | Ninit Nis'224 => items_of_state_224
  | Ninit Nis'225 => items_of_state_225
  | Ninit Nis'226 => items_of_state_226
  | Ninit Nis'227 => items_of_state_227
  | Ninit Nis'228 => items_of_state_228
  | Ninit Nis'229 => items_of_state_229
  | Ninit Nis'230 => items_of_state_230
  | Ninit Nis'231 => items_of_state_231
  | Ninit Nis'232 => items_of_state_232
  | Ninit Nis'233 => items_of_state_233
  | Ninit Nis'234 => items_of_state_234
  | Ninit Nis'235 => items_of_state_235
  | Ninit Nis'236 => items_of_state_236
  | Ninit Nis'237 => items_of_state_237
  | Ninit Nis'238 => items_of_state_238
  | Ninit Nis'239 => items_of_state_239
  | Ninit Nis'240 => items_of_state_240
  | Ninit Nis'241 => items_of_state_241
  | Ninit Nis'242 => items_of_state_242
  | Ninit Nis'243 => items_of_state_243
  | Ninit Nis'244 => items_of_state_244
  | Ninit Nis'245 => items_of_state_245
  | Ninit Nis'246 => items_of_state_246
  | Ninit Nis'247 => items_of_state_247
  | Ninit Nis'248 => items_of_state_248
  | Ninit Nis'249 => items_of_state_249
  | Ninit Nis'250 => items_of_state_250
  | Ninit Nis'251 => items_of_state_251
  | Ninit Nis'252 => items_of_state_252
  | Ninit Nis'253 => items_of_state_253
  | Ninit Nis'254 => items_of_state_254
  | Ninit Nis'255 => items_of_state_255
  | Ninit Nis'256 => items_of_state_256
  | Ninit Nis'257 => items_of_state_257
  | Ninit Nis'258 => items_of_state_258
  | Ninit Nis'259 => items_of_state_259
  | Ninit Nis'260 => items_of_state_260
  | Ninit Nis'261 => items_of_state_261
  | Ninit Nis'262 => items_of_state_262
  | Ninit Nis'263 => items_of_state_263
  | Ninit Nis'264 => items_of_state_264
  | Ninit Nis'265 => items_of_state_265
  | Ninit Nis'266 => items_of_state_266
  | Ninit Nis'267 => items_of_state_267
  | Ninit Nis'268 => items_of_state_268
  | Ninit Nis'269 => items_of_state_269
  | Ninit Nis'270 => items_of_state_270
  | Ninit Nis'271 => items_of_state_271
  | Ninit Nis'272 => items_of_state_272
  | Ninit Nis'273 => items_of_state_273
  | Ninit Nis'274 => items_of_state_274
  | Ninit Nis'275 => items_of_state_275
  | Ninit Nis'276 => items_of_state_276
  | Ninit Nis'277 => items_of_state_277
  | Ninit Nis'278 => items_of_state_278
  | Ninit Nis'279 => items_of_state_279
  | Ninit Nis'280 => items_of_state_280
  | Ninit Nis'281 => items_of_state_281
  | Ninit Nis'282 => items_of_state_282
  | Ninit Nis'283 => items_of_state_283
  | Ninit Nis'284 => items_of_state_284
  | Ninit Nis'285 => items_of_state_285
  | Ninit Nis'286 => items_of_state_286
  | Ninit Nis'287 => items_of_state_287
  | Ninit Nis'288 => items_of_state_288
  | Ninit Nis'289 => items_of_state_289
  | Ninit Nis'290 => items_of_state_290
  | Ninit Nis'291 => items_of_state_291
  | Ninit Nis'292 => items_of_state_292
  | Ninit Nis'293 => items_of_state_293
  | Ninit Nis'294 => items_of_state_294
  | Ninit Nis'295 => items_of_state_295
  | Ninit Nis'296 => items_of_state_296
  | Ninit Nis'297 => items_of_state_297
  | Ninit Nis'298 => items_of_state_298
  | Ninit Nis'299 => items_of_state_299
  | Ninit Nis'300 => items_of_state_300
  | Ninit Nis'301 => items_of_state_301
  | Ninit Nis'302 => items_of_state_302
  | Ninit Nis'303 => items_of_state_303
  | Ninit Nis'304 => items_of_state_304
  | Ninit Nis'305 => items_of_state_305
  | Ninit Nis'306 => items_of_state_306
  | Ninit Nis'307 => items_of_state_307
  | Ninit Nis'308 => items_of_state_308
  | Ninit Nis'309 => items_of_state_309
  | Ninit Nis'310 => items_of_state_310
  | Ninit Nis'311 => items_of_state_311
  | Ninit Nis'312 => items_of_state_312
  | Ninit Nis'313 => items_of_state_313
  | Ninit Nis'314 => items_of_state_314
  | Ninit Nis'315 => items_of_state_315
  | Ninit Nis'316 => items_of_state_316
  | Ninit Nis'317 => items_of_state_317
  | Ninit Nis'318 => items_of_state_318
  | Ninit Nis'319 => items_of_state_319
  | Ninit Nis'320 => items_of_state_320
  | Ninit Nis'321 => items_of_state_321
  | Ninit Nis'322 => items_of_state_322
  | Ninit Nis'323 => items_of_state_323
  | Ninit Nis'324 => items_of_state_324
  | Ninit Nis'325 => items_of_state_325
  | Ninit Nis'326 => items_of_state_326
  | Ninit Nis'327 => items_of_state_327
  | Ninit Nis'328 => items_of_state_328
  | Ninit Nis'329 => items_of_state_329
  | Ninit Nis'330 => items_of_state_330
  | Ninit Nis'331 => items_of_state_331
  | Ninit Nis'332 => items_of_state_332
  | Ninit Nis'333 => items_of_state_333
  | Ninit Nis'334 => items_of_state_334
  | Ninit Nis'335 => items_of_state_335
  | Ninit Nis'336 => items_of_state_336
  | Ninit Nis'337 => items_of_state_337
  | Ninit Nis'338 => items_of_state_338
  | Ninit Nis'339 => items_of_state_339
  | Ninit Nis'340 => items_of_state_340
  | Ninit Nis'341 => items_of_state_341
  | Ninit Nis'342 => items_of_state_342
  | Ninit Nis'343 => items_of_state_343
  | Ninit Nis'344 => items_of_state_344
  | Ninit Nis'345 => items_of_state_345
  | Ninit Nis'346 => items_of_state_346
  | Ninit Nis'347 => items_of_state_347
  | Ninit Nis'348 => items_of_state_348
  | Ninit Nis'349 => items_of_state_349
  | Ninit Nis'350 => items_of_state_350
  | Ninit Nis'351 => items_of_state_351
  | Ninit Nis'352 => items_of_state_352
  | Ninit Nis'353 => items_of_state_353
  | Ninit Nis'354 => items_of_state_354
  | Ninit Nis'355 => items_of_state_355
  | Ninit Nis'356 => items_of_state_356
  | Ninit Nis'357 => items_of_state_357
  | Ninit Nis'358 => items_of_state_358
  | Ninit Nis'359 => items_of_state_359
  | Ninit Nis'360 => items_of_state_360
  | Ninit Nis'361 => items_of_state_361
  | Ninit Nis'362 => items_of_state_362
  | Ninit Nis'363 => items_of_state_363
  | Ninit Nis'364 => items_of_state_364
  | Ninit Nis'365 => items_of_state_365
  | Ninit Nis'367 => items_of_state_367
  | Ninit Nis'368 => items_of_state_368
  | Ninit Nis'369 => items_of_state_369
  | Ninit Nis'370 => items_of_state_370
  | Ninit Nis'371 => items_of_state_371
  | Ninit Nis'372 => items_of_state_372
  | Ninit Nis'373 => items_of_state_373
  | Ninit Nis'374 => items_of_state_374
  | Ninit Nis'375 => items_of_state_375
  | Ninit Nis'376 => items_of_state_376
  | Ninit Nis'377 => items_of_state_377
  | Ninit Nis'378 => items_of_state_378
  | Ninit Nis'379 => items_of_state_379
  | Ninit Nis'380 => items_of_state_380
  | Ninit Nis'381 => items_of_state_381
  | Ninit Nis'382 => items_of_state_382
  | Ninit Nis'383 => items_of_state_383
  | Ninit Nis'384 => items_of_state_384
  | Ninit Nis'385 => items_of_state_385
  | Ninit Nis'386 => items_of_state_386
  | Ninit Nis'387 => items_of_state_387
  | Ninit Nis'388 => items_of_state_388
  | Ninit Nis'389 => items_of_state_389
  | Ninit Nis'390 => items_of_state_390
  | Ninit Nis'391 => items_of_state_391
  | Ninit Nis'392 => items_of_state_392
  | Ninit Nis'393 => items_of_state_393
  | Ninit Nis'394 => items_of_state_394
  | Ninit Nis'395 => items_of_state_395
  | Ninit Nis'396 => items_of_state_396
  | Ninit Nis'397 => items_of_state_397
  | Ninit Nis'398 => items_of_state_398
  | Ninit Nis'399 => items_of_state_399
  | Ninit Nis'400 => items_of_state_400
  | Ninit Nis'401 => items_of_state_401
  | Ninit Nis'402 => items_of_state_402
  | Ninit Nis'403 => items_of_state_403
  | Ninit Nis'404 => items_of_state_404
  | Ninit Nis'405 => items_of_state_405
  | Ninit Nis'406 => items_of_state_406
  | Ninit Nis'407 => items_of_state_407
  | Ninit Nis'408 => items_of_state_408
  | Ninit Nis'409 => items_of_state_409
  | Ninit Nis'410 => items_of_state_410
  | Ninit Nis'411 => items_of_state_411
  | Ninit Nis'412 => items_of_state_412
  | Ninit Nis'413 => items_of_state_413
  | Ninit Nis'414 => items_of_state_414
  | Ninit Nis'415 => items_of_state_415
  | Ninit Nis'416 => items_of_state_416
  | Ninit Nis'417 => items_of_state_417
  | Ninit Nis'418 => items_of_state_418
  | Ninit Nis'419 => items_of_state_419
  | Ninit Nis'420 => items_of_state_420
  | Ninit Nis'421 => items_of_state_421
  | Ninit Nis'422 => items_of_state_422
  | Ninit Nis'423 => items_of_state_423
  | Ninit Nis'424 => items_of_state_424
  | Ninit Nis'425 => items_of_state_425
  | Ninit Nis'426 => items_of_state_426
  | Ninit Nis'427 => items_of_state_427
  | Ninit Nis'428 => items_of_state_428
  | Ninit Nis'429 => items_of_state_429
  | Ninit Nis'430 => items_of_state_430
  | Ninit Nis'431 => items_of_state_431
  | Ninit Nis'432 => items_of_state_432
  | Ninit Nis'433 => items_of_state_433
  | Ninit Nis'434 => items_of_state_434
  | Ninit Nis'435 => items_of_state_435
  | Ninit Nis'436 => items_of_state_436
  | Ninit Nis'437 => items_of_state_437
  | Ninit Nis'438 => items_of_state_438
  | Ninit Nis'439 => items_of_state_439
  | Ninit Nis'440 => items_of_state_440
  | Ninit Nis'441 => items_of_state_441
  | Ninit Nis'442 => items_of_state_442
  | Ninit Nis'443 => items_of_state_443
  | Ninit Nis'444 => items_of_state_444
  | Ninit Nis'445 => items_of_state_445
  | Ninit Nis'446 => items_of_state_446
  | Ninit Nis'447 => items_of_state_447
  | Ninit Nis'448 => items_of_state_448
  | Ninit Nis'449 => items_of_state_449
  | Ninit Nis'450 => items_of_state_450
  | Ninit Nis'451 => items_of_state_451
  | Ninit Nis'452 => items_of_state_452
  | Ninit Nis'453 => items_of_state_453
  | Ninit Nis'454 => items_of_state_454
  | Ninit Nis'455 => items_of_state_455
  | Ninit Nis'456 => items_of_state_456
  | Ninit Nis'457 => items_of_state_457
  | Ninit Nis'458 => items_of_state_458
  | Ninit Nis'459 => items_of_state_459
  | Ninit Nis'460 => items_of_state_460
  | Ninit Nis'461 => items_of_state_461
  | Ninit Nis'462 => items_of_state_462
  | Ninit Nis'463 => items_of_state_463
  | Ninit Nis'464 => items_of_state_464
  | Ninit Nis'465 => items_of_state_465
  | Ninit Nis'466 => items_of_state_466
  | Ninit Nis'467 => items_of_state_467
  | Ninit Nis'468 => items_of_state_468
  | Ninit Nis'469 => items_of_state_469
  | Ninit Nis'470 => items_of_state_470
  | Ninit Nis'471 => items_of_state_471
  | Ninit Nis'472 => items_of_state_472
  | Ninit Nis'473 => items_of_state_473
  | Ninit Nis'474 => items_of_state_474
  | Ninit Nis'475 => items_of_state_475
  | Ninit Nis'476 => items_of_state_476
  | Ninit Nis'477 => items_of_state_477
  | Ninit Nis'478 => items_of_state_478
  | Ninit Nis'479 => items_of_state_479
  | Ninit Nis'480 => items_of_state_480
  | Ninit Nis'481 => items_of_state_481
  | Ninit Nis'482 => items_of_state_482
  | Ninit Nis'483 => items_of_state_483
  | Ninit Nis'484 => items_of_state_484
  | Ninit Nis'485 => items_of_state_485
  | Ninit Nis'486 => items_of_state_486
  | Ninit Nis'487 => items_of_state_487
  | Ninit Nis'488 => items_of_state_488
  | Ninit Nis'489 => items_of_state_489
  | Ninit Nis'490 => items_of_state_490
  | Ninit Nis'491 => items_of_state_491
  | Ninit Nis'492 => items_of_state_492
  | Ninit Nis'493 => items_of_state_493
  | Ninit Nis'494 => items_of_state_494
  | Ninit Nis'495 => items_of_state_495
  | Ninit Nis'496 => items_of_state_496
  | Ninit Nis'497 => items_of_state_497
  | Ninit Nis'498 => items_of_state_498
  | Ninit Nis'499 => items_of_state_499
  | Ninit Nis'500 => items_of_state_500
  | Ninit Nis'501 => items_of_state_501
  | Ninit Nis'502 => items_of_state_502
  | Ninit Nis'503 => items_of_state_503
  | Ninit Nis'504 => items_of_state_504
  | Ninit Nis'505 => items_of_state_505
  | Ninit Nis'506 => items_of_state_506
  | Ninit Nis'507 => items_of_state_507
  | Ninit Nis'508 => items_of_state_508
  | Ninit Nis'509 => items_of_state_509
  | Ninit Nis'510 => items_of_state_510
  | Ninit Nis'511 => items_of_state_511
  | Ninit Nis'512 => items_of_state_512
  | Ninit Nis'513 => items_of_state_513
  | Ninit Nis'514 => items_of_state_514
  | Ninit Nis'515 => items_of_state_515
  | Ninit Nis'516 => items_of_state_516
  | Ninit Nis'517 => items_of_state_517
  | Ninit Nis'518 => items_of_state_518
  | Ninit Nis'519 => items_of_state_519
  | Ninit Nis'520 => items_of_state_520
  | Ninit Nis'521 => items_of_state_521
  | Ninit Nis'522 => items_of_state_522
  | Ninit Nis'523 => items_of_state_523
  | Ninit Nis'524 => items_of_state_524
  | Ninit Nis'525 => items_of_state_525
  | Ninit Nis'526 => items_of_state_526
  | Ninit Nis'527 => items_of_state_527
  | Ninit Nis'528 => items_of_state_528
  | Ninit Nis'529 => items_of_state_529
  | Ninit Nis'530 => items_of_state_530
  | Ninit Nis'531 => items_of_state_531
  | Ninit Nis'532 => items_of_state_532
  | Ninit Nis'533 => items_of_state_533
  | Ninit Nis'534 => items_of_state_534
  | Ninit Nis'535 => items_of_state_535
  | Ninit Nis'536 => items_of_state_536
  | Ninit Nis'537 => items_of_state_537
  | Ninit Nis'538 => items_of_state_538
  | Ninit Nis'539 => items_of_state_539
  | Ninit Nis'540 => items_of_state_540
  | Ninit Nis'541 => items_of_state_541
  | Ninit Nis'542 => items_of_state_542
  | Ninit Nis'543 => items_of_state_543
  | Ninit Nis'544 => items_of_state_544
  | Ninit Nis'545 => items_of_state_545
  | Ninit Nis'546 => items_of_state_546
  | Ninit Nis'547 => items_of_state_547
  | Ninit Nis'548 => items_of_state_548
  | Ninit Nis'549 => items_of_state_549
  | Ninit Nis'550 => items_of_state_550
  | Ninit Nis'551 => items_of_state_551
  | Ninit Nis'552 => items_of_state_552
  | Ninit Nis'553 => items_of_state_553
  | Ninit Nis'554 => items_of_state_554
  | Ninit Nis'555 => items_of_state_555
  | Ninit Nis'556 => items_of_state_556
  | Ninit Nis'557 => items_of_state_557
  | Ninit Nis'558 => items_of_state_558
  | Ninit Nis'559 => items_of_state_559
  | Ninit Nis'560 => items_of_state_560
  | Ninit Nis'561 => items_of_state_561
  | Ninit Nis'562 => items_of_state_562
  | Ninit Nis'563 => items_of_state_563
  | Ninit Nis'564 => items_of_state_564
  | Ninit Nis'565 => items_of_state_565
  | Ninit Nis'566 => items_of_state_566
  | Ninit Nis'567 => items_of_state_567
  | Ninit Nis'568 => items_of_state_568
  | Ninit Nis'569 => items_of_state_569
  | Ninit Nis'570 => items_of_state_570
  | Ninit Nis'571 => items_of_state_571
  | Ninit Nis'572 => items_of_state_572
  | Ninit Nis'573 => items_of_state_573
  | Ninit Nis'574 => items_of_state_574
  | Ninit Nis'575 => items_of_state_575
  | Ninit Nis'576 => items_of_state_576
  | Ninit Nis'577 => items_of_state_577
  | Ninit Nis'578 => items_of_state_578
  | Ninit Nis'579 => items_of_state_579
  | Ninit Nis'580 => items_of_state_580
  | Ninit Nis'581 => items_of_state_581
  | Ninit Nis'582 => items_of_state_582
  | Ninit Nis'583 => items_of_state_583
  | Ninit Nis'584 => items_of_state_584
  | Ninit Nis'585 => items_of_state_585
  | Ninit Nis'586 => items_of_state_586
  | Ninit Nis'587 => items_of_state_587
  | Ninit Nis'588 => items_of_state_588
  | Ninit Nis'589 => items_of_state_589
  | Ninit Nis'590 => items_of_state_590
  | Ninit Nis'591 => items_of_state_591
  | Ninit Nis'592 => items_of_state_592
  | Ninit Nis'593 => items_of_state_593
  | Ninit Nis'594 => items_of_state_594
  | Ninit Nis'595 => items_of_state_595
  | Ninit Nis'596 => items_of_state_596
  | Ninit Nis'597 => items_of_state_597
  | Ninit Nis'598 => items_of_state_598
  | Ninit Nis'599 => items_of_state_599
  | Ninit Nis'600 => items_of_state_600
  | Ninit Nis'601 => items_of_state_601
  | Ninit Nis'602 => items_of_state_602
  | Ninit Nis'603 => items_of_state_603
  | Ninit Nis'604 => items_of_state_604
  | Ninit Nis'605 => items_of_state_605
  | Ninit Nis'606 => items_of_state_606
  | Ninit Nis'607 => items_of_state_607
  | Ninit Nis'608 => items_of_state_608
  | Ninit Nis'609 => items_of_state_609
  | Ninit Nis'610 => items_of_state_610
  | Ninit Nis'611 => items_of_state_611
  | Ninit Nis'612 => items_of_state_612
  | Ninit Nis'613 => items_of_state_613
  | Ninit Nis'614 => items_of_state_614
  | Ninit Nis'615 => items_of_state_615
  | Ninit Nis'616 => items_of_state_616
  | Ninit Nis'617 => items_of_state_617
  | Ninit Nis'618 => items_of_state_618
  | Ninit Nis'619 => items_of_state_619
  | Ninit Nis'620 => items_of_state_620
  | Ninit Nis'621 => items_of_state_621
  end.
Extract Constant items_of_state => "fun _ -> assert false".

End Aut.

Module MenhirLibParser := MenhirLib.Main.Make Aut.
Theorem safe:
  MenhirLibParser.safe_validator tt = true.
Proof eq_refl true<:MenhirLibParser.safe_validator tt = true.

Theorem complete:
  MenhirLibParser.complete_validator tt = true.
Proof eq_refl true<:MenhirLibParser.complete_validator tt = true.

Definition translation_unit_file : nat -> MenhirLibParser.Inter.buffer -> MenhirLibParser.Inter.parse_result       (list Cabs.definition) := MenhirLibParser.parse safe Aut.Init'0.

Theorem translation_unit_file_correct (log_fuel : nat) (buffer : MenhirLibParser.Inter.buffer):
  match translation_unit_file log_fuel buffer with
  | MenhirLibParser.Inter.Parsed_pr sem buffer_new =>
      exists word (tree : Gram.parse_tree (NT translation_unit_file'nt) word),
        buffer = MenhirLibParser.Inter.app_buf word buffer_new /\
        Gram.pt_sem tree = sem
  | _ => True
  end.
Proof. apply MenhirLibParser.parse_correct with (init:=Aut.Init'0). Qed.

Theorem translation_unit_file_complete (log_fuel : nat) (word : list token) (buffer_end : MenhirLibParser.Inter.buffer) :
  forall tree : Gram.parse_tree (NT translation_unit_file'nt) word,
  match translation_unit_file log_fuel (MenhirLibParser.Inter.app_buf word buffer_end) with
  | MenhirLibParser.Inter.Fail_pr => False
  | MenhirLibParser.Inter.Parsed_pr output_res buffer_end_res =>
      output_res = Gram.pt_sem tree /\
      buffer_end_res = buffer_end /\ (Gram.pt_size tree <= PeanoNat.Nat.pow 2 log_fuel)%nat
  | MenhirLibParser.Inter.Timeout_pr => (PeanoNat.Nat.pow 2 log_fuel < Gram.pt_size tree)%nat
  end.
Proof. apply MenhirLibParser.parse_complete with (init:=Aut.Init'0); exact complete. Qed.
